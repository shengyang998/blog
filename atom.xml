<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tech. Design. Life.</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.superyoung.win/"/>
  <updated>2017-04-02T13:05:13.000Z</updated>
  <id>http://blog.superyoung.win/</id>
  
  <author>
    <name>Yu Shengyang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于长时间伏案工作和学习的经验</title>
    <link href="http://blog.superyoung.win/2017/04/02/notes/about_working/"/>
    <id>http://blog.superyoung.win/2017/04/02/notes/about_working/</id>
    <published>2017-04-02T12:37:00.000Z</published>
    <updated>2017-04-02T13:05:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>多读书，多看报，少吃零食，多睡觉！</p><a id="more"></a><p>最近总是长时间对着电脑学习和工作，感觉皮肤和身体状况都差了好多。定期的运动呢是有的，但是这并不能解决工作时的状态不佳问题。有人建议说定时休息，去茶水间喝喝水或者跟别人聊聊天。但是我个人的工作习惯是解决一个问题才休息，毕竟重新集中精力很难、非常难。但是其实吧，这种态度完全是错误的，最优解还是定时休息，番茄工作法建议半个小时休息5分钟，而按照我个人的实践来说，一般以一到两个小时休息十五分钟到半个小时为最佳。因为</p><ol><li>半个小时往往并不能解决一个问题；</li><li>休息五分钟并不能放松；</li><li>重新进入状态花费的时间可能更长；</li><li>而休息十五分钟到半个小时的话，可以花费其中的一部分休息时间让自己做好工作准备；</li><li>况且工作时一旦进入心流状态，肯定会持续超过半个小时的，心流状态难得，实在不忍心打断；</li></ol><p>所以不管怎么说，定时休息是必须的。不要在一个问题上工作太长时间，如果长时间无法解决一个问题的话，说明思路不对，而且长时间面对一个问题很容易让自己钻牛角尖，放松的时候你的思路会更加扩散，反而更有利于解决问题，自己的压力也能减轻一点。</p><p>但是我这个人呢，习惯就是这样，坐下来就不想动，相信很多人也和我一样。那难道就没办法了吗？有的。有一个办法，也算是一个工作的时候能遵守的原则，就是：</p><blockquote><p>正常情况下，如果手边没有茶水，我是不会碰电脑/开始工作的<br>┑(￣Д ￣)┍</p></blockquote><p>原因嘛就是，边工作边喝茶，喝完茶过了一段时间自然而然想去上厕所。喝茶呢一个可以保护自己的皮肤状态和体液平衡，另一个原因呢尿意会自动逼你站起来走走，一旦站起来，自然就会放松一下，而且走走正好可以扩展一下思路。</p><p>以上，献给跟我一样工作起来就不能频繁走动的人。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;多读书，多看报，少吃零食，多睡觉！&lt;/p&gt;
    
    </summary>
    
    
      <category term="Working" scheme="http://blog.superyoung.win/tags/Working/"/>
    
      <category term="Experience" scheme="http://blog.superyoung.win/tags/Experience/"/>
    
  </entry>
  
  <entry>
    <title>关闭 macOS 的 Spotlight 功能</title>
    <link href="http://blog.superyoung.win/2017/03/27/learning_macos_command/disable_spotlight_in_macos/"/>
    <id>http://blog.superyoung.win/2017/03/27/learning_macos_command/disable_spotlight_in_macos/</id>
    <published>2017-03-27T07:17:44.000Z</published>
    <updated>2017-04-05T06:52:03.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>不建议</code> 关闭 Spotlight 功能！Alfred 依赖于 Spotlight 服务建立起来的索引。</p><a id="more"></a><h2 id="unload-metadata-模块："><a href="#unload-metadata-模块：" class="headerlink" title="unload metadata 模块："></a>unload metadata 模块：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># unload</div><div class="line">sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.metadata.mds.plist</div><div class="line"># load</div><div class="line">sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.metadata.mds.plist</div></pre></td></tr></table></figure><p>注意，一旦 unload metadata 模块，系统的索引功能也会失效，也就是说索引功能不能通过以下命令开启和关闭。而且这时候 Alfred 和 Spotlight 都将不能使用搜索文件的功能。</p><h2 id="关闭索引："><a href="#关闭索引：" class="headerlink" title="关闭索引："></a>关闭索引：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># turn off:</div><div class="line">sudo mdutil -a -i off</div><div class="line"># turn on</div><div class="line">sudo mdutil -a -i on</div></pre></td></tr></table></figure><p>以下内容摘自 Alfred 的 troubleshooting：</p><blockquote><p>Q: Can Alfred work without Spotlight enabled?</p><p>A: Alfred relies on the same OS X metadata index as Spotlight. As such, it’s important for you to let Spotlight run on your Mac to maintain an index of the files on it. Turning off Spotlight indexing will still allow you to use Alfred as a web launcher but you’ll no longer be able to find files on your Mac.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;不建议&lt;/code&gt; 关闭 Spotlight 功能！Alfred 依赖于 Spotlight 服务建立起来的索引。&lt;/p&gt;
    
    </summary>
    
    
      <category term="macOS" scheme="http://blog.superyoung.win/tags/macOS/"/>
    
      <category term="Spotlight" scheme="http://blog.superyoung.win/tags/Spotlight/"/>
    
      <category term="OS X" scheme="http://blog.superyoung.win/tags/OS-X/"/>
    
  </entry>
  
  <entry>
    <title>把 Gcc / G++ 的错误重定向输出到文件</title>
    <link href="http://blog.superyoung.win/2017/03/23/learning_bash/redirect_gcc_error_output_to_file/"/>
    <id>http://blog.superyoung.win/2017/03/23/learning_bash/redirect_gcc_error_output_to_file/</id>
    <published>2017-03-23T05:19:34.000Z</published>
    <updated>2017-04-05T06:54:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过管道，重定向 gcc 的错误输出到文件<br><a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># compile and output error messages to log file:</div><div class="line">    g++ -o a *.cpp 2&gt;build_err.log</div></pre></td></tr></table></figure><ul><li>因为 g++ 使用了错误流（而不是标准输出流）来输出错误信息，所以需要制定上面的<code>2</code>来重定向 g++ 的错误流，若不指定，将会尝试重定向标准输出流，而标准输出流往往没有任何内容的。</li><li><code>&gt;</code> 是重定向符，借助它才能将向屏幕的输出流重定向到指定文件</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过管道，重定向 gcc 的错误输出到文件&lt;br&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://blog.superyoung.win/tags/Linux/"/>
    
      <category term="Shell" scheme="http://blog.superyoung.win/tags/Shell/"/>
    
      <category term="GNU" scheme="http://blog.superyoung.win/tags/GNU/"/>
    
      <category term="GCC" scheme="http://blog.superyoung.win/tags/GCC/"/>
    
      <category term="G++" scheme="http://blog.superyoung.win/tags/G/"/>
    
      <category term="Redirect" scheme="http://blog.superyoung.win/tags/Redirect/"/>
    
      <category term="log" scheme="http://blog.superyoung.win/tags/log/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 中 DATE, DATETIME 和 TIMESTAMP 的异同</title>
    <link href="http://blog.superyoung.win/2017/03/20/learning_mysql/difference_date_datetime_timestamp/"/>
    <id>http://blog.superyoung.win/2017/03/20/learning_mysql/difference_date_datetime_timestamp/</id>
    <published>2017-03-20T03:10:15.000Z</published>
    <updated>2017-03-20T08:15:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章介绍了<code>DATE</code>, <code>DATETIME</code> 和 <code>TIMESTAMP</code> 的相似点和不同点。</p><a id="more"></a><p><code>DATE</code> 类型被用作表示日期，而不包括时间部分。 MySQL 用’YYYY-MM-DD’格式检索和展示 DATE 值。支持范围从’1000-01-01’到’9999-12-31’</p><p><code>DATETIME</code> 类型用来保存日期和时间。MySQL 以’YYYY-MM-DD HH:MM:SS’ 格式处理DATETIME 类型。范围从’1000-01-01 00:00:00’ 到 ‘9999-12-31 23:59:59’</p><p><code>TIMESTAMP</code> 类型也用来表示时间和日期。 TIMESTAMP 表示范围是：‘1970-01-01 00:00:01’ 到 ‘2038-01-19 03:14:07’ UTC。</p><p>MySQL 在存储 TIMESTAMP 格式的值的时候，会把它从当前时区转换成 UTC 时区，然后在处理的时候把它从 UTC 时区转换回当前时区。而其他类型（比如 DATETIME）不会发生这样的转换。默认情况下，每个链接的当前时区是服务器所在的时区。但是每个链接可以自定义自己的时区。只要时区设置是同一个常数，你就可以获取到你存入的准确时间。所以如果你在存入 TIMESTAMP 值后更改了时区，再取回数据，这些被取回的数据将会和你存入的不同。详情参见 <a href="https://dev.mysql.com/doc/refman/5.5/en/time-zone-support.html" target="_blank" rel="external">Section 10.6, “MySQL Server Time Zone Support”</a></p><p><code>TIMESTAMP</code> 数据可以自动初始化和更新当前日期和时间。详情参见 <a href="https://dev.mysql.com/doc/refman/5.5/en/timestamp-initialization.html" target="_blank" rel="external">Section 11.3.5, “Automatic Initialization and Updating for TIMESTAMP”</a></p><p><code>DATETIME</code> 或者 <code>TIMESTAMP</code> 值可以在尾部包含小数形式的秒，精确到毫秒级（6位）。虽然这些小数部分可以被识别，但是在存储入 DATETIME 或者 TIMESTAMP 的字段中的时候会被丢弃。</p><p>无效的 DATE，DATETIME 或者 TIMESTAMP 值将会被转换成对应类型的 “零” （’0000-00-00’ or ‘0000-00-00 00:00:00’）。</p><p>注意这些特定的属性在 MySQL 中的解释：</p><ul><li><p>MySQL 支持一些 “便利格式”，也就是在把一个分隔符，有时候这些便利语法也可以被接受，比如，一个 <code>&#39;10:11:12</code> 可能因为 <code>:</code> 看起来像时间，但是如果被存入一个日期字段，它会被转换成对应的日期 <code>2010-11-12</code> 。而如果把值 <code>&#39;10:45:15&#39;</code> 存入日期字段，它将会被转换成 <code>&#39;0000-00-00&#39;</code> 再存入，因为 ‘45’ 不是一个有效的月份值。</p></li><li><p>服务器验证月份和日期的有效性的时候，不会仅仅验证1-12和1-31。在关闭严格模式（strict mode）的时候，不正确的值（’2004-04-31’）将会被转换成’0000-00-00’存入数据库，并伴随着一个警告。而当打开严格模式的时候，将不会存入，并产生一个错误。而如果你要让服务器接受这样不正确的值，你需要打开 <code>ALLOW_INVALID_DATES</code>。</p></li><li><p>MySQL 不接受包含 0 的或者无效的 TIMESTAMP 值。唯一的例外是 ‘0000-00-00 00:00:00’</p></li><li><p><code>CAST()</code> 会把 TIMESTAMP 转换成字符串。详情参见 <a href="https://dev.mysql.com/doc/refman/5.7/en/cast-functions.html" target="_blank" rel="external">Section 12.10, “Cast Functions and Operators”</a></p></li><li><p>Dates containing two-digit year values are ambiguous because the century is unknown. MySQL interprets two-digit year values using these rules:</p></li><li>当不指定年份的前两位的时候，为了避免二义性，MySQL 将会这样做：<ul><li>00-69 将会被转化为 2000-2069</li><li>70-99 将会被转化为 1970-1999</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章介绍了&lt;code&gt;DATE&lt;/code&gt;, &lt;code&gt;DATETIME&lt;/code&gt; 和 &lt;code&gt;TIMESTAMP&lt;/code&gt; 的相似点和不同点。&lt;/p&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://blog.superyoung.win/tags/MySQL/"/>
    
      <category term="DATE" scheme="http://blog.superyoung.win/tags/DATE/"/>
    
      <category term="DATETIME" scheme="http://blog.superyoung.win/tags/DATETIME/"/>
    
      <category term="TIMESTAMP" scheme="http://blog.superyoung.win/tags/TIMESTAMP/"/>
    
      <category term="Difference" scheme="http://blog.superyoung.win/tags/Difference/"/>
    
  </entry>
  
  <entry>
    <title>使用 Which 命令查看当前执行的命令所在路径</title>
    <link href="http://blog.superyoung.win/2017/03/20/learning_bash/determined_which_command_your_are_running/"/>
    <id>http://blog.superyoung.win/2017/03/20/learning_bash/determined_which_command_your_are_running/</id>
    <published>2017-03-20T02:43:01.000Z</published>
    <updated>2017-04-05T06:53:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>有时候可能需要知道某个命令执行的程序所在的具体路径，特别是当你的程序有多个版本的时候，接下来要介绍的这个命令就非常重要了。<br>这个命令就是 which 命令，简单来说，其用法为： <code>which [-as] program</code></p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ man which</div><div class="line"></div><div class="line">WHICH(1)             BSD General Commands Manual             WHICH(1)</div><div class="line"></div><div class="line">NAME</div><div class="line">     which -- locate a program file in the user&apos;s path</div><div class="line"></div><div class="line">SYNOPSIS</div><div class="line">     which [-as] program ...</div><div class="line"></div><div class="line">DESCRIPTION</div><div class="line">     which 工具接收一个或几个命令名字，然后搜索每个可执行文件的路径</div><div class="line"></div><div class="line">     The following options are available:</div><div class="line"></div><div class="line">     -a      列出所有可执行文件，而不是只列出第一个可执行文件（可以用来查看已安装的某个应用的所有版本）</div><div class="line"></div><div class="line">     -s      无输出，当可执行文件存在的时候返回 `0`，不存在的时候返回 `1`。</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时候可能需要知道某个命令执行的程序所在的具体路径，特别是当你的程序有多个版本的时候，接下来要介绍的这个命令就非常重要了。&lt;br&gt;这个命令就是 which 命令，简单来说，其用法为： &lt;code&gt;which [-as] program&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://blog.superyoung.win/tags/Linux/"/>
    
      <category term="Shell" scheme="http://blog.superyoung.win/tags/Shell/"/>
    
      <category term="Command" scheme="http://blog.superyoung.win/tags/Command/"/>
    
      <category term="Path" scheme="http://blog.superyoung.win/tags/Path/"/>
    
      <category term="which" scheme="http://blog.superyoung.win/tags/which/"/>
    
  </entry>
  
  <entry>
    <title>使用 Matlab 高效计算位平面图</title>
    <link href="http://blog.superyoung.win/2017/03/11/matlab/caculate_bit_plane_picture/"/>
    <id>http://blog.superyoung.win/2017/03/11/matlab/caculate_bit_plane_picture/</id>
    <published>2017-03-11T02:05:57.000Z</published>
    <updated>2017-03-11T05:17:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>bit-plane，就是将一张图按照各个比特位来切分以后的图，每一张位面图都是二值图。<br>为了避免与游戏中的名词<code>位面图</code>混淆，可以把bit-plane翻译成<code>位平面图</code>，而且这样更好理解。</p><p>本文章记录了使用 Matlab2016a 计算一张图的位平面图过程，以及并行功能使用过程中的一些要点。<br>Matlab 的并行工具使用起来还算简单，效率也高，按照本人<code>1.3 GHz Intel Core i5</code>测试的结果加速比大概有 1.5。</p><a id="more"></a><p>##　废话不多说，直接上代码和注释</p><ol><li><p>首先初始化 Matlab 并行池：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">% parallel pool initialization</span></div><div class="line">CoreNum = <span class="number">2</span>; <span class="comment">% core number of you computer</span></div><div class="line"><span class="keyword">if</span> <span class="built_in">isempty</span>(gcp(<span class="string">'nocreate'</span>))</div><div class="line">    parpool(<span class="string">'local'</span>, CoreNum);</div><div class="line"><span class="keyword">else</span></div><div class="line">    <span class="built_in">disp</span>(<span class="string">'parallel pool is already initialized'</span>)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></li><li><p>读取图像，并初始化用于保存结果的变量：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">% read the image by path</span></div><div class="line">im = imread(<span class="string">'/Users/yjm/Desktop/_MG_0403.jpg'</span>);</div><div class="line"><span class="comment">% show the original image</span></div><div class="line">figure, subplot(<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>), imshow(im);</div><div class="line">im = double(im);</div><div class="line"><span class="comment">% get the size</span></div><div class="line">[height, width, dropped] = <span class="built_in">size</span>(im);</div><div class="line"><span class="comment">% initialize the result matrix</span></div><div class="line">onesbitmap = <span class="built_in">ones</span>(height, width);</div><div class="line">result = [];</div></pre></td></tr></table></figure></li><li><p>开始计算：</p><blockquote><p>这里用的是 parfor 并行计算工具，用来代替原本的普通 for 循环：</p></blockquote></li></ol><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">% start caculation</span></div><div class="line">tic <span class="comment">% 计时开始</span></div><div class="line"><span class="keyword">parfor</span> v = <span class="number">1</span> : <span class="number">8</span></div><div class="line">    tic</div><div class="line">    bitmap = <span class="built_in">ones</span>(height, width);</div><div class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : height</div><div class="line">        <span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span> : width</div><div class="line">            <span class="keyword">if</span> <span class="built_in">mod</span>(<span class="built_in">floor</span>(im(<span class="built_in">i</span>,<span class="built_in">j</span>)/(<span class="number">2</span>^(v<span class="number">-1</span>))), <span class="number">2</span>) == <span class="number">0</span></div><div class="line">                bitmap(<span class="built_in">i</span>, <span class="built_in">j</span>) = <span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> </div><div class="line">                bitmap(<span class="built_in">i</span>, <span class="built_in">j</span>) = <span class="number">0</span>;</div><div class="line">            <span class="keyword">end</span></div><div class="line">        <span class="keyword">end</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">    result = [result bitmap]; <span class="comment">% append bitmap to result</span></div><div class="line">    toc</div><div class="line"><span class="keyword">end</span></div><div class="line">toc <span class="comment">% 计时结束</span></div></pre></td></tr></table></figure><blockquote><p>上面的代码中有三大要点：</p><ol><li>注意 parfor 循环中使用的变量只有两种情况：要么是局部变量，要么需要在 parfor 外分配好内存空间。并且尽量避免使用全局变量，可能会导致并行过程中的信息交换拖慢运行速度。</li><li>最内层循环的判断句 <code>if mod(floor(im(i,j)/(2^(v-1))), 2) == 0</code>，这是计算位平面图的核心算法。 自己改写成数学公式以后会很容易理解的。</li><li>其次是 <code>result = [result bitmap];</code>，这句话是把本次循环后计算出来的值增加到结果变量的最后面。</li></ol></blockquote><ol><li>展示结果：<figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">% show the result</span></div><div class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : <span class="number">8</span></div><div class="line">    <span class="comment">% show the bit-plane images, from  column  (i-1)*width+1 to i*width</span></div><div class="line">    subplot(<span class="number">3</span>,<span class="number">3</span>,<span class="built_in">i</span>+<span class="number">1</span>), imshow(result(<span class="number">1</span>: height, (<span class="built_in">i</span><span class="number">-1</span>)*width+<span class="number">1</span> : <span class="built_in">i</span>*width))</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></li></ol><blockquote><p>注意这里要自己计算出结果变量中的各个图像的边界，Matlab 不会自动把那些图像分开。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;bit-plane，就是将一张图按照各个比特位来切分以后的图，每一张位面图都是二值图。&lt;br&gt;为了避免与游戏中的名词&lt;code&gt;位面图&lt;/code&gt;混淆，可以把bit-plane翻译成&lt;code&gt;位平面图&lt;/code&gt;，而且这样更好理解。&lt;/p&gt;&lt;p&gt;本文章记录了使用 Matlab2016a 计算一张图的位平面图过程，以及并行功能使用过程中的一些要点。&lt;br&gt;Matlab 的并行工具使用起来还算简单，效率也高，按照本人&lt;code&gt;1.3 GHz Intel Core i5&lt;/code&gt;测试的结果加速比大概有 1.5。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Matlab" scheme="http://blog.superyoung.win/tags/Matlab/"/>
    
      <category term="Bit-plane" scheme="http://blog.superyoung.win/tags/Bit-plane/"/>
    
      <category term="Digital" scheme="http://blog.superyoung.win/tags/Digital/"/>
    
      <category term="Image" scheme="http://blog.superyoung.win/tags/Image/"/>
    
      <category term="Processing" scheme="http://blog.superyoung.win/tags/Processing/"/>
    
      <category term="Parallel" scheme="http://blog.superyoung.win/tags/Parallel/"/>
    
      <category term="parfor" scheme="http://blog.superyoung.win/tags/parfor/"/>
    
  </entry>
  
  <entry>
    <title>搭建你自己的 SVN 服务器</title>
    <link href="http://blog.superyoung.win/2017/03/03/version_controller/setup_svn_server/"/>
    <id>http://blog.superyoung.win/2017/03/03/version_controller/setup_svn_server/</id>
    <published>2017-03-03T15:00:39.000Z</published>
    <updated>2017-03-11T02:05:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>SVN 全称：<a href="https://subversion.apache.org" target="_blank" rel="external">Apache™ Subversion®</a> ，是一个开源的 <code>Enterprise-class centralized version control for the masses</code> 企业级中心化版本控制器。区分于 Git，它不是分布式的而是中心化的，在过去十年中也挺成功。但是在 Git 出现之后，它的光环就有点暗淡了。</p><p>好，闲话不多说，本教程将会教你如何搭建自己的 SVN 服务器</p><a id="more"></a><p>可以看看<a href="/images/set_up_svn_server/index.html">简洁版</a></p><h2 id="0x00-准备"><a href="#0x00-准备" class="headerlink" title="0x00 准备"></a>0x00 准备</h2><ol><li>你需要一台运行 Linux 或者 Unix 系列系统的计算机，并且你有其管理员权限</li><li>你需要有一个正常的网络连接</li><li>macOS 系统中请先安装 brew 包管理器</li></ol><p>本教程将以 macOS 为示例。</p><h2 id="0x01-安装-SVN"><a href="#0x01-安装-SVN" class="headerlink" title="0x01 安装 SVN"></a>0x01 安装 SVN</h2><ol><li>执行下述命令：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># CentOS</div><div class="line">sudo yum install svn</div><div class="line"># Ubuntu</div><div class="line">sudo apt-get install svn</div><div class="line"># macOS</div><div class="line">brew install svn</div></pre></td></tr></table></figure></li></ol><p>结果如下图：<br><img src="/images/setup_svn_server/01.png" alt="图1"></p><h2 id="0x02-建立-Repository"><a href="#0x02-建立-Repository" class="headerlink" title="0x02 建立 Repository"></a>0x02 建立 Repository</h2><p>执行下述命令：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 这条命令进入一个目录</div><div class="line">cd ~/testsvn/</div><div class="line"># 这条命令将会在当前目录下新建一个 Repository</div><div class="line">svnadmin create test</div></pre></td></tr></table></figure><p></p><p>结果如下图：<br><img src="/images/setup_svn_server/02.png" alt="图2"></p><h1 id="0x03-配置-Repository"><a href="#0x03-配置-Repository" class="headerlink" title="0x03 配置 Repository"></a>0x03 配置 Repository</h1><p>键入以下命令：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 修改 conf 路径下的 svnserve.conf 文件</div><div class="line">vi conf/svnserve.conf</div></pre></td></tr></table></figure><p></p><p>此时就通过 vi 打开你的<code>svnserve.conf</code>配置文件了，找到 [general] 块，你将会看到整个 general 都被注释掉了，<code>###</code> 的是介绍，<code>#</code>的是被注释掉的配置项，可以作为例子。</p><p>这里用中文翻译一下介绍吧：<br>|字段|解释|可选值|<br>|—|—|—|<br>|anon-access|控制未授权用户的权限|write、read、none|<br>|auth-access|控制已授权用户的权限|write、read、none|<br>|password-db|控制密码数据库的位置（以<code>/</code>开头为绝对路径，否则是相对路径）；<br>如果 SASL 被启用，这个文件将不会被使用。|passwd 代表默认数据库|<br>|authz-db|控制“基于路径的访问控制”数据库的位置；<br>指定的路径可能是一个与 repository 相对路径 URL <code>^/</code> 或者是一个绝对路径 URL <code>file://</code> 指向一个在 Subversion Repository 中的文本文件；<br>如果不指定，则不会有基于路径的访问控制。|authz 代表默认数据库|<br>|groups-db|控制“群组定义和每个群组的权限”文件的位置；<br>groups-db 文件和 authz-db 文件格式相同，并且groups-db应该包含一个[groups]块；<br>不过如果开启了这个选项，authzdb 文件中奖不能包含 [groups] 块。|<br>|realm|指定存储库的认证领域，他们应该有同一个密码数据库，反之亦然；<br>默认的 realm 是 repository 的 uuid|<br>|force-username-case|控制SVNServer在按照authz-db指定的规则比较用户名之前转换大小写。|upper、lower、none|<br>|hooks-env|指定一个路径到 hood script 环境配置文件，这个选项会覆盖 per-repository 的默认值，并且可以用来在单个文件中配置有多个 repositories 情况下的 hood script 环境|</p><p>介绍完以后，我们这样修改一下svnserve.conf：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[general]</div><div class="line">anon-access = none</div><div class="line">auth-access = write</div><div class="line">password-db = passwd</div><div class="line">authz-db = authz</div></pre></td></tr></table></figure><p></p><p>接下来修改 conf 下的 passwd 文件，添加两个用户名和密码，在[users] 块中加入以下内容：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root = root@Svnserver</div><div class="line">ysy = userysy</div></pre></td></tr></table></figure><p></p><p>然后修改 conf 下的 authz 文件：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[groups]</div><div class="line">admin = root # 注意这里的</div><div class="line">user = ysy</div><div class="line">[/]</div><div class="line">@admin = rw</div><div class="line">@user = r</div><div class="line">[test: /]</div><div class="line">@admin = rw</div><div class="line">@user = r</div></pre></td></tr></table></figure><p></p><p>这里首先定义了两个用户组，一个是 root，另一个是 user。</p><p>admin 中有 root 这个用户；user 中有 ysy 这个用户。然后分别给他们配置路径权限。</p><p>值得注意的是<code>[/]</code>指 testsvn 目录，而<code>[test: /]</code>指 test 目录。</p><p>基本的配置到这里已经完成，理论上我们可以启动我们的 SVN 服务器了。</p><p>但是为了安全起见，还有些事情可以做，比如说使用 <code>chown -R</code> / <code>chmod -R</code> 命令控制一下 svntest 目录的所有者和权限之类的，</p><h2 id="0x04-启动服务器"><a href="#0x04-启动服务器" class="headerlink" title="0x04 启动服务器"></a>0x04 启动服务器</h2><p>执行以下命令：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 注意：下面的 --log-file=不能使用`~`来指定当前用户的 home 目录</div><div class="line">sudo svnserve -d -r ~/testsvn --log-file=./log/svn.log</div></pre></td></tr></table></figure><p></p><p>SVN 默认使用的端口是3690，如果没冲突，这样 SVN 服务器就成功启动了。</p><p>可以用 less 命令查看上面命令指定的 log 文件，也可以像这样测试是否启动成功：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 1. 使用 ps 命令查看进程</div><div class="line">ps aux | grep svnserve</div><div class="line"># 2. 使用 Telnet 测试连接</div><div class="line">telnet localhost 3690</div><div class="line"># 3. 使用 svn 客户端测试连接</div></pre></td></tr></table></figure><p></p><h2 id="0x05-创建目录结构并导入到-SVN-Repository-中"><a href="#0x05-创建目录结构并导入到-SVN-Repository-中" class="headerlink" title="0x05 创建目录结构并导入到 SVN Repository 中"></a>0x05 创建目录结构并导入到 SVN Repository 中</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mkdir -p ~/tmp/svntmp/;</div><div class="line">cd ~/tmp/svntmp/;</div><div class="line">mkdir master dev ysy;</div><div class="line">cd ../../;</div><div class="line">svn import --username root -m &apos;init repo&apos; ~/tmp/svntmp/ svn://localhost/test</div></pre></td></tr></table></figure><p>输入用户名密码，大功告成！<br><img src="/images/setup_svn_server/03.png" alt="图3"></p><blockquote><p>如果有任何问题，可以通过 <code>--help</code> 参数来查看：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 查看 svn 的帮助信息</div><div class="line">svn --help</div><div class="line"># 查看 svn import 的帮助信息</div><div class="line">svn import --help</div></pre></td></tr></table></figure><p></p></blockquote><h2 id="0x06-最后推荐几款-GUI-的-SVN-客户端"><a href="#0x06-最后推荐几款-GUI-的-SVN-客户端" class="headerlink" title="0x06 最后推荐几款 GUI 的 SVN 客户端"></a>0x06 最后推荐几款 GUI 的 SVN 客户端</h2><ol><li>首先肯定是是跨平台的开源的 TortoiseSVN</li><li>如果在 macOS 下想有更好的体验，特别是在处理冲突或者合并源码的时候，强烈推荐 Cornerstone。</li></ol><blockquote><p>macOS 为了安全起见，默认是不允许运行苹果白名单以外签名的 app 的，运行则会报告此安装包已损坏。所以如果在 macOS 中需要运行未知来源的 app，需要输入以下命令解锁：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo xattr -rd com.apple.quarantine /Applications/theApplication.app</div></pre></td></tr></table></figure><p></p></blockquote><p>下图是 Cornerstone 的运行结果：<br><img src="/images/setup_svn_server/04.png" alt="图4"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SVN 全称：&lt;a href=&quot;https://subversion.apache.org&quot;&gt;Apache™ Subversion®&lt;/a&gt; ，是一个开源的 &lt;code&gt;Enterprise-class centralized version control for the masses&lt;/code&gt; 企业级中心化版本控制器。区分于 Git，它不是分布式的而是中心化的，在过去十年中也挺成功。但是在 Git 出现之后，它的光环就有点暗淡了。&lt;/p&gt;&lt;p&gt;好，闲话不多说，本教程将会教你如何搭建自己的 SVN 服务器&lt;/p&gt;
    
    </summary>
    
    
      <category term="Server" scheme="http://blog.superyoung.win/tags/Server/"/>
    
      <category term="Tutorial" scheme="http://blog.superyoung.win/tags/Tutorial/"/>
    
      <category term="Guide" scheme="http://blog.superyoung.win/tags/Guide/"/>
    
      <category term="服务器" scheme="http://blog.superyoung.win/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="教程" scheme="http://blog.superyoung.win/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="配置" scheme="http://blog.superyoung.win/tags/%E9%85%8D%E7%BD%AE/"/>
    
      <category term="SVN" scheme="http://blog.superyoung.win/tags/SVN/"/>
    
  </entry>
  
  <entry>
    <title>建立你自己的 Matlab 远程计算服务器</title>
    <link href="http://blog.superyoung.win/2017/03/02/matlab/setup_yourself_a_remote_matlab_computation_server/"/>
    <id>http://blog.superyoung.win/2017/03/02/matlab/setup_yourself_a_remote_matlab_computation_server/</id>
    <published>2017-03-02T01:44:40.000Z</published>
    <updated>2017-03-02T02:11:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>其实原理很简单，借助 ssh 服务和 Matlab 应用的二进制可执行文件即可。</p><a id="more"></a><h2 id="0x00-Requirement"><a href="#0x00-Requirement" class="headerlink" title="0x00 Requirement"></a>0x00 Requirement</h2><ol><li>你需要一台能够直接访问互联网的服务器或者个人电脑</li><li>这台电脑上必须安装有 Matlab 应用和 ssh 服务。</li></ol><h2 id="0x01-Add-Matlab-Binary-to-your-PATH"><a href="#0x01-Add-Matlab-Binary-to-your-PATH" class="headerlink" title="0x01 Add Matlab Binary to your PATH"></a>0x01 Add Matlab Binary to your PATH</h2><ol><li>找到你 Matlab 的安装路径，比如我这里是 <code>/Applications/MATLAB_R2016a.app</code></li><li>找到其中的 <code>bin</code> 文件夹，记录下其路劲，比如我的是 <code>/Applications/MATLAB_R2016a.app/bin</code></li><li><p>将路径加入系统环境变量的 <code>PATH</code> 中</p><ol><li><p>Unix 下可以编辑 <code>~/.bash_profile</code> 文件（自行替换为终端启动时加载的文件），加入以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># Setup Matlab2016a Environment</div><div class="line">export PATH=&quot;$PATH:/Applications/MATLAB_R2016a.app/bin&quot;</div><div class="line">alias matlab=&apos;matlab -nojvm -nodisplay -nosplash&apos;</div></pre></td></tr></table></figure><p>然后 <code>source ~/.bash_profile</code> 即可。</p></li><li>Windows 下请自行搜索关键字 <code>系统环境变量</code>，找到 PATH 变量并 <code>加入</code> 上面的路劲，用分号隔开不同路径。</li></ol></li></ol><h2 id="0x02-ALL-Done-login-to-your-ssh-server-and-run-matlab"><a href="#0x02-ALL-Done-login-to-your-ssh-server-and-run-matlab" class="headerlink" title="0x02 ALL Done, login to your ssh server and run matlab"></a>0x02 ALL Done, login to your ssh server and run <code>matlab</code></h2><p>完成了。登录你的 ssh 服务器即可远程使用 <code>matlab</code> 命令执行科学计算。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实原理很简单，借助 ssh 服务和 Matlab 应用的二进制可执行文件即可。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Server" scheme="http://blog.superyoung.win/tags/Server/"/>
    
      <category term="Matlab" scheme="http://blog.superyoung.win/tags/Matlab/"/>
    
      <category term="Science" scheme="http://blog.superyoung.win/tags/Science/"/>
    
      <category term="Computation" scheme="http://blog.superyoung.win/tags/Computation/"/>
    
  </entry>
  
  <entry>
    <title>搭建自己的 Git 服务器教程</title>
    <link href="http://blog.superyoung.win/2017/02/28/version_controller/setup_git_server/"/>
    <id>http://blog.superyoung.win/2017/02/28/version_controller/setup_git_server/</id>
    <published>2017-02-28T10:37:41.000Z</published>
    <updated>2017-03-03T15:01:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>本教程关于如何搭建自己的 Git 服务器，使用 Keynote 制作<br><a id="more"></a></p><p>废话不多说，教程在此：<a href="/images/set_up_git_server/index.html">传送门</a></p><p><img src="/images/setup_git_server/00.png" alt="图1"><br><img src="/images/setup_git_server/01.png" alt="图2"><br><img src="/images/setup_git_server/02.png" alt="图3"><br><img src="/images/setup_git_server/03.png" alt="图4"><br><img src="/images/setup_git_server/04.png" alt="图5"><br><img src="/images/setup_git_server/05.png" alt="图6"><br><img src="/images/setup_git_server/06.png" alt="图7"><br><img src="/images/setup_git_server/07.png" alt="图8"><br><img src="/images/setup_git_server/08.png" alt="图9"><br><img src="/images/setup_git_server/09.png" alt="图10"><br><img src="/images/setup_git_server/10.png" alt="图10"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本教程关于如何搭建自己的 Git 服务器，使用 Keynote 制作&lt;br&gt;
    
    </summary>
    
    
      <category term="Git" scheme="http://blog.superyoung.win/tags/Git/"/>
    
      <category term="Server" scheme="http://blog.superyoung.win/tags/Server/"/>
    
      <category term="Tutorial" scheme="http://blog.superyoung.win/tags/Tutorial/"/>
    
      <category term="Guide" scheme="http://blog.superyoung.win/tags/Guide/"/>
    
      <category term="服务器" scheme="http://blog.superyoung.win/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="教程" scheme="http://blog.superyoung.win/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="配置" scheme="http://blog.superyoung.win/tags/%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Ten Ways to Uniqify a List in Python</title>
    <link href="http://blog.superyoung.win/2017/02/22/learning_python/list_uniqify_and_benchmark/"/>
    <id>http://blog.superyoung.win/2017/02/22/learning_python/list_uniqify_and_benchmark/</id>
    <published>2017-02-22T08:25:41.000Z</published>
    <updated>2017-03-02T02:53:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>10 种方法让你的 python 数组中的元素保持唯一，并且探讨了其中最快的方法。<br><a id="more"></a><br><a href="https://www.peterbe.com/plog/uniqifiers-benchmark" target="_blank" rel="external">原贴在此</a></p><p>Suppose you have a list in python that looks like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'a'</span>]</div><div class="line"><span class="comment"># or like this:</span></div><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>]</div></pre></td></tr></table></figure><p>and you want to remove all duplicates so you get this result:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[<span class="string">'a'</span>,<span class="string">'b'</span>]</div><div class="line"><span class="comment"># or</span></div><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</div></pre></td></tr></table></figure><p>How do you do that? …the fastest way? I wrote a couple of alternative implementations and did a quick benchmark loop on the various implementations to find out which way was the fastest. (I haven’t looked at memory usage). The slowest function was 78 times slower than the fastest function.</p><p>However, there’s one very important difference between the various functions. Some are order preserving and some are not. For example, in an order preserving function, apart from the duplicates, the order is guaranteed to be the same as it was inputted. Eg, uniqify([1,2,2,3])==[1,2,3]</p><h2 id="Here-are-the-functions"><a href="#Here-are-the-functions" class="headerlink" title="Here are the functions:"></a>Here are the functions:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> random <span class="keyword">import</span> shuffle, randint</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">from</span> sets <span class="keyword">import</span> Set</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(seq)</span>:</span> <span class="comment"># Raymond Hettinger</span></div><div class="line">    <span class="comment"># not order preserving</span></div><div class="line">    set = &#123;&#125;</div><div class="line">    map(set.__setitem__, seq, [])</div><div class="line">    <span class="keyword">return</span> set.keys()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(seq)</span>:</span>   <span class="comment"># *********</span></div><div class="line">    <span class="comment"># order preserving</span></div><div class="line">    checked = []</div><div class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> seq:</div><div class="line">        <span class="keyword">if</span> e <span class="keyword">not</span> <span class="keyword">in</span> checked:</div><div class="line">            checked.append(e)</div><div class="line">    <span class="keyword">return</span> checked</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">(seq)</span>:</span></div><div class="line">    <span class="comment"># Not order preserving</span></div><div class="line">    keys = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> seq:</div><div class="line">        keys[e] = <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> keys.keys()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f4</span><span class="params">(seq)</span>:</span> <span class="comment"># ********** order preserving</span></div><div class="line">    noDupes = []</div><div class="line">    [noDupes.append(i) <span class="keyword">for</span> i <span class="keyword">in</span> seq <span class="keyword">if</span> <span class="keyword">not</span> noDupes.count(i)]</div><div class="line">    <span class="keyword">return</span> noDupes</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f5</span><span class="params">(seq, idfun=None)</span>:</span> <span class="comment"># Alex Martelli ******* order preserving</span></div><div class="line">    <span class="keyword">if</span> idfun <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">idfun</span><span class="params">(x)</span>:</span> <span class="keyword">return</span> x</div><div class="line">    seen = &#123;&#125;</div><div class="line">    result = []</div><div class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> seq:</div><div class="line">        marker = idfun(item)</div><div class="line">        <span class="comment"># in old Python versions:</span></div><div class="line">        <span class="comment"># if seen.has_key(marker)</span></div><div class="line">        <span class="comment"># but in new ones:</span></div><div class="line">        <span class="keyword">if</span> marker <span class="keyword">in</span> seen: <span class="keyword">continue</span></div><div class="line">        seen[marker] = <span class="number">1</span></div><div class="line">        result.append(item)</div><div class="line">    <span class="keyword">return</span> result</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f5b</span><span class="params">(seq, idfun=None)</span>:</span> <span class="comment"># Alex Martelli ******* order preserving</span></div><div class="line">    <span class="keyword">if</span> idfun <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">idfun</span><span class="params">(x)</span>:</span> <span class="keyword">return</span> x</div><div class="line">    seen = &#123;&#125;</div><div class="line">    result = []</div><div class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> seq:</div><div class="line">        marker = idfun(item)</div><div class="line">        <span class="comment"># in old Python versions:</span></div><div class="line">        <span class="comment"># if seen.has_key(marker)</span></div><div class="line">        <span class="comment"># but in new ones:</span></div><div class="line">        <span class="keyword">if</span> marker <span class="keyword">not</span> <span class="keyword">in</span> seen:</div><div class="line">            seen[marker] = <span class="number">1</span></div><div class="line">            result.append(item)</div><div class="line">            </div><div class="line">    <span class="keyword">return</span> result</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f6</span><span class="params">(seq)</span>:</span></div><div class="line">    <span class="comment"># Not order preserving</span></div><div class="line">    <span class="keyword">return</span> list(Set(seq))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f7</span><span class="params">(seq)</span>:</span></div><div class="line">    <span class="comment"># Not order preserving</span></div><div class="line">    <span class="keyword">return</span> list(set(seq))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f8</span><span class="params">(seq)</span>:</span> <span class="comment"># Dave Kirby</span></div><div class="line">    <span class="comment"># Order preserving</span></div><div class="line">    seen = set()</div><div class="line">    <span class="keyword">return</span> [x <span class="keyword">for</span> x <span class="keyword">in</span> seq <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> seen <span class="keyword">and</span> <span class="keyword">not</span> seen.add(x)]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f9</span><span class="params">(seq)</span>:</span></div><div class="line">    <span class="comment"># Not order preserving</span></div><div class="line">    <span class="keyword">return</span> &#123;&#125;.fromkeys(seq).keys()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f10</span><span class="params">(seq, idfun=None)</span>:</span> <span class="comment"># Andrew Dalke</span></div><div class="line">    <span class="comment"># Order preserving</span></div><div class="line">    <span class="keyword">return</span> list(_f10(seq, idfun))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_f10</span><span class="params">(seq, idfun=None)</span>:</span></div><div class="line">    seen = set()</div><div class="line">    <span class="keyword">if</span> idfun <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> seq:</div><div class="line">            <span class="keyword">if</span> x <span class="keyword">in</span> seen:</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            seen.add(x)</div><div class="line">            <span class="keyword">yield</span> x</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> seq:</div><div class="line">            x = idfun(x)</div><div class="line">            <span class="keyword">if</span> x <span class="keyword">in</span> seen:</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            seen.add(x)</div><div class="line">            <span class="keyword">yield</span> x</div><div class="line">            </div><div class="line">            </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f11</span><span class="params">(seq)</span>:</span> <span class="comment"># f10 but simpler</span></div><div class="line">    <span class="comment"># Order preserving</span></div><div class="line">    <span class="keyword">return</span> list(_f10(seq))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_f11</span><span class="params">(seq)</span>:</span></div><div class="line">    seen = set()</div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> seq:</div><div class="line">        <span class="keyword">if</span> x <span class="keyword">in</span> seen:</div><div class="line">            <span class="keyword">continue</span></div><div class="line">        seen.add(x)</div><div class="line">        <span class="keyword">yield</span> x</div></pre></td></tr></table></figure><p>And what you’ve all been waiting for (if you’re still reading). Here are the results:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">* f2 13.24</div><div class="line">* f4 11.73</div><div class="line">* f5 0.37</div><div class="line">f1 0.18</div><div class="line">f3 0.17</div><div class="line">f6 0.19</div><div class="line"></div><div class="line">(* order preserving)</div></pre></td></tr></table></figure><p>Clearly f5 is the “best” solution. Not only is it really really fast; it’s also order preserving and supports an optional transform function which makes it possible to do this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a=list(<span class="string">'ABeeE'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f5(a)</div><div class="line">[<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'e'</span>,<span class="string">'E'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f5(a, <span class="keyword">lambda</span> x: x.lower())</div><div class="line">[<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'e'</span>]</div></pre></td></tr></table></figure><p>Download the benchmark script here</p><h2 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h2><p>From the comments I’ve now added a couple of more functions to the benchmark. Some which don’t support uniqify a list of objects that can’t be hashed unless passed with a special hashing method. So see all the functions download the file</p><p>Here are the new results:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">* f5 10.1</div><div class="line">* f5b 9.99</div><div class="line">* f8 6.49</div><div class="line">* f10 6.57</div><div class="line">* f11 6.6</div><div class="line">f1 4.28</div><div class="line">f3 3.55</div><div class="line">f6 4.03</div><div class="line">f7 2.59</div><div class="line">f9 2.58</div></pre></td></tr></table></figure><p>So, we can draw a conclusion that f8 and f9 is the fastest way to uniqify a list<br>(f2 and f4) were too slow for this testdata.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;10 种方法让你的 python 数组中的元素保持唯一，并且探讨了其中最快的方法。&lt;br&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://blog.superyoung.win/tags/Python/"/>
    
      <category term="List" scheme="http://blog.superyoung.win/tags/List/"/>
    
  </entry>
  
  <entry>
    <title>Unit - Driver 介绍及示例</title>
    <link href="http://blog.superyoung.win/2017/02/14/learning_Rx/driver/"/>
    <id>http://blog.superyoung.win/2017/02/14/learning_Rx/driver/</id>
    <published>2017-02-14T08:16:48.000Z</published>
    <updated>2017-03-02T02:48:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>Driver 是 RxSwift 中的一个 Unit，专门设计用于控制界面操作——驱动界面。</p><a id="more"></a><h2 id="为什么这个-Unit-叫做-Driver？"><a href="#为什么这个-Unit-叫做-Driver？" class="headerlink" title="为什么这个 Unit 叫做 Driver？"></a>为什么这个 Unit 叫做 Driver？</h2><p>Driver 是为了：</p><ul><li>通过数据模型驱动 UI</li><li>通过另一个 UI 元素的改变来驱动 UI</li></ul><p>bindTo 也可以驱动 UI，但是 Driver 和 bindTo 不同，不同之处是以下三点：</p><ol><li>Driver 默认主线程执行，不需要每次通过 bindTo 手动控制线程</li><li>Driver 容易进行出错控制</li><li>Driver 默认 <code>shareReplay(1)</code><br>以上，让 Driver 控制 UI 事件更容易，而我们使用 Rx 主要也是对 UI 进行操作，所以 Driver 也属于 Rx 中比较重要的知识点。<br>具体的例子还是参考官方文档：<a href="https://github.com/ReactiveX/RxSwift/blob/master/Documentation/Units.md#driver" target="_blank" rel="external">点击这里</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Driver 是 RxSwift 中的一个 Unit，专门设计用于控制界面操作——驱动界面。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://blog.superyoung.win/tags/iOS/"/>
    
      <category term="Programming" scheme="http://blog.superyoung.win/tags/Programming/"/>
    
      <category term="Swift" scheme="http://blog.superyoung.win/tags/Swift/"/>
    
      <category term="RxSwift" scheme="http://blog.superyoung.win/tags/RxSwift/"/>
    
      <category term="Unit" scheme="http://blog.superyoung.win/tags/Unit/"/>
    
      <category term="Driver" scheme="http://blog.superyoung.win/tags/Driver/"/>
    
      <category term="响应式" scheme="http://blog.superyoung.win/tags/%E5%93%8D%E5%BA%94%E5%BC%8F/"/>
    
      <category term="开发" scheme="http://blog.superyoung.win/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>ReactiveX 中 Unit 的概念（RxSwift为例）</title>
    <link href="http://blog.superyoung.win/2017/02/14/learning_Rx/units-concept-in-rxswift/"/>
    <id>http://blog.superyoung.win/2017/02/14/learning_Rx/units-concept-in-rxswift/</id>
    <published>2017-02-14T08:11:40.000Z</published>
    <updated>2017-03-02T02:40:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>Unit 单元，从根本上来说，只是一个封装后的结构体。该结构体仅有一个指向可观察序列的只读属性。</p><a id="more"></a><p>本文翻译自<a href="https://github.com/ReactiveX/RxSwift/blob/master/Documentation/Units.md" target="_blank" rel="external">RxSwift 官方文档</a></p><p>观念性的东西请参考官方文档，这里就不重复了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Unit 单元，从根本上来说，只是一个封装后的结构体。该结构体仅有一个指向可观察序列的只读属性。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://blog.superyoung.win/tags/iOS/"/>
    
      <category term="Programming" scheme="http://blog.superyoung.win/tags/Programming/"/>
    
      <category term="Swift" scheme="http://blog.superyoung.win/tags/Swift/"/>
    
      <category term="RxSwift" scheme="http://blog.superyoung.win/tags/RxSwift/"/>
    
      <category term="Unit" scheme="http://blog.superyoung.win/tags/Unit/"/>
    
      <category term="Driver" scheme="http://blog.superyoung.win/tags/Driver/"/>
    
      <category term="响应式" scheme="http://blog.superyoung.win/tags/%E5%93%8D%E5%BA%94%E5%BC%8F/"/>
    
      <category term="开发" scheme="http://blog.superyoung.win/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Learning Enum, Structure and Class in Swift Programming Language</title>
    <link href="http://blog.superyoung.win/2017/02/12/learning_swift/enum_struct_class_in_swift/"/>
    <id>http://blog.superyoung.win/2017/02/12/learning_swift/enum_struct_class_in_swift/</id>
    <published>2017-02-12T09:50:36.000Z</published>
    <updated>2017-02-12T09:54:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章简要介绍了 Swift 语言中 <code>enum</code>，<code>struct</code>，<code>class</code> 之间的区别</p><p><em><a href="https://www.raywenderlich.com/119881/enums-structs-and-classes-in-swift" target="_blank" rel="external">原文链接：</a></em></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章简要介绍了 Swift 语言中 &lt;code&gt;enum&lt;/code&gt;，&lt;code&gt;struct&lt;/code&gt;，&lt;code&gt;class&lt;/code&gt; 之间的区别&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.raywenderlich.com/119881/enums-structs-and-classes-in-swift&quot;&gt;原文链接：&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Programming" scheme="http://blog.superyoung.win/tags/Programming/"/>
    
      <category term="Swift" scheme="http://blog.superyoung.win/tags/Swift/"/>
    
      <category term="Difference" scheme="http://blog.superyoung.win/tags/Difference/"/>
    
      <category term="Language" scheme="http://blog.superyoung.win/tags/Language/"/>
    
      <category term="Enum" scheme="http://blog.superyoung.win/tags/Enum/"/>
    
      <category term="Struct" scheme="http://blog.superyoung.win/tags/Struct/"/>
    
      <category term="Class" scheme="http://blog.superyoung.win/tags/Class/"/>
    
  </entry>
  
  <entry>
    <title>An Introduction to Map(), flatMap(), Reduce() and Filter() in Swift</title>
    <link href="http://blog.superyoung.win/2017/02/02/learning_swift/map_reduce_filter/"/>
    <id>http://blog.superyoung.win/2017/02/02/learning_swift/map_reduce_filter/</id>
    <published>2017-02-02T06:26:48.000Z</published>
    <updated>2017-02-03T05:56:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>我曾经很好奇 map(), flatMap(), reduce() 和 filter() 函数是用来做什么的，是怎么实现的。在我阅读了 Swift 源码还有一些文章以后，我觉得是时候分享一下了。</p><p>I have been wondering a long time about what the map() function, reduce() function and filter() function have done. After reading many passages and <a href="https://github.com/apple/swift/blob/master/stdlib/public/core/" target="_blank" rel="external">the source code of swift</a>, I think it is time to summerize what I have got. Besides, I hope this post can help someone who want to but not yet understand these function to understand them.</p><a id="more"></a><h2 id="Higher-order-function-高阶函数"><a href="#Higher-order-function-高阶函数" class="headerlink" title="Higher-order function 高阶函数"></a>Higher-order function 高阶函数</h2><p>首先来提一下高阶函数，在 Wikipedia 中是这样定义高阶函数的：</p><blockquote><p>高阶函数 Higher-order function<br>在数学和计算机科学，一个高阶函数是一个至少满足以下一个条件的函数：<br>In mathematics and computer science, a higher-order function (also functional, functional form or functor) is a function that does at least one of the following:</p><ul><li>接收一个或者多个函数作为参数 takes one or more functions as arguments (i.e., procedural parameters),</li><li>返回一个函数作为结果 returns a function as its result.</li></ul></blockquote><p>An example in Swift:<br></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">twice</span><span class="params">(<span class="number">_</span> f: @escaping <span class="params">(Int)</span></span></span> -&gt; <span class="type">Int</span>) -&gt; (<span class="type">Int</span>) -&gt; <span class="type">Int</span> </div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> &#123; f( f($<span class="number">0</span>) ) &#125; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(<span class="number">_</span> arg: Int)</span></span> -&gt; <span class="type">Int</span> &#123; </div><div class="line">    <span class="keyword">return</span> arg + <span class="number">3</span> </div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> g = twice(f)</div><div class="line"><span class="built_in">print</span>(g(<span class="number">7</span>)) <span class="comment">// 13</span></div></pre></td></tr></table></figure><p></p><p>The function signature in swift is ugly, so here is another example in Haskell:<br></p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="title">twice</span> :: (a -&gt; a) -&gt; (a -&gt; a)</div><div class="line"><span class="title">twice</span> f = f . f <span class="comment">-- 点号表示函数复合</span></div><div class="line"></div><div class="line"><span class="title">minus3</span> :: <span class="type">Num</span> a =&gt; a -&gt; a</div><div class="line"><span class="title">minus3</span> n = n + <span class="number">3</span></div><div class="line"></div><div class="line"><span class="title">main</span> :: <span class="type">IO</span> ()</div><div class="line"><span class="title">main</span> = print (twice minus3 <span class="number">7</span>) <span class="comment">-- 13</span></div></pre></td></tr></table></figure><p></p><p>And in JavaScript:<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> twice = <span class="function">(<span class="params">f, v</span>) =&gt;</span> f( f(v) );</div><div class="line"><span class="keyword">const</span> f = <span class="function"><span class="params">v</span> =&gt;</span> v + <span class="number">3</span>;</div><div class="line"><span class="built_in">console</span>.log( twice(f, <span class="number">7</span>) ); <span class="comment">// 13</span></div></pre></td></tr></table></figure><p></p><p>So, the function <code>twice</code> which take a function as a parameter is a Higher-order function.</p><p>而我们要讲的 map(), flatMap(), reduce() and filter() 都是高阶函数，因为他们都至少都接受一个函数（闭包）作为参数。</p><h2 id="这四个函数分别是做什么的？"><a href="#这四个函数分别是做什么的？" class="headerlink" title="这四个函数分别是做什么的？"></a>这四个函数分别是做什么的？</h2><p>首先简单讲讲 map() 和 flatMap() 以及他们之间的区别</p><ul><li><p><code>map</code> 可以理解成「映射」。就像数学中函数的映射一样。但是 map() 作为 <code>SequenceType</code> 类的实例方法，传入一个函数（闭包）作为参数，然后 <code>map()</code> 会把 <code>SequenceType</code> 的实例中的每一项都应用函数（闭包），然后返回一个新的实例。</p></li><li><p><code>flatMap()</code> 和 <code>map()</code> 功能差不多，但是 flatMap 有点复杂，它有两个重载函数。在第一个重载函数里， <code>flatMap()</code> 返回一个被压平了的结果序列（此时 map 将会返回一个嵌套序列）；而第二个重载函数里 <code>flatMap()</code> 的返回序列中没有 nil。具体区别可以在下面的源码中详细了解。</p></li><li><p><code>reduce(_ initialResult: _ nextPartialResult:(_ partialResult: Iterator.Element:))</code> 接受两个参数：</p><ol><li><code>initialResult</code> 接受的参数代表结果的初始值，</li><li><code>nextPartialResult(_ partialResult: Iterator.Element:)</code> 接受一个闭包，这个闭包将会被应用在该序列的所有元素上，这个闭包的参数<code>partialResult</code>代表已经计算了的部分结果，而<code>Iterator.Element</code>则是该序列对每个元素的迭代器。</li></ol><ul><li>简而言之，<code>reduce()</code>的作用是给该序列的每个元素应用传入的闭包，产生一个单一值的结果。具体实现可以看下面的源码，这里为了说明得更清晰，举一个使用 reduce 进行求和的栗子，两种写法。<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 方法1</span></div><div class="line"><span class="keyword">var</span> addResult = a.<span class="built_in">reduce</span>(<span class="number">0</span>, +)<span class="comment">// `+`在 Swift 里是一个函数，所以可以直接写</span></div><div class="line"><span class="comment">// 方法2</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">justAdd</span><span class="params">(l: Int, r: Int)</span></span> -&gt; <span class="type">Int</span>&#123;</div><div class="line">    <span class="keyword">return</span> l + r</div><div class="line">&#125;</div><div class="line">addResult = a.<span class="built_in">reduce</span>(<span class="number">0</span>, justAdd)</div><div class="line"><span class="comment">// 方法3</span></div><div class="line">addResult = a.<span class="built_in">reduce</span>(<span class="number">0</span>, &#123; (res:<span class="type">Int</span>, e:<span class="type">Int</span>) -&gt; <span class="type">Int</span> <span class="keyword">in</span></div><div class="line">    <span class="keyword">return</span> res + e</div><div class="line">&#125;)</div></pre></td></tr></table></figure></li></ul></li></ul><p>以上三种写法的结果完全一样。不过请尽量用第一二种写法，因为这两种写法可以在得到结果的同时增强代码的可读性。如果情况复杂，请多使用第二种写法，虽然略显繁琐，但是将逻辑细节封装起来的代码比较易懂，同时也可以增加可复用性。如果确定此方法只使用一次，而且需要处理的逻辑不太复杂，那么尽管使用第三种写法吧，快捷方便（虽然可读性可能略低，自行酌情处理）。</p><ul><li><code>filter(_ isIncluded:(Iterator.Element) -&gt; Bool) -&gt; [Iterator.Element]</code> 将序列中的每一个元素传入函数（闭包），如果闭包返回值为真，则增加到 filter 的返回序列中。</li></ul><h2 id="关于-throws-和-rethrows"><a href="#关于-throws-和-rethrows" class="headerlink" title="关于 throws 和 rethrows"></a>关于 <code>throws</code> 和 <code>rethrows</code></h2><p>关于 <code>throws</code> 和 <code>rethrows</code>， <a href="http://robnapier.net/re-throws" target="_blank" rel="external">这篇文章讲得挺清晰</a>。最近要没时间了，有空我再看看怎么翻译转载一下。<br>简单来说：所有声明了<code>throws</code>的函数都是需要写<code>try-catch</code>语句的，而有时候的函数调用不一定会<code>throws</code>，每次调用都写<code>try-catch</code>实在太麻烦了。有一个临时的解决办法就是「重载」对应的方法，一个函数签名有<code>throws</code>一个没有<code>throws</code>，但是这样还是太麻烦，而且两个不同签名的函数做的事情居然是一模一样的，非常不方便后期维护。<br>最后Swift 开发小组说要优雅，于是就有了<code>rethrows</code>。函数签名中有<code>rethrows</code>的函数，可以<code>try-catch</code>语句也可以不写 try-catch 语句。<code>rethrows</code>就是为了解决这种问题而存在的。所以某种角度上来说，也可以把<code>rethrows</code>当做<code>throws</code>的语法糖吧。<br>It is clear explained in <a href="http://robnapier.net/re-throws" target="_blank" rel="external">this passage</a> about key words <code>throws</code> and <code>rethrows</code> in the source code.</p><blockquote><p>其实以上讲的，都来自<a href="https://github.com/apple/swift/blob/master/" target="_blank" rel="external"><code>这里</code></a> 欢迎大家前去 clone 下来研究。Swift3 有些函数的效率还能优化，如果你发现了优化点，千万不要吝惜于提交 issue ;&gt;<br><a href="https://github.com/apple/swift/blob/master/" target="_blank" rel="external"><code>here</code></a>. You are welcome to clone and studying with it.<br>Some functions in the lib are still not yet been optimized, and if you find any problem please don’t begrudge submitting a issue ;&gt;</p></blockquote><p>源码就不翻译了哈，再翻译就成易语言了 😑</p><h2 id="Talk-is-cheap-show-me-the-code"><a href="#Talk-is-cheap-show-me-the-code" class="headerlink" title="Talk is cheap, show me the code"></a>Talk is cheap, show me the code</h2><p>Let’s now go deeper:<br>You can find the source code of Sequence Type <code>map()</code> function <a href="https://github.com/apple/swift/blob/master/stdlib/public/core/Collection.swift" target="_blank" rel="external">here</a>. Here I quote it like:<br></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// Returns an array containing the results of mapping the given closure</span></div><div class="line"><span class="comment">/// over the sequence's elements.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// In this example, `map` is used first to convert the names in the array</span></div><div class="line"><span class="comment">/// to lowercase strings and then to count their characters.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">///     let cast = ["Vivien", "Marlon", "Kim", "Karl"]</span></div><div class="line"><span class="comment">///     let lowercaseNames = cast.map &#123; $0.lowercaseString &#125;</span></div><div class="line"><span class="comment">///     // 'lowercaseNames' == ["vivien", "marlon", "kim", "karl"]</span></div><div class="line"><span class="comment">///     let letterCounts = cast.map &#123; $0.characters.count &#125;</span></div><div class="line"><span class="comment">///     // 'letterCounts' == [6, 6, 3, 4]</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// - Parameter transform: A mapping closure. `transform` accepts an</span></div><div class="line"><span class="comment">///   element of this sequence as its parameter and returns a transformed</span></div><div class="line"><span class="comment">///   value of the same or of a different type.</span></div><div class="line"><span class="comment">/// - Returns: An array containing the transformed elements of this sequence. </span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">map</span>&lt;T&gt;<span class="params">(<span class="number">_</span> transform: <span class="params">(Iterator.Element)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">T</span>) <span class="keyword">rethrows</span> -&gt; [<span class="type">T</span>] &#123;</div><div class="line">    <span class="comment">// <span class="doctag">TODO:</span> swift-3-indexing-model - review the following</span></div><div class="line">    <span class="keyword">let</span> <span class="built_in">count</span>: <span class="type">Int</span> = <span class="built_in">numericCast</span>(<span class="keyword">self</span>.<span class="built_in">count</span>)</div><div class="line">    <span class="keyword">if</span> <span class="built_in">count</span> == <span class="number">0</span> &#123;</div><div class="line">        <span class="keyword">return</span> []</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> result = <span class="type">ContiguousArray</span>&lt;<span class="type">T</span>&gt;()</div><div class="line">    result.reserveCapacity(<span class="built_in">count</span>)</div><div class="line">    <span class="keyword">var</span> i = <span class="keyword">self</span>.startIndex</div><div class="line">    <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="built_in">count</span> &#123;</div><div class="line">        result.append(<span class="keyword">try</span> transform(<span class="keyword">self</span>[i]))</div><div class="line">        formIndex(after: &amp;i)</div><div class="line">    &#125;</div><div class="line">    _expectEnd(of: <span class="keyword">self</span>, <span class="keyword">is</span>: i)</div><div class="line">    <span class="keyword">return</span> <span class="type">Array</span>(result)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>And Optional Type <code>map()</code> <a href="https://github.com/apple/swift/blob/master/stdlib/public/core/Optional.swift" target="_blank" rel="external">here</a><br></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// Evaluates the given closure when this `Optional` instance is not `nil`,</span></div><div class="line"><span class="comment">/// passing the unwrapped value as a parameter.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// Use the `map` method with a closure that returns a nonoptional value.</span></div><div class="line"><span class="comment">/// This example performs an arithmetic operation on an</span></div><div class="line"><span class="comment">/// optional integer.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">///     let possibleNumber: Int? = Int("42")</span></div><div class="line"><span class="comment">///     let possibleSquare = possibleNumber.map &#123; $0 * $0 &#125;</span></div><div class="line"><span class="comment">///     print(possibleSquare)</span></div><div class="line"><span class="comment">///     // Prints "Optional(1746)"</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">///     let noNumber: Int? = nil</span></div><div class="line"><span class="comment">///     let noSquare = noNumber.map &#123; $0 * $0 &#125;</span></div><div class="line"><span class="comment">///     print(noSquare)</span></div><div class="line"><span class="comment">///     // Prints "nil"</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// - Parameter transform: A closure that takes the unwrapped value</span></div><div class="line"><span class="comment">///   of the instance.</span></div><div class="line"><span class="comment">/// - Returns: The result of the given closure. If this instance is `nil`,</span></div><div class="line"><span class="comment">///   returns `nil`.</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">map</span>&lt;U&gt;<span class="params">(</span></span></div><div class="line">    <span class="number">_</span> transform: <span class="params">(Wrapped)</span> <span class="keyword">throws</span> -&gt; <span class="type">U</span></div><div class="line">    ) <span class="keyword">rethrows</span> -&gt; <span class="type">U</span>? &#123;</div><div class="line">    <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</div><div class="line">    <span class="keyword">case</span> .some(<span class="keyword">let</span> y):</div><div class="line">        <span class="keyword">return</span> .some(<span class="keyword">try</span> transform(y))</div><div class="line">    <span class="keyword">case</span> .<span class="keyword">none</span>:</div><div class="line">        <span class="keyword">return</span> .<span class="keyword">none</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>Then here comes the <code>flatMap()</code> function. You can find the source code of Sequence Type <code>flatMap()</code> function <a href="https://github.com/apple/swift/blob/master/stdlib/public/core/SequenceAlgorithms.swift.gyb" target="_blank" rel="external">here</a>.<br>And I quote it like:<br></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// Returns an array containing the concatenated results of calling the</span></div><div class="line"><span class="comment">/// given transformation with each element of this sequence.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// Use this method to receive a single-level collection when your</span></div><div class="line"><span class="comment">/// transformation produces a sequence or collection for each element.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// In this example, note the difference in the result of using `map` and</span></div><div class="line"><span class="comment">/// `flatMap` with a transformation that returns an array.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">///     let numbers = [1, 2, 3, 4]</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">///     let mapped = numbers.map &#123; Array(count: $0, repeatedValue: $0) &#125;</span></div><div class="line"><span class="comment">///     // [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4]]</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">///     let flatMapped = numbers.flatMap &#123; Array(count: $0, repeatedValue: $0) &#125;</span></div><div class="line"><span class="comment">///     // [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// In fact, `s.flatMap(transform)`  is equivalent to</span></div><div class="line"><span class="comment">/// `Array(s.map(transform).joined())`.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// - Parameter transform: A closure that accepts an element of this</span></div><div class="line"><span class="comment">///   sequence as its argument and returns a sequence or collection.</span></div><div class="line"><span class="comment">/// - Returns: The resulting flattened array.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// - Complexity: O(*m* + *n*), where *m* is the length of this sequence</span></div><div class="line"><span class="comment">///   and *n* is the length of the result.</span></div><div class="line"><span class="comment">/// - SeeAlso: `joined()`, `map(_:)`</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">flatMap</span>&lt;SegmentOfResult : Sequence&gt;<span class="params">(<span class="number">_</span> transform: <span class="params">(Iterator.Element)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">SegmentOfResult</span>) <span class="keyword">rethrows</span> -&gt; [<span class="type">SegmentOfResult</span>.<span class="type">Iterator</span>.<span class="type">Element</span>] &#123;</div><div class="line">        <span class="keyword">var</span> result: [<span class="type">SegmentOfResult</span>.<span class="type">Iterator</span>.<span class="type">Element</span>] = []</div><div class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> <span class="keyword">self</span> &#123;</div><div class="line">            result.append(contentsOf: <span class="keyword">try</span> transform(element))</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/// Returns an array containing the non-`nil` results of calling the given</span></div><div class="line"><span class="comment">/// transformation with each element of this sequence.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// Use this method to receive an array of nonoptional values when your</span></div><div class="line"><span class="comment">/// transformation produces an optional value.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// In this example, note the difference in the result of using `map` and</span></div><div class="line"><span class="comment">/// `flatMap` with a transformation that returns an optional `Int` value.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">///     let possibleNumbers = ["1", "2", "three", "///4///", "5"]</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">///     let mapped: [Int?] = possibleNumbers.map &#123; str in Int(str) &#125;</span></div><div class="line"><span class="comment">///     // [1, 2, nil, nil, 5]</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">///     let flatMapped: [Int] = possibleNumbers.flatMap &#123; str in Int(str) &#125;</span></div><div class="line"><span class="comment">///     // [1, 2, 5]</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// - Parameter transform: A closure that accepts an element of this</span></div><div class="line"><span class="comment">///   sequence as its argument and returns an optional value.</span></div><div class="line"><span class="comment">/// - Returns: An array of the non-`nil` results of calling `transform`</span></div><div class="line"><span class="comment">///   with each element of the sequence.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// - Complexity: O(*m* + *n*), where *m* is the length of this sequence</span></div><div class="line"><span class="comment">///   and *n* is the length of the result.</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">flatMap</span>&lt;ElementOfResult&gt;<span class="params">(<span class="number">_</span> transform: <span class="params">(Iterator.Element)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">ElementOfResult</span>?) <span class="keyword">rethrows</span> -&gt; [<span class="type">ElementOfResult</span>] &#123;</div><div class="line">    <span class="keyword">var</span> result: [<span class="type">ElementOfResult</span>] = []</div><div class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> <span class="keyword">self</span> &#123;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> newElement = <span class="keyword">try</span> transform(element) &#123;</div><div class="line">            result.append(newElement)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>And the Optional Type <code>flatMap()</code> <a href="https://github.com/apple/swift/blob/master/stdlib/public/core/Optional.swift" target="_blank" rel="external">here</a><br></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// Evaluates the given closure when this `Optional` instance is not `nil`,</span></div><div class="line"><span class="comment">/// passing the unwrapped value as a parameter.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// Use the `flatMap` method with a closure that returns an optional value.</span></div><div class="line"><span class="comment">/// This example performs an arithmetic operation with an optional result on</span></div><div class="line"><span class="comment">/// an optional integer.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">///     let possibleNumber: Int? = Int("42")</span></div><div class="line"><span class="comment">///     let nonOverflowingSquare = possibleNumber.flatMap &#123; x -&gt; Int? in</span></div><div class="line"><span class="comment">///         let (result, overflowed) = Int.multiplyWithOverflow(x, x)</span></div><div class="line"><span class="comment">///         return overflowed ? nil : result</span></div><div class="line"><span class="comment">///     &#125;</span></div><div class="line"><span class="comment">///     print(nonOverflowingSquare)</span></div><div class="line"><span class="comment">///     // Prints "Optional(1746)"</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// - Parameter transform: A closure that takes the unwrapped value</span></div><div class="line"><span class="comment">///   of the instance.</span></div><div class="line"><span class="comment">/// - Returns: The result of the given closure. If this instance is `nil`,</span></div><div class="line"><span class="comment">///   returns `nil`.</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">flatMap</span>&lt;U&gt;<span class="params">(</span></span></div><div class="line">    <span class="number">_</span> transform: <span class="params">(Wrapped)</span> <span class="keyword">throws</span> -&gt; <span class="type">U</span>?</div><div class="line">    ) <span class="keyword">rethrows</span> -&gt; <span class="type">U</span>? &#123;</div><div class="line">    <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</div><div class="line">    <span class="keyword">case</span> .some(<span class="keyword">let</span> y):</div><div class="line">        <span class="keyword">return</span> <span class="keyword">try</span> transform(y)</div><div class="line">    <span class="keyword">case</span> .<span class="keyword">none</span>:</div><div class="line">        <span class="keyword">return</span> .<span class="keyword">none</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>And you can find the source code of <code>reduce()</code> function <a href="https://github.com/apple/swift/blob/d6033995f6485fe3bf979ae9a04287fc3ecbc512/stdlib/public/core/SequenceAlgorithms.swift.gyb" target="_blank" rel="external">here</a>,<br>quote like:<br></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// Returns the result of combining the elements of the sequence using the</span></div><div class="line"><span class="comment">/// given closure.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// Use the `reduce(_:_:)` method to produce a single value from the elements</span></div><div class="line"><span class="comment">/// of an entire sequence. For example, you can use this method on an array</span></div><div class="line"><span class="comment">/// of numbers to find their sum or product.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// The `nextPartialResult` closure is called sequentially with an</span></div><div class="line"><span class="comment">/// accumulating value initialized to `initialResult` and each element of</span></div><div class="line"><span class="comment">/// the sequence. This example shows how to find the sum of an array of</span></div><div class="line"><span class="comment">/// numbers.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">///     let numbers = [1, 2, 3, 4]</span></div><div class="line"><span class="comment">///     let numberSum = numbers.reduce(0, &#123; x, y in</span></div><div class="line"><span class="comment">///         x + y</span></div><div class="line"><span class="comment">///     &#125;)</span></div><div class="line"><span class="comment">///     // numberSum == 10</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// When `numbers.reduce(_:_:)` is called, the following steps occur:</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// 1. The `nextPartialResult` closure is called with `initialResult`---`0`</span></div><div class="line"><span class="comment">///    in this case---and the first element of `numbers`, returning the sum:</span></div><div class="line"><span class="comment">///    `1`.</span></div><div class="line"><span class="comment">/// 2. The closure is called again repeatedly with the previous call's return</span></div><div class="line"><span class="comment">///    value and each element of the sequence.</span></div><div class="line"><span class="comment">/// 3. When the sequence is exhausted, the last value returned from the</span></div><div class="line"><span class="comment">///    closure is returned to the caller.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// If the sequence has no elements, `nextPartialResult` is never executed</span></div><div class="line"><span class="comment">/// and `initialResult` is the result of the call to `reduce(_:_:)`.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// - Parameters:</span></div><div class="line"><span class="comment">///   - initialResult: The value to use as the initial accumulating value.</span></div><div class="line"><span class="comment">///     `initialResult` is passed to `nextPartialResult` the first time the</span></div><div class="line"><span class="comment">///     closure is executed.</span></div><div class="line"><span class="comment">///   - nextPartialResult: A closure that combines an accumulating value and</span></div><div class="line"><span class="comment">///     an element of the sequence into a new accumulating value, to be used</span></div><div class="line"><span class="comment">///     in the next call of the `nextPartialResult` closure or returned to</span></div><div class="line"><span class="comment">///     the caller.</span></div><div class="line"><span class="comment">/// - Returns: The final accumulated value. If the sequence has no elements,</span></div><div class="line"><span class="comment">///   the result is `initialResult`.</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">reduce</span>&lt;Result&gt;<span class="params">(<span class="number">_</span> initialResult: Result, <span class="number">_</span> nextPartialResult:</span></span></div><div class="line">    <span class="params">(<span class="number">_</span> partialResult: Result, Iterator.Element)</span> <span class="keyword">throws</span> -&gt; <span class="type">Result</span>)</div><div class="line">    <span class="keyword">rethrows</span> -&gt; <span class="type">Result</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> accumulator = initialResult</div><div class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> <span class="keyword">self</span> &#123;</div><div class="line">        accumulator = <span class="keyword">try</span> nextPartialResult(accumulator, element)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> accumulator</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>And the <code>filter()</code> function in <a href="https://github.com/apple/swift/blob/master/stdlib/public/core/Sequence.swift" target="_blank" rel="external">here</a><br></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// Returns an array containing, in order, the elements of the sequence</span></div><div class="line"><span class="comment">/// that satisfy the given predicate.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// In this example, `filter` is used to include only names shorter than</span></div><div class="line"><span class="comment">/// five characters.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">///     let cast = ["Vivien", "Marlon", "Kim", "Karl"]</span></div><div class="line"><span class="comment">///     let shortNames = cast.filter &#123; $0.characters.count &lt; 5 &#125;</span></div><div class="line"><span class="comment">///     print(shortNames)</span></div><div class="line"><span class="comment">///     // Prints "["Kim", "Karl"]"</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// - Parameter isIncluded: A closure that takes an element of the</span></div><div class="line"><span class="comment">///   sequence as its argument and returns a Boolean value indicating</span></div><div class="line"><span class="comment">///   whether the element should be included in the returned array.</span></div><div class="line"><span class="comment">/// - Returns: An array of the elements that `includeElement` allowed.</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">filter</span><span class="params">(<span class="number">_</span> isIncluded: <span class="params">(Iterator.Element)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">Bool</span>) <span class="keyword">rethrows</span> -&gt; [<span class="type">Iterator</span>.<span class="type">Element</span>] &#123;</div><div class="line">    <span class="keyword">var</span> result = <span class="type">ContiguousArray</span>&lt;<span class="type">Iterator</span>.<span class="type">Element</span>&gt;()</div><div class="line">    <span class="keyword">var</span> iterator = <span class="keyword">self</span>.makeIterator()</div><div class="line">    <span class="keyword">while</span> <span class="keyword">let</span> element = iterator.next() &#123;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">try</span> isIncluded(element) &#123;</div><div class="line">            result.append(element)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="type">Array</span>(result)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我曾经很好奇 map(), flatMap(), reduce() 和 filter() 函数是用来做什么的，是怎么实现的。在我阅读了 Swift 源码还有一些文章以后，我觉得是时候分享一下了。&lt;/p&gt;&lt;p&gt;I have been wondering a long time about what the map() function, reduce() function and filter() function have done. After reading many passages and &lt;a href=&quot;https://github.com/apple/swift/blob/master/stdlib/public/core/&quot;&gt;the source code of swift&lt;/a&gt;, I think it is time to summerize what I have got. Besides, I hope this post can help someone who want to but not yet understand these function to understand them.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Programming" scheme="http://blog.superyoung.win/tags/Programming/"/>
    
      <category term="Swift" scheme="http://blog.superyoung.win/tags/Swift/"/>
    
      <category term="Language" scheme="http://blog.superyoung.win/tags/Language/"/>
    
      <category term="map" scheme="http://blog.superyoung.win/tags/map/"/>
    
      <category term="reduce" scheme="http://blog.superyoung.win/tags/reduce/"/>
    
      <category term="filter" scheme="http://blog.superyoung.win/tags/filter/"/>
    
  </entry>
  
  <entry>
    <title>LLDB Tutorial</title>
    <link href="http://blog.superyoung.win/2017/01/31/learning_swift/LLDB_Usage/"/>
    <id>http://blog.superyoung.win/2017/01/31/learning_swift/LLDB_Usage/</id>
    <published>2017-01-31T12:02:09.000Z</published>
    <updated>2017-01-31T14:07:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>According to <a href="https://lldb.llvm.org" target="_blank" rel="external">The LLDB Debuger</a>:</p><blockquote><p>LLDB is a next generation, high-performance debugger. It is built as a set of reusable components which highly leverage existing libraries in the larger LLVM Project, such as the Clang expression parser and LLVM disassembler.<br>LLDB is the default debugger in Xcode on Mac OS X and supports debugging C, Objective-C and C++ on the desktop and iOS devices and simulator.</p></blockquote><p>So, we can assume LLDB a the advanced version of the gdb debuger. And it’s almost backword compatible.<br><a id="more"></a></p><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>First of all, you will need a compiler, such as <code>gnu g++</code> <code>visual c++</code> <code>clang</code> and so forth.</p><p>Particularly, if you are a macOS user, just download Xcode from App Store and install <code>Xcode command line tools</code> from Xcode’s menu and everything will be ok.</p><p>If you are using Linux, please download <a href="http://apt.llvm.org" target="_blank" rel="external">LLVM Debian/Ubuntu nightly packages</a></p><blockquote><p>The packages provide <code>LLVM</code> + <code>Clang</code> + <code>compiler-rt</code> + <code>polly</code> + <code>LLDB</code> + <code>LLD</code></p></blockquote><h2 id="Basic-usage"><a href="#Basic-usage" class="headerlink" title="Basic usage"></a>Basic usage</h2><p>After you installed, you can use lldb to debug a binary file that compiled with <code>g++ -g</code> or <code>clang -g</code> like this:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">## compile with:</div><div class="line">    g++ a.cpp -o a -g --std=c++11;</div><div class="line">## debug with:</div><div class="line">    lldb a</div></pre></td></tr></table></figure><p></p><p>After start debugging, you can do:</p><ul><li>Set breakpoint with <code>b (line number)</code></li><li>Run program with command <code>r</code></li><li>Source level single step in the currently selected thread <code>step</code> or <code>s</code></li><li>Source level single step over in the currently selected thread <code>next</code> or <code>n</code></li><li>Set a breakpoint at all functions named main <code>breakpoint set --name main</code> or <code>b main</code></li><li>Set a breakpoint in file test.c at line 12 <code>break test.c:12</code> or <code>b test.c:12</code></li><li>List all breakpoints <code>breakpoint list</code> or <code>br l</code></li><li>Delete a breakpoint <code>breakpoint delete 1</code> or <code>br del 1</code></li><li>Print expr <code>p (obj name)</code></li><li>Print the ObjC “description” of an object <code>po (obj name)</code></li><li>Print local variable and its address <code>fr v -R (obj name)</code></li><li>Quit <code>quit</code> or <code>q</code></li></ul><blockquote><p>The difference (as I understand it) is that frame variable is only for printing the contents of variables, whereas print is a shortcut for expression – and can evaluate arbitrary C and Objective-C expressions.<br>To summarize: <code>frame variable</code> is for variables and <code>print</code> (or expr) is for expressions. In the case of one variable they both work equally well. via <a href="http://stackoverflow.com/questions/17656071/lldb-command-fr-v-var-vs-p-var" target="_blank" rel="external">Martin R stackOverFlow</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;According to &lt;a href=&quot;https://lldb.llvm.org&quot;&gt;The LLDB Debuger&lt;/a&gt;:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;LLDB is a next generation, high-performance debugger. It is built as a set of reusable components which highly leverage existing libraries in the larger LLVM Project, such as the Clang expression parser and LLVM disassembler.&lt;br&gt;LLDB is the default debugger in Xcode on Mac OS X and supports debugging C, Objective-C and C++ on the desktop and iOS devices and simulator.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;So, we can assume LLDB a the advanced version of the gdb debuger. And it’s almost backword compatible.&lt;br&gt;
    
    </summary>
    
    
      <category term="LLDB" scheme="http://blog.superyoung.win/tags/LLDB/"/>
    
      <category term="GDB" scheme="http://blog.superyoung.win/tags/GDB/"/>
    
      <category term="Debug" scheme="http://blog.superyoung.win/tags/Debug/"/>
    
  </entry>
  
  <entry>
    <title>Autoclosure and Lazy Evaluation</title>
    <link href="http://blog.superyoung.win/2017/01/29/learning_swift/autoclosure/"/>
    <id>http://blog.superyoung.win/2017/01/29/learning_swift/autoclosure/</id>
    <published>2017-01-29T12:18:31.000Z</published>
    <updated>2017-02-04T08:07:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>A note about how to use <code>@autoclosure</code> in Swift programming language</p><a id="more"></a><h2 id="A-short-explain-to-autoclosure"><a href="#A-short-explain-to-autoclosure" class="headerlink" title="A short explain to @autoclosure"></a>A short explain to <code>@autoclosure</code></h2><p>What <code>@autoclosure</code> have done is to wrap a expressionn to a closure.</p><h2 id="for-example"><a href="#for-example" class="headerlink" title="for example"></a>for example</h2><p>We define a function as below:<br></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">printIfTrue</span><span class="params">(<span class="number">_</span> clo: <span class="params">()</span></span></span>-&gt;<span class="type">Bool</span> )&#123;</div><div class="line">    <span class="built_in">print</span>(clo())</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>We can call the function like this:<br></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">printIfTrue( &#123; <span class="keyword">return</span> <span class="number">2</span>&gt;<span class="number">1</span> &#125; )</div></pre></td></tr></table></figure><p></p><p>OR like this:<br></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">printIfTrue&#123; <span class="keyword">return</span> <span class="number">2</span>&gt;<span class="number">1</span> &#125;</div></pre></td></tr></table></figure><p></p><p>OR even ignore the key word <code>return</code>:<br></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">printIfTrue&#123; <span class="number">2</span>&gt;<span class="number">1</span> &#125;</div></pre></td></tr></table></figure><p></p><p>But if you want a clearer syntax like:<br></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">printIfTrue( <span class="number">2</span>&gt;<span class="number">1</span> )</div></pre></td></tr></table></figure><p></p><p>Then you must use <code>@autoclosure</code>, like:<br></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">printIfTrue</span><span class="params">(<span class="number">_</span> clo: @autoclosure <span class="params">()</span></span></span>-&gt;<span class="type">Bool</span>)&#123;</div><div class="line">    <span class="built_in">print</span>(clo())</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>Is these all it can do? Well, Yes, and No. What it can do depends on you, just go on and have a look:</p><h2 id="Lazy-evaluation"><a href="#Lazy-evaluation" class="headerlink" title="Lazy evaluation"></a>Lazy evaluation</h2><p>Let’s define two similar function and try to compare their speed:<br>The first function:<br></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">logicalAnd</span><span class="params">(<span class="number">_</span> <span class="keyword">left</span>: @autoclosure <span class="params">()</span></span></span> -&gt; <span class="type">Bool</span>, <span class="number">_</span> <span class="keyword">right</span>: <span class="meta">@autoclosure</span> () -&gt; <span class="type">Bool</span>) -&gt; <span class="type">Bool</span>&#123;</div><div class="line">    <span class="keyword">if</span> <span class="keyword">left</span>()&#123;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">right</span>()&#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>The second function:<br></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">logicalAnd</span><span class="params">(<span class="number">_</span> <span class="keyword">left</span>: Bool, <span class="number">_</span> <span class="keyword">right</span>: Bool)</span></span> -&gt; <span class="type">Bool</span>&#123;</div><div class="line">    <span class="keyword">if</span> <span class="keyword">left</span>&#123;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">right</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>It’s same to call these two functions:<br></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">logicalAnd(<span class="literal">true</span>, <span class="literal">true</span>)      <span class="comment">//return true</span></div><div class="line">logicalAnd(<span class="number">2</span>&gt;<span class="number">1</span>, <span class="number">2</span>&gt;<span class="number">1</span>)        <span class="comment">//return true</span></div></pre></td></tr></table></figure><p></p><p>You might have noticed that the difference between them is only the type of parameter.</p><p>And because of that, the first function is faster than the second one.</p><p>The first function can do <code>lazy evaluation</code> to the right parameter, and if the parameter needs long time calculation, its advantage will show.</p><p>While the second one? It must determine the parameter before the function is called, in other way, it cannot do <code>lazy evaluation</code> and will cost longer time.</p><p>So that is what most interesting thing of <code>@autoclosure</code>.</p><p>And the operator <code>??</code>, <code>&amp;&amp;</code>, <code>||</code> in standard lib of Swift is also do the same.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;A note about how to use &lt;code&gt;@autoclosure&lt;/code&gt; in Swift programming language&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://blog.superyoung.win/tags/iOS/"/>
    
      <category term="Programming" scheme="http://blog.superyoung.win/tags/Programming/"/>
    
      <category term="Swift" scheme="http://blog.superyoung.win/tags/Swift/"/>
    
      <category term="autoclosure" scheme="http://blog.superyoung.win/tags/autoclosure/"/>
    
      <category term="lazy evaluation" scheme="http://blog.superyoung.win/tags/lazy-evaluation/"/>
    
  </entry>
  
  <entry>
    <title>ARC Rules</title>
    <link href="http://blog.superyoung.win/2017/01/29/learning_iOS/ARC_Rules/"/>
    <id>http://blog.superyoung.win/2017/01/29/learning_iOS/ARC_Rules/</id>
    <published>2017-01-29T02:19:41.000Z</published>
    <updated>2017-01-29T03:30:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>A note for book <a href="http://www.apress.com/us/book/9781430241164" target="_blank" rel="external">Pro Multithreading and Memory Management for iOS and OS X</a><br>ARC is summarized in Apple’s own words:</p><blockquote><p>ARC in Objective-C makes memory management the job of the compiler. By enabling ARC with the new Apple LLVM compiler, you will never need to type retain or release again, dramatically simplifying the development process, while reducing craches and memory leaks. The compiler has a complete understanding of your objects, and releases each object the instant it is no longer used, so apps run as fast as ever, with predictable, smooth performance.</p></blockquote><a id="more"></a><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>Actually, reference counting is still used as the basis of ARC. But ARC helps the reference counting mechanism work automatically when you follow its rules.</p><h2 id="The-rules-of-Reference-Counting"><a href="#The-rules-of-Reference-Counting" class="headerlink" title="The rules of Reference Counting"></a>The rules of Reference Counting</h2><ul><li>You have ownership of any objects you create.</li><li>You can take ownership of an object using retain.</li><li>When you no longer need it, you must relinquish ownership of an object of which you have ownership.</li><li>You must not relinquish ownership of an object of which you don’t have ownership.</li></ul><h2 id="Newly-introduced-for-ARC-Ownership-Qualifier"><a href="#Newly-introduced-for-ARC-Ownership-Qualifier" class="headerlink" title="Newly introduced for ARC: Ownership Qualifier"></a>Newly introduced for ARC: Ownership Qualifier</h2><p>In Objective-C, ‘id’ or each object type is used for object variable types.</p><p>Object types are pointer types of Objective-C classes, such as NSObject <em>.’id’ type is used to hide its class name. ‘id’ is equivalent to void</em> in the C language.</p><p>With ARC, ‘id’ and object type variables must have one of the following four ownership qualifiers:<br></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span> __<span class="keyword">strong</span></div><div class="line"><span class="number">2.</span> __<span class="keyword">weak</span></div><div class="line"><span class="number">3.</span> __<span class="keyword">unsafe_unretained</span></div><div class="line"><span class="number">4.</span> __autoreleasing</div></pre></td></tr></table></figure><p></p><p>You should decide which ownership qualifier is to be used for all the ‘id’ and object type variables in your source code. In this chapter, I explain hwo you should choos each qualifier one by one.</p><h3 id="strong-ownership-qualifier"><a href="#strong-ownership-qualifier" class="headerlink" title="__strong ownership qualifier"></a>__strong ownership qualifier</h3><p>The <strong>strong ownership qualifier is used as the default for ‘id’ and object types. It means that the variable obj in the following source code is </strong>strong qualified implicitly.<br></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="keyword">id</span> obj = [[<span class="built_in">NSObject</span> alloc] init];</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>Without being explicitly qualified, ‘id’ or objects are treated as __strong. The above code is the same as:<br></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="keyword">id</span> __<span class="keyword">strong</span> obj = [[<span class="built_in">NSObject</span> alloc] init];</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>The following is the same source code for a non-ARC environment.<br></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* non-ARC */</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">id</span> obj = [[<span class="built_in">NSObject</span> alloc] init];</div><div class="line">    [obj release];</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>This means the “release” method is automatically added on an ARC environment to release the created object with ownership.</p><p>We add comments on the ownership status:<br></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="keyword">id</span> __<span class="keyword">strong</span> obj = [[<span class="built_in">NSObject</span> alloc] init];</div><div class="line">    <span class="comment">/**</span></div><div class="line">    * The variable obj is qualified with __strong.</div><div class="line">    * Which means, it has the ownership of the object.</div><div class="line">    **/</div><div class="line">&#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">    * Leaving the scope of variable obj, its strong reference disappears.</div><div class="line">    * The object is release automatically,</div><div class="line">    * because no one has ownership, the objec is dispoed of.</div><div class="line">    */</div></pre></td></tr></table></figure><p></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;A note for book &lt;a href=&quot;http://www.apress.com/us/book/9781430241164&quot;&gt;Pro Multithreading and Memory Management for iOS and OS X&lt;/a&gt;&lt;br&gt;ARC is summarized in Apple’s own words:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;ARC in Objective-C makes memory management the job of the compiler. By enabling ARC with the new Apple LLVM compiler, you will never need to type retain or release again, dramatically simplifying the development process, while reducing craches and memory leaks. The compiler has a complete understanding of your objects, and releases each object the instant it is no longer used, so apps run as fast as ever, with predictable, smooth performance.&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://blog.superyoung.win/tags/iOS/"/>
    
      <category term="Programming" scheme="http://blog.superyoung.win/tags/Programming/"/>
    
      <category term="ARC" scheme="http://blog.superyoung.win/tags/ARC/"/>
    
      <category term="Rules" scheme="http://blog.superyoung.win/tags/Rules/"/>
    
      <category term="Objective C" scheme="http://blog.superyoung.win/tags/Objective-C/"/>
    
      <category term="Coming soon..." scheme="http://blog.superyoung.win/tags/Coming-soon/"/>
    
  </entry>
  
  <entry>
    <title>使用 GitHub Pages 搭建博客指南</title>
    <link href="http://blog.superyoung.win/2017/01/28/how_to_build_a_blog/blog_with_github_pages/"/>
    <id>http://blog.superyoung.win/2017/01/28/how_to_build_a_blog/blog_with_github_pages/</id>
    <published>2017-01-28T05:18:35.000Z</published>
    <updated>2017-01-30T11:15:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>个人使用 GitHub Pages 结合 Hexo 搭建静态网页博客的一点总结<br><a id="more"></a></p><p>为什么用 GitHub Pages 和 Hexo 等工具来搭建博客呢？为什么不用 WordPress？</p><ul><li><p>首先，仅仅为了一个博客，很多人可能并不想花资金到服务器上。一台服务器应该用来做些更有趣的事情 （不差钱的土豪请略过 ┑(￣Д ￣)┍。</p></li><li><p>其次很多人也不想花精力去维护一个博客系统。 WordPress 等框架虽然说成熟但是偶尔还是会爆出一些漏洞，如果说你不及时跟进，修复漏洞的话，可能会对在你博客下留言的人造成不好的影响。</p></li></ul><p>于是，静态网页生成器 ➕ 免费的静态网页展示工具就成了搭建博客的不二之选。</p><h2 id="借用-GitHub-Pages-搭建博客的原理"><a href="#借用-GitHub-Pages-搭建博客的原理" class="headerlink" title="借用 GitHub Pages 搭建博客的原理"></a>借用 GitHub Pages 搭建博客的原理</h2><p>GitHub Pages 是 GitHub 提供的一个静态网页展示器，可以将静态的文本按照网页的形式来展示，静态文本内容将会存储在你指定的 repo 中。</p><p>在这个指南中，我将会展示如何通过静态网页生成器 Hexo 将 <code>.md</code> 文件转换成网页。</p><h2 id="开启-Pages"><a href="#开启-Pages" class="headerlink" title="开启 Pages"></a>开启 Pages</h2><p>新建一个 repo （也可以使用旧的），在 setting 中找到 GitHub Pages 设置项，开启 GitHub Pages。按照指引一步步走完，你的静态展示页面就搭建完成了。</p><p>GitHub 一般会建议使用 jkeyll 来做 .md 文件到 .html 文件的转换，但是我这里使用的是 Hexo，因为首先它的作者是中国台湾人，社区比较本土化，资料也比较容易找。</p><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>要安装 Hexo 的话，首先要安装 Node.js 和 Git<br>Node.js 的安装很简单：<br>macOS：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install node</div></pre></td></tr></table></figure><p></p><p><em>详情请见：<a href="https://nodejs.org/en/download/package-manager/" target="_blank" rel="external">Installing Node.js via package manager</a></em></p><p>Git 的安装，额，如果看文章的您还没装 Git 的话 <del>（该面壁了）</del> 。 Git 的安装过程和node.js类似，不再赘述。</p><p>然后使用 <code>npm</code> 包管理器来 在本机安装 Hexo<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-cli -g</div></pre></td></tr></table></figure><p></p><p>接下来你的电脑应该可以使用 Hexo 这个命令了，好，那么找到一个适合的目录，执行<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo init blog;</div><div class="line"><span class="built_in">cd</span> blog;</div><div class="line">npm install;</div></pre></td></tr></table></figure><p></p><p>这几条命令将会在当前目录下新建一个名为 blog 的目录，再将 hexo 需要的初始化文件放 clone 到这个目录中。</p><p>如果你想直接看效果的话，执行以下命令启动服务器<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo s</div></pre></td></tr></table></figure><p></p><p>此时在 localhost:4000 中应该可以看到 Hello World 了。</p><h2 id="关于配置文件-config-yml"><a href="#关于配置文件-config-yml" class="headerlink" title="关于配置文件 _config.yml"></a>关于配置文件 _config.yml</h2><p>分别有 Site, URl, Directory, Writting, Category &amp; tag, Date format, Pagination, Extensions, Atom/RSS conf, Deployment 的配置信息。大部分自行配置即可。</p><p>填写 <a href="https://github.com/moment/moment-timezone/blob/develop/data/packed/latest.json" target="_blank" rel="external">moment-timezone 时区列表</a> 中的一项，比如中国是 <code>Asia/Shanghai</code>。</p><p><em>详情请参见：<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="external">Hexo 配置</a></em></p><h2 id="如何写文章？"><a href="#如何写文章？" class="headerlink" title="如何写文章？"></a>如何写文章？</h2><p>很简单，在 <code>source/_post/</code> 中新建 .md 文件就可以了，如果不想自己手动新建的话，可以执行<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new filename</div></pre></td></tr></table></figure><p></p><p>执行上述操作后再生成静态网页，执行：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo g</div></pre></td></tr></table></figure><p></p><blockquote><p>建议文件名使用英文，因为文件名将作为博客文章链接的一部分，如果使用中文可能导致不便。</p></blockquote><h2 id="关于-Front-matter"><a href="#关于-Front-matter" class="headerlink" title="关于 Front-matter"></a>关于 Front-matter</h2><p>参数都很容易理解，这里要说的是，tags 的分词，使用的是一下这两种语法，而不是空格或者什么<br></p><figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tags:</div><div class="line"><span class="bullet">- </span>myTag0</div><div class="line"><span class="bullet">- </span>myTag1</div></pre></td></tr></table></figure><p></p><p>OR<br></p><figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tags:[myTag0, myTag1]</div></pre></td></tr></table></figure><p></p><p><em>详情请参见：<a href="https://hexo.io/zh-cn/docs/front-matter.html" target="_blank" rel="external">Front-matter</a></em></p><h2 id="关于图片"><a href="#关于图片" class="headerlink" title="关于图片"></a>关于图片</h2><p>官方的关于 Asset 文件夹，无法成功应用，原因未知。反而是按照 md 语法的 <code>![ title ]( href )</code> 起了作用。</p><p>在 <code>source/</code> 目录下新建 <code>iamges/</code> 目录用来保存图片，然后在文章中这样引用<br></p><figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![<span class="string">example</span>](<span class="link">/images/example.jpg</span>)</div></pre></td></tr></table></figure><p></p><p>注意，如果使用这个办法，不能 _config.yml 中的 <code>relative_link</code> 必须为 <code>false</code></p><p><em>详情请参见：<a href="https://hexo.io/zh-cn/docs/asset-folders.html" target="_blank" rel="external">资源文件夹</a></em></p><h2 id="关于主题"><a href="#关于主题" class="headerlink" title="关于主题"></a>关于主题</h2><p>主题文件保存在 themes 中，在这个目录下 clone 他人提供的 hexo 主题项目下来，或者自己根据模板自行更改。</p><p>然后在 <code>_config.yml</code> 的 <code>theme:</code> 中输入主题文件夹名字</p><p>详情请参见：<br><em><a href="https://hexo.io/zh-cn/docs/themes.html" target="_blank" rel="external">Hexo 主题</a></em><br><em><a href="https://hexo.io/zh-cn/docs/templates.html" target="_blank" rel="external">Hexo 模板</a></em></p><h2 id="关于评论"><a href="#关于评论" class="headerlink" title="关于评论"></a>关于评论</h2><p>请往下滑该页面，这里我使用了 <code>landscape</code> 主题，其内置了 <code>Disuqs</code> 服务的代码，为了方便，直接使用了国外的在线评论服务 <code>Disqus</code>，而有些童鞋喜欢国内的服务<code>多说</code>。其实二者在功能上并没有什么太大的差异。</p><p>关于评论功能的部署，方法大同小异：注册一个第三方服务的帐号，他们会提供一个二级域名和对应的 JS 代码，而你要做的就是在网页中包含他们提供的 JS 代码，当有人评论的时候，就会调用这些 JS 代码发送消息给第三方服务提供商，他们再将获取到的消息存入对应帐号的数据库表中，下次再有人访问的时候再从表中读取出来。</p><p>Hexo 中，<code>Disqus</code> 的部署非常容易，只需要在 <code>blog/_config.yml</code> 中增加字段：<br></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Comments</span></div><div class="line"><span class="attr">disqus_shortname:</span> your_disqus_shortname</div></pre></td></tr></table></figure><p></p><blockquote><p>注意这里的 shortname 只是生成的 name，不要填上整个链接</p></blockquote><p>如果想要关闭某篇文章的评论功能，只需要在其 Front-matter 中填上<br></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">comments:</span> <span class="literal">false</span></div></pre></td></tr></table></figure><p></p><p>也就是说一篇文章的评论功能是否打开，取决于两个因素：</p><ol><li>blog 配置中是否填写了 disqus_shortname</li><li>文章 Front-matter 中的 comments 是否为 true（默认为 true）</li></ol><p>通过对主题 .ejs 文件的一番探索，证实了上述说法（以下代码位于：<code>blog/themes/landscape/layout/_partial/article.ejs</code>）：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!index &amp;&amp; post.comments &amp;&amp; config.disqus_shortname)&#123; ... &#125;</div></pre></td></tr></table></figure><p></p><p>对于<code>多说</code>或者其他评论服务的配置，请自行搜索，原理一般都是：删除掉当前主题默认的评论 js，粘贴上评论服务提供商的 JS 代码。没有什么技术含量的 ;)</p><h2 id="关于个人域名"><a href="#关于个人域名" class="headerlink" title="关于个人域名"></a>关于个人域名</h2><p>设置个人域名的时候，需要首先在域名服务商那里设置 CNAME （别名）记录，将 CNAME 设置成 <em>用户名.github.io</em></p><p>然后在 repo 的 setting 中填写自己的域名。</p><h2 id="发布博客"><a href="#发布博客" class="headerlink" title="发布博客"></a>发布博客</h2><p>上面的操作都是在本机上的，怎么发布呢？</p><p>官方给的答案是执行命令： <code>hexo g; hexo d</code>，而我比较喜欢原生态 (Geek) 一点的。因为使用 shell 命令结合 git 也可以完美解决发布问题。</p><p>原理如下：<code>hexo g</code> 生成的的文件都在 <code>public/</code> 目录下，所以，如果要发布，只需要将 public 目录提交到正确的 GitHub repo 上去就可以了。</p><p>我的办法是：</p><ol><li>首先在 GitHub 中 clone 那个 repo 到一个新建的 deploy 目录下</li><li>然后使用如下 shell 命令来提交（保存成.sh文件方便下次执行）：<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 设置shell可以识别感叹号（为了设置 rm 命令的白名单）</span></div><div class="line">    <span class="built_in">shopt</span> <span class="_">-s</span> extglob</div><div class="line"><span class="comment"># 进入工作目录（记得改成自己的目录）</span></div><div class="line">    <span class="built_in">cd</span> ~/blog;</div><div class="line"><span class="comment"># Hexo Generate</span></div><div class="line">    hexo g;</div><div class="line"><span class="comment"># 清理目录，保留 .git, README.md 和 CNAME 文件</span></div><div class="line">    <span class="built_in">cd</span> deploy/;</div><div class="line">    rm -rf ./!(.git|README.md|CNAME);</div><div class="line"><span class="comment"># 移动需要部署的文件</span></div><div class="line">    cp ../public/* ./;</div><div class="line"><span class="comment"># 部署</span></div><div class="line">    git add .; git commit -m <span class="string">"update"</span>; git push; <span class="built_in">exit</span>;</div></pre></td></tr></table></figure></li></ol><blockquote><p>注意：以上命令仅在 macOS Sierra 上测试通过。如果 Linux 版本所支持的命令不同，请帮忙在评论区提醒一下，Thank you ;)</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><em><a href="https://pages.github.com" target="_blank" rel="external">GitHub Pages</a></em><br><em><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">Hexo</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;个人使用 GitHub Pages 结合 Hexo 搭建静态网页博客的一点总结&lt;br&gt;
    
    </summary>
    
    
      <category term="GitHub" scheme="http://blog.superyoung.win/tags/GitHub/"/>
    
      <category term="Pages" scheme="http://blog.superyoung.win/tags/Pages/"/>
    
      <category term="blog" scheme="http://blog.superyoung.win/tags/blog/"/>
    
      <category term="hexo" scheme="http://blog.superyoung.win/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>中性灰磨皮以及细节增强</title>
    <link href="http://blog.superyoung.win/2017/01/27/PictureProcessing/50gray_buffing/"/>
    <id>http://blog.superyoung.win/2017/01/27/PictureProcessing/50gray_buffing/</id>
    <published>2017-01-27T14:32:36.000Z</published>
    <updated>2017-01-28T16:22:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>中性灰磨皮的基本步骤，其思路，还是 <code>D&amp;B</code><br><a id="more"></a></p><ol><li>使用图章等工具进行斑点的消除</li><li>新建一个颜色填充图层，填充50%灰色，设置图层混合模式为柔光</li><li>新建一个颜色填充图层，填充黑色，设置图层混合模式为颜色</li><li>新建一个颜色填充图层，填充黑色，设置图层混合模式为柔光</li><li>使用笔刷在中性灰图层更改高光和阴影，重绘所有需要重绘的地方</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;中性灰磨皮的基本步骤，其思路，还是 &lt;code&gt;D&amp;amp;B&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Photoshop" scheme="http://blog.superyoung.win/tags/Photoshop/"/>
    
      <category term="修图" scheme="http://blog.superyoung.win/tags/%E4%BF%AE%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>关于 SequenceType</title>
    <link href="http://blog.superyoung.win/2017/01/25/learning_iOS/SequenceType/"/>
    <id>http://blog.superyoung.win/2017/01/25/learning_iOS/SequenceType/</id>
    <published>2017-01-25T07:47:23.000Z</published>
    <updated>2017-01-29T02:27:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>Coming soon…<br><a id="more"></a></p><h2 id="从-Array-开始"><a href="#从-Array-开始" class="headerlink" title="从 Array 开始"></a>从 Array 开始</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Coming soon…&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://blog.superyoung.win/tags/iOS/"/>
    
      <category term="Programming" scheme="http://blog.superyoung.win/tags/Programming/"/>
    
      <category term="Coming soon..." scheme="http://blog.superyoung.win/tags/Coming-soon/"/>
    
      <category term="Sequence" scheme="http://blog.superyoung.win/tags/Sequence/"/>
    
      <category term="type" scheme="http://blog.superyoung.win/tags/type/"/>
    
  </entry>
  
</feed>
