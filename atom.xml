<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tech. Design. Life.</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.superyoung.win/"/>
  <updated>2017-10-28T11:47:28.596Z</updated>
  <id>http://blog.superyoung.win/</id>
  
  <author>
    <name>Yu Shengyang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Setting Up Emacs Server to Speed Up Your Emacs</title>
    <link href="http://blog.superyoung.win/2017/10/28/learning_emacs/start_server/"/>
    <id>http://blog.superyoung.win/2017/10/28/learning_emacs/start_server/</id>
    <published>2017-10-28T04:58:57.510Z</published>
    <updated>2017-10-28T11:47:28.596Z</updated>
    
    <content type="html"><![CDATA[<p>This article describe how to start the Emacs Server for reducing file opening time cost in the future use.<br><a id="more"></a></p><h2 id="0x00-Introduction"><a href="#0x00-Introduction" class="headerlink" title="0x00 Introduction"></a>0x00 Introduction</h2><p>I have a lot of package installed so that when I start emacs, it will take about 10s to start over. And that is why I decide to use emacs’ server and client mode to speed up the startup procedure.</p><h2 id="0x01-Set-up-start-server-with-a-executable-shell-file"><a href="#0x01-Set-up-start-server-with-a-executable-shell-file" class="headerlink" title="0x01 Set up start server with a executable shell file"></a>0x01 Set up start server with a executable shell file</h2><p>in <code>start_emacs_server.sh</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"Starting Emacs Server..."</span></div><div class="line">/Applications/Emacs.app/Contents/MacOS/Emacs-x86_64-10_9 --daemon</div><div class="line"><span class="built_in">echo</span> <span class="string">"Done."</span></div></pre></td></tr></table></figure><h2 id="0x02-set-up-env-variables"><a href="#0x02-set-up-env-variables" class="headerlink" title="0x02 set up env variables"></a>0x02 set up env variables</h2><p>in <code>~/.bash_profile</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">alias</span> em=<span class="string">'$HOME/emacs.sh'</span></div><div class="line"><span class="built_in">alias</span> emacsclient=<span class="string">'/Applications/Emacs.app/Contents/MacOS/bin-x86_64-10_9/emacsclient'</span></div></pre></td></tr></table></figure><h2 id="0x03-set-up-emacsclient-command"><a href="#0x03-set-up-emacsclient-command" class="headerlink" title="0x03 set up emacsclient command"></a>0x03 set up emacsclient command</h2><p>in <code>emacs.sh</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line">/Applications/Emacs.app/Contents/MacOS/bin-x86_64-10_9/emacsclient -n -c <span class="_">-a</span> <span class="string">""</span> -- <span class="string">"<span class="variable">$@</span>"</span></div></pre></td></tr></table></figure><p>Now you can use<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">em [filename]</div></pre></td></tr></table></figure><p></p><p>to use emacs to open a file with the current emacs server</p><h2 id="0x04-One-last-thing"><a href="#0x04-One-last-thing" class="headerlink" title="0x04 One last thing:"></a>0x04 One last thing:</h2><p>remember to set the server autostart at login</p><p><img src="/images/emacs/emacs_login_autostart.png" alt="p"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This article describe how to start the Emacs Server for reducing file opening time cost in the future use.&lt;br&gt;
    
    </summary>
    
    
      <category term="Emacs" scheme="http://blog.superyoung.win/tags/Emacs/"/>
    
  </entry>
  
  <entry>
    <title>用 Cython 把 Python 文件编译成可执行文件</title>
    <link href="http://blog.superyoung.win/2017/10/07/learning_python/compile_executable_with_cython/"/>
    <id>http://blog.superyoung.win/2017/10/07/learning_python/compile_executable_with_cython/</id>
    <published>2017-10-07T07:44:40.841Z</published>
    <updated>2017-10-07T08:17:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>macOS 预装的 python 版本为 2.7，在这里会展示如何把 3.4 版本的 python 代码编译成可执行文件<br><a id="more"></a></p><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><ol><li>安装 cython，一般可以使用 <code>sudo pip install -U cython</code> 来安装</li><li>写好 python 代码，保存成 main.py 文件</li><li><code>cython --embed main.py</code><br>这时会生成一个 .c 文件，也就是转换后的 c 代码</li><li><p>使用 which 命令找到当前使用的 python 的路径，比如说我的 python3 安装在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">MBA:~ ysy$ which python3</div><div class="line">/Library/Frameworks/Python.framework/Versions/3.4/bin/python3</div></pre></td></tr></table></figure><p>也就是说<code>头</code>和<code>动态链接库</code>分别在 <code>/Library/Frameworks/Python.framework/Versions/3.4/Headers</code> 和 <code>/Library/Frameworks/Python.framework/Versions/3.4/lib</code> 这里，记录下这两个路径。推荐使用环境变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export PYTHON_LIB=/Library/Frameworks/Python.framework/Versions/3.4/lib</div><div class="line">export C_INCLUDE_PATH=/Library/Frameworks/Python.framework/Versions/3.4/Headers</div></pre></td></tr></table></figure></li><li><p>使用 <code>gcc</code> 编译成可执行文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc -I $C_INCLUDE_PATH -L $PYTHON_LIB -lpython3.4m -o a main.c</div></pre></td></tr></table></figure><p>解释一下， <code>-I</code> 是指定预编译头文件的位置；<code>-L</code> 是指定动态链接库的位置；<code>-l</code> 是指定动态链接库名。</p></li></ol><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><ol><li>注意三个参数标记 <code>-I</code> <code>-L</code> <code>-l</code>，他们和紧跟在后的参数之间是可以没有空格的。</li><li>库名和库的文件名之间的关系满足：<code>文件名 = &#39;lib&#39; + 库名 + &#39;.so&#39;</code>，可以自行 <code>ls -alh $PYTHON_LIB</code> 验证。</li><li>其实这个编译成可执行文件不太符合 cython 的初衷，cython 的初衷是为了把 python 代码编译成库，用来加速 python 代码调用的。当然，有时候因为自己不想写多个 py 文件，直接编译成可执行代码来用用也无妨。</li><li>其他问题可以参考 <a href="http://docs.cython.org" target="_blank" rel="external">Cython’s Documentation</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;macOS 预装的 python 版本为 2.7，在这里会展示如何把 3.4 版本的 python 代码编译成可执行文件&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>升级 macOS High Sierra 失败怎么办？😰</title>
    <link href="http://blog.superyoung.win/2017/10/01/notes/update_high_sierra/"/>
    <id>http://blog.superyoung.win/2017/10/01/notes/update_high_sierra/</id>
    <published>2017-10-01T11:17:30.533Z</published>
    <updated>2017-10-01T12:25:17.372Z</updated>
    
    <content type="html"><![CDATA[<p>升级系统没遇到问题自然最好，遇到了问题，首先要淡定。搞清楚情况之前千万不要乱操作，以免发生不可逆转的事故。</p><a id="more"></a><h2 id="0x00-升级前请备份重要数据-请备份重要数据-备份重要数据"><a href="#0x00-升级前请备份重要数据-请备份重要数据-备份重要数据" class="headerlink" title="0x00 升级前请备份重要数据 请备份重要数据 备份重要数据"></a>0x00 升级前请备份重要数据 请备份重要数据 备份重要数据</h2><h2 id="0x01-首先介绍一下-macOS-High-Sierra-以及为什么要升级到这个版本"><a href="#0x01-首先介绍一下-macOS-High-Sierra-以及为什么要升级到这个版本" class="headerlink" title="0x01 首先介绍一下 macOS High Sierra 以及为什么要升级到这个版本"></a>0x01 首先介绍一下 macOS High Sierra 以及为什么要升级到这个版本</h2><p>私以为，这个版本的系统将会是至今最流畅的 macOS：</p><ol><li>High Sierra 中 Finder 启动速度比上一个版本的快了接近一倍</li><li>文件系统转换成了 APFS (Apple File System) —— 带来了包括 copy on write 技术的新文件系统，相信使用 iPhone 的用户早就体验到了其惊人效果： 6s 及以上的设备（升级到 iOS 10.3 以后）后台开 30+ 应用程序互相切换不需要重新载入 —— 其作用在 macOS 上体现为复制文件只需要一瞬间，和读写性能的提升</li><li>还有一些应用级别的升级<br><a href="http://help.apple.com/macOS/high-sierra/whats-new/" target="_blank" rel="external">What’s new</a></li></ol><h2 id="0x02-另外升级前，看看官方-Requirement-说明"><a href="#0x02-另外升级前，看看官方-Requirement-说明" class="headerlink" title="0x02 另外升级前，看看官方 Requirement 说明"></a>0x02 另外升级前，看看官方 Requirement 说明</h2><p><a href="https://support.apple.com/en-us/ht201475" target="_blank" rel="external">Requirements</a></p><h2 id="0x03-不幸遇到问题？如何自己解决？"><a href="#0x03-不幸遇到问题？如何自己解决？" class="headerlink" title="0x03 不幸遇到问题？如何自己解决？"></a>0x03 不幸遇到问题？如何自己解决？</h2><ol><li>首先说一下遇到升级问题是可以就近去任意一家 Apple 官方店找店员解决问题的。不过下面还是讲讲自己怎么解决吧，下面的解决方案基于你有一个高速稳定的网络，如果没有这个条件，还是找 Apple 店员吧，更方便快捷。那么，我们开始升级吧：</li><li>如果 App Store 下载失败，重启一下电脑，找个稳定的网络环境，多试几次。</li><li>如果安装过程最后提示出错，或者比如说【请重新运行安装程序】之类的，然后重启，发现根本无法进入系统！别急，现在的确应该是不能进入系统的，但是现在数据都还在，只是磁盘被锁住了而已。当然了现在可以进入恢复模式（这点比 PC 好太多）</li><li>现在你的数据都没丢失，都完整的躺在硬盘里，而硬盘，虽然不确定现在是 APFS 还是 HFS+ 格式，但是无所谓，先不用管它，我们一步步走。首先根据 Apple 官网的指引，在开机的时候一直按下 <code>command + R</code> （恢复到上一个稳定系统） 或者 <code>command + option + R</code> （升级并恢复到最新稳定的系统）键进入恢复系统。注意，此时最好有 WiFi 链接，因为等会的系统需要从 Internet 上下载</li><li>连接上 WiFi 以后就恢复系统吧。此时你的文件也还是安全的，放心。只要你不选择格式化之类的选项。另外注意，需要 WiFi 链接。</li><li>在恢复模式下安装可能还会卡住。我遇到的情况是下载失败，<code>InstallOSDDmg.pkg</code> 这个文件下载不下来，这个问题的解决办法是重试。过了一晚重试一下就可以了。如果你的进度条卡住了，看一下 log 信息，找找错误原因，再对症下药吧。</li><li>如果恢复完成，恭喜你，数据保住了，系统也更新完了！ 咦等等，但是，为什么进不去系统，开机提示输入磁盘密码 —— 而这个密码根本不是用户密码！淡定，淡定</li><li>其实上网随便搜一搜就解决了，需要输入磁盘密码是因为开启了磁盘加密功能，此时，解锁即可。怎么解锁呢？还是需要借助恢复模式，好的，我们重新进入恢复模式看看。</li><li>这次不要选择恢复系统了哈，毕竟系统已经装上去了。现在，在菜单栏找到终端，打开，输入命令 <code>diskutil apfs list</code> 并观察输出的文字内容，根据磁盘大小或者盘符找到你安装系统的磁盘号码，形如 <code>disk#s#</code> ，比如说我的磁盘盘符是 <code>Macintosh HD</code> 磁盘号是 <code>disk2s1</code>，同时，你会看到这个磁盘旁边写着 <code>Unmounted</code> 未挂载。好的，记录下磁盘号和磁盘盘符</li><li>继续在终端输入 <code>diskutil apfs unlockvolume #磁盘号#</code></li><li>在终端输入 <code>diskutil apfs updatePreboot #磁盘号#</code></li><li>如果输出 <code>error=0</code> 的话，恭喜你，已经成功了，重启电脑吧！ 如果输出不是 <code>error=0</code> 而是 <code>error=-69569</code> 之类的，也不用急，继续操作</li><li><p>在终端输入（注意下面的 <code>disk2s1</code> 和 <code>Macintosh\ HD</code>， 你需要改成你自己的磁盘盘符。另外在手敲终端命令的情况下，为了避免失误，你需要会使用 Tab 键来自动补全，试试吧，打出开头几个字母，那些反斜杠都会自动补全出来的）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">diskutil apfs updatePreboot disk2s1 -od /Volumes/Macintosh\ HD/Recovered\ Items/private/var/db/dslocal/nodes/Default</div></pre></td></tr></table></figure></li><li><p>重启电脑，结束。<br><a href="https://www.zhihu.com/question/65908448" target="_blank" rel="external">感谢知乎的小伙伴们</a></p></li></ol><h2 id="最后如果不想那么刺激，升级前先备份数据吧，即使不小心格式化了硬盘，也随时可以通过恢复模式的-Time-Machine-恢复"><a href="#最后如果不想那么刺激，升级前先备份数据吧，即使不小心格式化了硬盘，也随时可以通过恢复模式的-Time-Machine-恢复" class="headerlink" title="最后如果不想那么刺激，升级前先备份数据吧，即使不小心格式化了硬盘，也随时可以通过恢复模式的 Time Machine 恢复"></a>最后如果不想那么刺激，升级前先备份数据吧，即使不小心格式化了硬盘，也随时可以通过恢复模式的 Time Machine 恢复</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;升级系统没遇到问题自然最好，遇到了问题，首先要淡定。搞清楚情况之前千万不要乱操作，以免发生不可逆转的事故。&lt;/p&gt;
    
    </summary>
    
    
      <category term="macOS" scheme="http://blog.superyoung.win/tags/macOS/"/>
    
      <category term="OS X" scheme="http://blog.superyoung.win/tags/OS-X/"/>
    
      <category term="Sierra" scheme="http://blog.superyoung.win/tags/Sierra/"/>
    
      <category term="High Sierra" scheme="http://blog.superyoung.win/tags/High-Sierra/"/>
    
  </entry>
  
  <entry>
    <title>Python 中的数据挖掘库 Pandas 的常用操作和容易出现误解的地方</title>
    <link href="http://blog.superyoung.win/2017/05/09/learning_data_analysis_with_python/about_pandas/"/>
    <id>http://blog.superyoung.win/2017/05/09/learning_data_analysis_with_python/about_pandas/</id>
    <published>2017-05-09T03:15:56.000Z</published>
    <updated>2017-10-28T05:05:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文将主要总结 Python 库 Pandas 的一些常用操作和一些坑<br><a id="more"></a></p><h2 id="Pandas-简介"><a href="#Pandas-简介" class="headerlink" title="Pandas 简介"></a>Pandas 简介</h2><p>Pandas 是一个开源的，基于 numpy 的数据挖掘库，因为基于 numpy ，一般来说其效率也不低。</p><blockquote><p><a href="http://pandas.pydata.org/" target="_blank" rel="external">Pandas官网</a></p></blockquote><h2 id="Pandas-中主要数据结构"><a href="#Pandas-中主要数据结构" class="headerlink" title="Pandas 中主要数据结构"></a>Pandas 中主要数据结构</h2><p><code>DataFrame</code>：可以看做是一张表，有列名(<code>key</code>)，有行号(<code>index</code>)，每列有一个numpy的数据类型(<code>dtype</code>)。<br><code>Series</code>：可以看做是表的一列，有行号(<code>index</code>)和数据类型(<code>dtype</code>)。<br>可以把 <code>DataFrame</code> 看做是 <code>Series</code> 的集合，而 <code>Series</code> 是 numpy 中某类型的集合。</p><h2 id="Pandas-的一些常用操作"><a href="#Pandas-的一些常用操作" class="headerlink" title="Pandas 的一些常用操作"></a>Pandas 的一些常用操作</h2><ul><li><p>获取列名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df.keys()</div></pre></td></tr></table></figure></li><li><p>删除列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 其中参数 inplace 可以控制是否在原 DataFrame 中进行操作</span></div><div class="line">new_df = df.drop(<span class="string">"time"</span>, inplace=<span class="keyword">False</span>)</div></pre></td></tr></table></figure></li><li><p>删除行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 以下代码应该删除第 11 行和第 13 行</span></div><div class="line">new_df = df.drop([<span class="number">11</span>, <span class="number">13</span>], inplace=<span class="keyword">False</span>)</div><div class="line"><span class="comment"># 以下代码删除的是第 11 行到第 13 行</span></div><div class="line">new_df = df.drop(range(<span class="number">11</span>, <span class="number">13</span>), inplace=<span class="keyword">False</span>)</div></pre></td></tr></table></figure></li><li><p>行切片</p><ol><li><p>loc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df.loc[df.index[[<span class="number">0</span>, <span class="number">2</span>]], <span class="string">'A'</span>]</div></pre></td></tr></table></figure></li><li><p>iloc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df.iloc[[<span class="number">0</span>, <span class="number">2</span>], df.columns.get_loc[<span class="string">'A'</span>]]</div></pre></td></tr></table></figure></li><li><p>选择多列进行行切片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df.iloc[[<span class="number">0</span>, <span class="number">2</span>], df.columns.get_indexer([<span class="string">'A'</span>, <span class="string">'B'</span>])]</div></pre></td></tr></table></figure></li><li><p>已废弃：<del>df.ix[[0,1,3,5]]</del></p></li></ol></li><li><p>将日期转换成时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#  使用 to_datetime 方法</span></div><div class="line">pandas.to_datetime(df[<span class="string">'datetimestring'</span>], format=<span class="keyword">None</span>)</div><div class="line"><span class="comment"># 或者直接改变某列的 dtype</span></div><div class="line">df[<span class="string">'datetimestring'</span>].dtpye = datetime64</div><div class="line"><span class="comment"># 对 datetime64 类型的数据可以进行 .date() .time() .timestamp() 等操作</span></div><div class="line">df[<span class="string">'date'</span>] = df[<span class="string">'datetimestring'</span>].date()</div><div class="line">df[<span class="string">'time'</span>] = df[<span class="string">'datetimestring'</span>].time()</div><div class="line">df[<span class="string">'timestamp'</span>] = df[<span class="string">'datetimestring'</span>].timestamp()</div></pre></td></tr></table></figure></li></ul><h2 id="Pandas-使用上的一些坑"><a href="#Pandas-使用上的一些坑" class="headerlink" title="Pandas 使用上的一些坑"></a>Pandas 使用上的一些坑</h2><ol><li>关于 <code>index</code>，每次 drop 行以后最好都 df.reset_index()，不然下次按照 index 遍历的时候你就等着哭吧/微笑</li><li><code>dateutil.parser.parse(&#39;10/04/2016 10:20&#39;)</code> 可以直接将标格式的日期字符串转换成日期格式，而且 pandas 可以识别，不过因为必对每一个元素进行操作，效率可能会低，如果要转换一整列，使用上面提的 pd.to_datetime(df[‘key’])。</li><li>pandas 的列操作最好不要使用 map filter 等高阶函数，pandas 有提供 apply() 函数，参考<a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.apply.html" target="_blank" rel="external">这里</a>。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将主要总结 Python 库 Pandas 的一些常用操作和一些坑&lt;br&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://blog.superyoung.win/tags/Python/"/>
    
      <category term="Pandas" scheme="http://blog.superyoung.win/tags/Pandas/"/>
    
      <category term="DataFrame" scheme="http://blog.superyoung.win/tags/DataFrame/"/>
    
      <category term="Series" scheme="http://blog.superyoung.win/tags/Series/"/>
    
  </entry>
  
  <entry>
    <title>人工神经网络</title>
    <link href="http://blog.superyoung.win/2017/04/26/learning_data_analysis_with_python/about_ann/"/>
    <id>http://blog.superyoung.win/2017/04/26/learning_data_analysis_with_python/about_ann/</id>
    <published>2017-04-26T14:09:27.000Z</published>
    <updated>2017-10-01T12:26:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>So the LORD God formed the man from the dust of the ground, breathed life into his lungs, and the man became a living being.</p></blockquote><p>本文主要介绍笔者在进行数学建模时使用的神经网络和机器学习的部分内容。</p><a id="more"></a><h1 id="0x00-关于人工神经网络和人工神经元"><a href="#0x00-关于人工神经网络和人工神经元" class="headerlink" title="0x00 关于人工神经网络和人工神经元"></a>0x00 关于人工神经网络和人工神经元</h1><p>在机器学习和认知科学领域，人工神经网络（英文：artificial neural network，缩写ANN），简称神经网络（英文：neural network，缩写NN）或类神经网络，是一种模仿生物神经网络（动物的中枢神经系统，特别是大脑）的结构和功能的数学模型或计算模型，可以用于对函数进行估计或近似。神经网络由大量的人工神经元联结进行计算。大多数情况下人工神经网络能在外界信息的基础上改变内部结构，是一种自适应系统。现代神经网络是一种非线性统计性数据建模工具。</p><p><img src="/images/data_analysis/Ncell.png" alt="人工神经元示意图"></p><p>上图是一个人工神经元的示意图，而一个人工神经网络就是许多人工神经元进行分层地互相连接，像这样：<br><img src="/images/data_analysis/ann.png" alt="人工神经网络示意图"></p><p>人工神经元的数学表示可以是这样：<br><img src="/images/data_analysis/math_expression.png" alt="人工神经元的数学表达式"></p><blockquote><p>其中 <code>W&#39;</code> 是权重向量，<code>A</code> 是输入向量，<code>b</code> 是偏置值，<code>f</code> 是激活函数</p></blockquote><p>可以看到，一个神经元的功能是求得输入向量与权向量的内积后，经一个非线性激活函数得到一个标量结果。从理论上一个三层的神经网络可以拟合任意函数。</p><p>还可以这样看神经元的作用：把一个n维的向量空间用一个超平面分成两部分（称之为判断边界），给定一个输入向量，神经元可以判断出这个向量位于超平面的哪一边。<br>那么它的数学表达式就可以写成这样：<br><img src="/images/data_analysis/math_expression_hyperplane.png" alt="人工神经元的超平面表示"></p><blockquote><p>其中，<code>W</code> 是权重向量的转置，<code>b</code> 是偏置值，<code>p</code> 是超平面向量</p></blockquote><p>既可以从数学的角度看待人工神经网络，也可以从仿生学的角度看待人工神经网络。从数学角度看，人工神经网络就是一个很好用的非线性拟合工具，除了结构上的特点以外没有什么更特别的地方，而从仿生学角度看待的话，人工神经网络是一种能让计算机逼近人类智能的工具。本文可能将会将两者结合着来看待人工神经网络，看看能不能有一些新的感悟或者发现。</p><h1 id="0x01-典型的神经网络具有以下三个主要组成部分"><a href="#0x01-典型的神经网络具有以下三个主要组成部分" class="headerlink" title="0x01 典型的神经网络具有以下三个主要组成部分"></a>0x01 典型的神经网络具有以下三个主要组成部分</h1><ul><li><strong>结构（Architecture）</strong> 结构指定了网络中的变量和它们的拓扑关系。例如，神经网络中的变量可以是神经元连接的权重（weights）和神经元的激励值（activities of the neurons）。</li><li><strong>激活函数（Activity Rule）</strong> 大部分神经网络模型具有一个短时间尺度的动力学规则，来定义神经元如何根据其他神经元的活动来改变自己的激励值。一般激活函数依赖于网络中的权重（即该网络的参数）。</li><li><strong>学习规则（Learning Rule）</strong> 学习规则指定了网络中的权重如何随着时间推进而调整。这一般被看做是一种长时间的动力学规则。一般情况下，学习规则依赖于神经元的激励值。它也可能依赖于监督者提供的目标值和当前权重的值。现在较常用的就是误差反向传播方法。而误差的计算里面，损失函数的确定又是必不可少的。</li></ul><p>接下来就每一个部分进行详细介绍</p><h1 id="0x02-关于结构"><a href="#0x02-关于结构" class="headerlink" title="0x02 关于结构"></a>0x02 关于结构</h1><p>一种常见的结构：多层前馈网络（Multilayer Feedforward Network）由三部分组成，</p><ul><li><strong>输入层（Input layer）</strong> ，输入层的神经元（Neuron）接受输入值，称为输入向量。</li><li><strong>输出层（Output layer）</strong> ，输入向量在神经网络中传输、分析、权衡，形成输出结果。输出的消息称为输出向量。</li><li><strong>隐藏层（Hidden layer）</strong> ，或者称为“隐含层”，是输入层和输出层之间多个神经元组成的层次。隐层可以有很多层。隐层的节点（神经元）数目不定，但数目越多神经网络的非线性越显著，从而神经网络的鲁棒性（robustness）（控制系统在一定结构、大小等的参数摄动下，维持某些性能的特性。）更显著。<br>神经网络的类型已经演变出很多种，这种分层的结构也并不是对所有的神经网络都适用。<br>结构方面主要注意层数和各层节点数即可，数值的确定有一些经验法则可以用，但是往往效果并不是很好，具体数值还是要依靠多次的试验来确定。</li></ul><h1 id="0x03-关于激活函数"><a href="#0x03-关于激活函数" class="headerlink" title="0x03 关于激活函数"></a>0x03 关于激活函数</h1><p>激活函数可以理解为就是在每个人工神经元外包裹的那层函数。为什么要有激活函数存在呢？因为 <code>W*x + b</code> 仍然是线性的，再用一个线性或者非线性的函数做一次变换往往可以更好地拟合非线性的目标函数。激活函数在需要的时候可以自定义，当然常用的激活函数也有很多，这里主要介绍一下最近用过的几个常用激活函数：</p><ol><li><p>logisitic sigmoid function<br><img src="/images/data_analysis/sigmoid_function.png" alt="logisitic sigmoid function"><br>其定义域在(0,1)之间。</p></li><li><p>softmax function<br>是 sigmoid 函数的一般形式，它能将一个含任意实数的K维的向量 <strong>Z</strong> “压缩”到另一个K维实向量 <strong>σ(Z)</strong> ，使得每一个元素的范围都在(0, 1)之间，并且所有元素的和为1。</p></li><li><p>tanh function<br>tanh 全称双曲正切函数 hyperbolic tangent，可以看做是 logisitic sigmoid 函数在 y 取值为 (-1, 1) 上的版本<br>其函数表达式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tanh(x)=2⋅σ(2x)−1</div><div class="line">其中</div><div class="line">σ(x)=ex/(1+ex)</div></pre></td></tr></table></figure></li><li><p>Softplus &amp; ReLU function<br>Softplus 是 sigmoid 函数的原函数，是由 Charles Dugas 等人在2001年提出来的，其函数数学表达式：Softplus(x)=log(1+e^x)<br>而 ReLU 的全称是线性整流函数 Rectified Linear Unit (ReLU)，是一个定义在(0, 1)之间的函数，其在 <code>x&lt;0</code> 部分取值为0，而 <code>x&gt;0</code> 的部分为线性函数，他们的图像如下所示：<br><img src="/images/data_analysis/Rectifier_and_softplus_functions.png" alt="Softplus_ReLU"></p></li></ol><p>这里主要讲讲 ReLU 函数，ReLU 函数对于训练深层神经网络很有优势，它相比于 tanh 和 logisitic sigmoid 等的优点在于：</p><ol><li>单侧激活性：当 <code>x&lt;0</code> 时神经元不会被激活，这和真实的神经元表现相近，也因为这个，使用了 ReLU 做激活函数的神经网络的神经元激活率比较低，相比于 sigmoid 系的激活函数 ReLU 和真实的神经元更相似。</li><li>更有效的梯度传递：不会有梯度爆炸和梯度消失的问题</li><li>计算效率高：激活部分是线性函数</li></ol><p>ReLU 函数还有一些优化版本：</p><ol><li>一种是 leaky ReLU：就是当 <code>x&lt;0</code> 时 y 不是取 0，而是取一个负的线性函数的值。</li><li>另一种是 random leaky ReLU：当 <code>x&lt;0</code> 时 y 不是取 0，和上面的一样取一个负的线性函数的值，再加上一个满足正态分布的随机项。</li></ol><p>以上两种优化版的 ReLU 函数在 <code>x&gt;0</code> 时和普通的 ReLU 一样都是线性函数，只是避免了在 <code>x&lt;0</code> 时信息丢失的问题。</p><h1 id="0x04-关于学习规则"><a href="#0x04-关于学习规则" class="headerlink" title="0x04 关于学习规则"></a>0x04 关于学习规则</h1><p>学习规则就是告诉神经网络需要以什么规则来进行学习。学习规则可以被认为由损失函数和优化算法来组成。<br>首先介绍一下损失函数，所谓损失函数也被称为误差函数，是一种表示预测值和实际值误差的函数，通常可以用交叉熵（常用于分类）或者均方差（常用于回归）来表示。<br>还有优化算法，是用来寻找最优解的方法，通常有梯度下降法等。<br>接下来最主要的就是误差反向传播算法，关于什么是误差反向传播可以参考这篇文章：<a href="http://galaxy.agh.edu.pl/~vlsi/AI/backp_t_en/backprop.html" target="_blank" rel="external">用误差反向传播方法训练神经网络</a><br>一句话概括来说，误差的反向传播是一种可以通过优化各层权重值和偏置值从而求出损失函数最优解的方法。</p><p>OK，上面只是简简单单的介绍了一下一些最重要的知识点，关于这些知识点的更详细的介绍可以看看 Andrew Ng 在 StandFord 大学的公开课，讲得很清楚。Andrew Ng 公开课的实践部分主要是使用 Matlab 或者 Octave，而接下来的本文呢，将介绍一下 Python 上的机器学习库：Keras 和 TensorFlow。</p><h1 id="0x05-使用-Keras-训练一个人工神经网络"><a href="#0x05-使用-Keras-训练一个人工神经网络" class="headerlink" title="0x05 使用 Keras 训练一个人工神经网络"></a>0x05 使用 Keras 训练一个人工神经网络</h1><p>首先简单介绍一下 Keras。 Keras 是一个经过高层次抽象的人工神经网络框架，使用 python 编写，可以使用 TensorFlow 作为后端。它封装了一些方法来供用户调用，对于初学者来说构建网络十分方便快捷，构建网络的代码如下：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</div><div class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense, Dropout</div><div class="line"><span class="keyword">from</span> keras.optimizers <span class="keyword">import</span> Nadam</div><div class="line"><span class="keyword">import</span> keras.backend <span class="keyword">as</span> K</div><div class="line"></div><div class="line"><span class="comment"># # 定义网络类型，此处为全连接型</span></div><div class="line">model = Sequential()</div><div class="line"></div><div class="line">filename = <span class="string">'my_model'</span></div><div class="line">activation_name = <span class="string">'ReLU'</span></div><div class="line">model.add(Dense(units=<span class="number">36</span>, input_dim=x_train.shape[<span class="number">1</span>], activation=activation_name))</div><div class="line">model.add(Dense(units=<span class="number">18</span>, activation = activation_name))</div><div class="line">model.add(Dense(units=<span class="number">1</span>, activation = <span class="string">'softmax'</span>))</div><div class="line"></div><div class="line"><span class="comment"># # 模型编译，指定 loss 就是上面提到的损失函数，而优化算法为 Nadam</span></div><div class="line">model.compile(loss=<span class="string">'mean_squared_error'</span>, optimizer=Nadam())</div><div class="line"><span class="comment"># # 模型训练，指定输入和输出、训练次数、以及分批训练时每批的数据量大小</span></div><div class="line">model.fit(x_train, y_train, epochs=<span class="number">618</span>, batch_size=<span class="number">61940</span>)</div><div class="line"><span class="comment"># # 保存模型</span></div><div class="line">model.save(filename+<span class="string">".h5"</span>)</div><div class="line"><span class="comment"># # 如果后端是 tf 的话，也可以保存神经网络的 TF 计算图</span></div><div class="line">tf.train.write_graph(K.get_session().graph_def, path, filename+<span class="string">".pb"</span>, <span class="keyword">False</span>)</div></pre></td></tr></table></figure><p></p><p>只需要上面这几行代码，我们就训练出了一个神经网络，而网络的训练的具体效果，可以通过下面的函数来查看：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># # 指定测试集，使用上面定义的损失函数来评估网络的效果</span></div><div class="line">score = model.evaluate(x_test, y_test, batch_size=<span class="number">10000</span>)</div></pre></td></tr></table></figure><p></p><p>看看，核心代码只是 model.add 和 model.compile 和 model.fit 三步而已。<br>训练后的网络，通过 model.predict 就可以获取它的输出，而再用一个函数封装一下，就可以作为一个函数来使用。同时，因为一个训练好的网络已经自动提取了特征，我们可以通过输出它的权重值来分析输入和输出之间的关系，而不需要像以前一样自己多次地猜测和实验。<br>构建一个网络本来就不应该是难事，现在有 Keras 和 TensorFlow 这类工具，构建网络就更简单了。现在的难题是：数据获取和特诊提取。</p><h1 id="0x06-Python-常用的训练数据预处理工具"><a href="#0x06-Python-常用的训练数据预处理工具" class="headerlink" title="0x06 Python 常用的训练数据预处理工具"></a>0x06 Python 常用的训练数据预处理工具</h1><p><code>scikit-learn</code> 是一个基于 Numpy、Scipy 和 matplotlib 的机器学习库。其中包含了常用的数据预处理库 <code>Preprocessing</code>，例子如下：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing <span class="keyword">as</span> preproc</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="comment"># 使用 preprocessing.train_test_spilt 来产生一组训练集和测试集</span></div><div class="line"><span class="comment"># 其中 data 是一个 numpy 数组</span></div><div class="line">X_train, X_test, y_train, y_test = preproc.train_test_split(data, labels, test_size=<span class="number">0.3</span>, random_state=<span class="number">47</span>)</div><div class="line">np.save(np_save + <span class="string">"X_train.npy"</span>, X_train)</div><div class="line">np.save(np_save + <span class="string">"X_test.npy"</span>, X_test)</div><div class="line">np.save(np_save + <span class="string">"y_train.npy"</span>, y_train)</div><div class="line">np.save(np_save + <span class="string">"y_test.npy"</span>, y_test)</div><div class="line">np.save(np_save + <span class="string">"X_total.npy"</span>, data)</div><div class="line">np.save(np_save + <span class="string">"y_total.npy"</span>, labels)</div><div class="line"></div><div class="line"><span class="comment"># 注意：此时数据不会被标准化，所以后期在使用数据的时候需要调用标准化方法</span></div><div class="line">x_train = np.load(np_save + <span class="string">"X_train.npy"</span>)</div><div class="line">y_train = np.load(np_save + <span class="string">"y_train.npy"</span>)</div><div class="line">x_test = np.load(np_save + <span class="string">"X_test.npy"</span>)</div><div class="line">y_test = np.load(np_save + <span class="string">"y_test.npy"</span>)</div><div class="line">x_total = np.load(np_save + <span class="string">"X_total.npy"</span>)</div><div class="line">y_total = np.load(np_save + <span class="string">"y_total.npy"</span>)</div><div class="line">scaler_x = preproc.MinMaxScaler().fit(x_total)</div><div class="line">x_train = scaler_x.transform(x_train)</div><div class="line">x_test = scaler_x.transform(x_test)</div><div class="line">scaler_y = preproc.MinMaxScaler().fit(y_total)</div><div class="line">y_train = scaler_y.transform(y_train)</div><div class="line">y_test = scaler_y.transform(y_test)</div></pre></td></tr></table></figure><p></p><p>神经网络并不是万能的，通常说来有一些和问题相关性很强的技术难点，这些需要自己克服。<br>好了，本期的介绍大致到这里，去 Kaggle 或者随便哪里找个数据集练练手吧，试一下你就知道难点在哪里了。</p><h1 id="0x07-一些强烈推荐的相关资料"><a href="#0x07-一些强烈推荐的相关资料" class="headerlink" title="0x07 一些强烈推荐的相关资料"></a>0x07 一些强烈推荐的相关资料</h1><p><a href="http://ufldl.stanford.edu/wiki/index.php/Main_Page" target="_blank" rel="external">Ufldl</a><br><a href="https://hit-scir.gitbooks.io/neural-networks-and-deep-learning-zh_cn/" target="_blank" rel="external">神经网络和深度学习</a><br><a href="http://open.163.com/special/opencourse/machinelearning.html" target="_blank" rel="external">斯坦福大学公开课：机器学习课程</a><br><a href="https://keras.io/" target="_blank" rel="external">Keras Documentation</a><br><a href="http://scikit-learn.org/" target="_blank" rel="external">scikit-learn</a><br><a href="https://www.tensorflow.org/" target="_blank" rel="external">TensorFlow</a><br><a href="https://blog.keras.io/keras-as-a-simplified-interface-to-tensorflow-tutorial.html" target="_blank" rel="external">Keras as a simplified interface to TensorFlow</a><br><a href="http://playground.tensorflow.org" target="_blank" rel="external">A Neural Network Playground for Visually Understanding ANN</a></p><h2 id="关于卷积神经网络的简单介绍"><a href="#关于卷积神经网络的简单介绍" class="headerlink" title="关于卷积神经网络的简单介绍"></a>关于卷积神经网络的简单介绍</h2><p><a href="https://www.zhihu.com/question/39022858" target="_blank" rel="external">知乎上的讨论</a><br><a href="http://scs.ryerson.ca/~aharley/vis/conv/" target="_blank" rel="external">卷积神经网络对于 MNIST 数据集的分层可视化</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;So the LORD God formed the man from the dust of the ground, breathed life into his lungs, and the man became a living being.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;本文主要介绍笔者在进行数学建模时使用的神经网络和机器学习的部分内容。&lt;/p&gt;
    
    </summary>
    
    
      <category term="神经网络" scheme="http://blog.superyoung.win/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
      <category term="机器学习" scheme="http://blog.superyoung.win/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="优化问题" scheme="http://blog.superyoung.win/tags/%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98/"/>
    
      <category term="优化算法" scheme="http://blog.superyoung.win/tags/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/"/>
    
      <category term="模拟退火算法" scheme="http://blog.superyoung.win/tags/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB%E7%AE%97%E6%B3%95/"/>
    
      <category term="遗传算法" scheme="http://blog.superyoung.win/tags/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/"/>
    
      <category term="Python" scheme="http://blog.superyoung.win/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>数据分析——数据预处理</title>
    <link href="http://blog.superyoung.win/2017/04/09/learning_data_analysis_with_python/about_data_preprocessing/"/>
    <id>http://blog.superyoung.win/2017/04/09/learning_data_analysis_with_python/about_data_preprocessing/</id>
    <published>2017-04-09T01:40:53.000Z</published>
    <updated>2017-05-31T01:00:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文的主要内容是笔者在进行数学建模分析数据时遇到的预处理问题以及解决方案。</p><p>本文预先假定读者熟悉 python 和其中的 pandas 框架，如果不熟悉看看官方文档就好。</p><a id="more"></a><h1 id="0x00-总览"><a href="#0x00-总览" class="headerlink" title="0x00 总览"></a>0x00 总览</h1><p>拿到一堆数据，显而易见，首先要对数据进行一些观察，比如说查看分布情况、查看是否有缺失或异常值、是否有噪声等等；以及处理，比如说处理异常值和缺失值、对数据进行降噪等等……</p><p>观察到需要处理的值后，就要确定处理的方法</p><ul><li>缺失值的处理一般有拟合、回归算法（可以参考图像处理中的插值以及核回归算法）。</li><li>异常值的处理一般分成大类有：物理判别法和统计判别法，物理判别法就是指人为按照经验划定一条线，超过这条线的则认定为异常值，所以物理判别法这里不讲，主要讲讲统计判别法。</li><li>噪声的处理可以用：傅里叶变换（空间域-&gt;频率域）、小波变换（空间域-&gt;时频域）后滤波来实现，一般以小波滤波为优先。</li></ul><p>而笔者因为在写这篇文章的时候，面对的情况是不需要处理缺失值的，所以还没有具体尝试过处理缺失值的情况。因此这篇文章主要介绍的是：处理异常值和降噪。</p><h1 id="0x01-异常值的统计判别法"><a href="#0x01-异常值的统计判别法" class="headerlink" title="0x01 异常值的统计判别法"></a>0x01 异常值的统计判别法</h1><p>使用统计判别法的时候有两个要注意的点：</p><ol><li>去真：将本来属于该总体的、出现的概率小的、第二种情况的异常值判断出来舍去，就会犯错误。</li><li>存伪：不属于该总体但数值又和该总体平均值接近的数据被抽样抽出来，统计检验方法判断不出它是异常值，就会犯另一种错误。</li></ol><p>常用的统计判别法：</p><ul><li>拉依达准则</li><li>肖维勒准则</li><li>狄克逊准则</li><li>t检验(罗马诺夫斯基准则)</li><li>格拉布斯准则</li></ul><p>接下来分别进行详细介绍：</p><h3 id="拉依达准则"><a href="#拉依达准则" class="headerlink" title="拉依达准则"></a>拉依达准则</h3><p>其依据是，总体分布为正态分布的数据，其数据 <code>P( |x-u| &gt; 3𝝈 ) &lt; 0.003</code><br>u 为期望，𝝈 为标准差</p><p>所以，拉依达准则只需要计算当前值和期望的差是否大于3倍的标准差即可，非常简单。但是这个方法对数据为正态分布的要求比较高，而且不能检验样本量较小的情 况。所以后来使用较少。</p><ul><li>肖维勒准则 <code>|vi| = |x - u| &gt; Zc 𝝈</code><br>Zc是一个与测量次数相关的系数，可以查表获取。<br>改善了拉依达准则，但是因为没有固定的概率意义，后来使用得也比较少。</li></ul><p>对了这里介绍一下，关于异常值和是否需要剔除的常用标准（具体标准 的还是要按照数据来）</p><blockquote><p>与平均值的偏差超过三倍标准差的测定值，称为高度异常的异常值。在处理数据时，应剔除高度异常的异常值。异常值是否剔除，视具体情况而定。在统计检验时，指定为检出异常值的显著性水平α=0.05，称为检出水平；指定为检出高度异常的异常值的显著性水平α=0.01，称为舍弃水平，又称剔除水平(reject level)。</p></blockquote><h3 id="狄克逊准则"><a href="#狄克逊准则" class="headerlink" title="狄克逊准则"></a>狄克逊准则</h3><p>狄克逊准则是通过极差比判定和剔除异常数据。又称为 Q 检验法。<br>该准则认为异常数据应该是最大数据和最小数据，因此该其基本方法是将数据排序，检验最大数据和最小数据是否异常数据。</p><ul><li>其操作步骤是：<ol><li>排序</li><li>计算 f = (x(n)-x(n-1)) / (x(n)-x(1)) 或者 (x(2)-x(1)) / (x(n)-x(1))</li><li>根据狄克逊系数表，将 f 和 f(n, α)比较，若 f &gt; f(n, α) 则判定为异常数据<br>思路可以，但是如果离群值点有多个并且相近的话，比较难用这个方法处理。</li></ol></li></ul><h1 id="t-检验"><a href="#t-检验" class="headerlink" title="t 检验"></a>t 检验</h1><p>t检验准则与狄克逊准则相似，也是检验最大数据和最小数据。</p><ul><li>步骤：<ol><li>排序</li><li>对最大数据和最小数据分别计算 |x-u| ，如果 &gt; K(n, α)𝝈 则。判定为异常数据</li><li>注意其中的 u 和 𝝈 是不包括最大和最小值的均值和标准差，K(n, α) 也通过查表得到。</li></ol></li></ul><h3 id="格拉布斯准则"><a href="#格拉布斯准则" class="headerlink" title="格拉布斯准则"></a>格拉布斯准则</h3><p>格拉布斯准则是在未知总体标准差情况下，对正态样本或接近正态样本异常值的一种判别方法。<br>格拉布斯准则理论较严密，概率意义明确，可用于严格要求的场合，特别的，当n=20-100时，判别效果较好。</p><ul><li>其原理是：<br>某个测量值的残余误差 <code>|vi|= | x - u | &gt; T 𝝈</code> ，则判断此值中含有较大误差, 应予剔除。<br>T 值与重复测量次数 n 和置信概率 α 均有关，因此格拉布斯准则是比较好的判定准则。T 值可通过查表得到</li><li>采用格拉布斯方法判定异常数据的过程如下:<ol><li>选定危险率α<br>α是一个较小的百分数，例如1%，2.5%，5%，它 是采用格拉布斯方法判定异常数据出现误判的几率。</li><li>计算T值<br>如果x是可疑数据，则令 T = (x-u)/𝝈<br>格拉布斯准则有开源的 python 库，已经实现了其算法，我们可以直接用<br>首先安装该库：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo pip install outliers_util</div></pre></td></tr></table></figure></li></ol></li></ul><p>然后在 Python 代码中做如下操作<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> outliers <span class="keyword">import</span> smirnov_grubbs <span class="keyword">as</span> grubbs</div><div class="line"><span class="comment"># 1. 处理并且返回剔除后的结果集合</span></div><div class="line">result = grubbs.test(data_list, alpha=<span class="number">0.998</span>)</div><div class="line"><span class="comment"># 2. 处理并且返回异常值的 index 集合</span></div><div class="line">result_index = []</div><div class="line">result_index.append(grubbs.two_sided_test_indices(data_list, alpha=<span class="number">0.998</span>))</div><div class="line"><span class="comment">#    使用 append() 的时候，返回值将是一个嵌套列表，故将其压平</span></div><div class="line">result_index = sum(result_index, [])</div></pre></td></tr></table></figure><p></p><h1 id="0x02-噪声的处理"><a href="#0x02-噪声的处理" class="headerlink" title="0x02 噪声的处理"></a>0x02 噪声的处理</h1><p>一般情况小波降噪即可达到需要的程度，而且可以通过参数进行细致的调节。python 小波变换一般使用 pywt 库：</p><ul><li><p>安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install PyWavelets</div></pre></td></tr></table></figure></li><li><p>import</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pywt</div><div class="line"><span class="comment"># 单层分解的话，可以使用官方文档 tutorial 中提到的函数：</span></div><div class="line">pywt.dwt()</div><div class="line"><span class="comment"># 而进行多层分解的话，使用下面的函数</span></div><div class="line">coeff = pywt.wavedec()</div><div class="line"><span class="comment"># 重构使用waverec()</span></div><div class="line">result = pywt.waverec()</div></pre></td></tr></table></figure></li></ul><p>以上函数具体的自己上官方手册查咯，这里不赘述了。</p><h3 id="小波降噪的步骤："><a href="#小波降噪的步骤：" class="headerlink" title="小波降噪的步骤："></a>小波降噪的步骤：</h3><ol><li><p>小波函数的选择</p><ol><li><p>正交性：</p><p>保持小波系数间的不相关性，提高除噪性能</p></li><li><p>紧支撑性：</p><p>紧支撑宽度越小，小波的局部分辨能力越好，除噪越精细</p></li><li><p>消失矩：</p><p>消失矩的特性使小波展开时消去信号的高阶平滑部分，因而小波变换只反映函数的高阶变换部分，从而反映信号奇异性的能力强。</p></li><li><p>对称性：</p><p>越对称的小波，在经过小波变换后，其偏差可能越小，因而有利于除噪后信号的恢复和重建。</p><p>因此，dbN(即Daubechies系列小波)、symN(Symlets系列小波)、coifN(Coiflet系列小波)这些系列的小波都可多做考量。</p></li></ol></li><li><p>阈值的确定</p><p>阈值的确定主要有以下几条准则：</p><ol><li><p>无偏风险估计准则(rigrsure)</p><p>基于Stein的无偏似然估计原理的自适应阈值选择方法。对每个阈值求出对应的风险值，选取风险最小的阈值。</p></li><li><p>固定阈值准则(sqtwolog)</p><p>设n为小波系数向量长度，则对应的阈值为：<code>Tr = sqrt(2*log(n))</code></p></li><li><p>混合准则(heursure)</p><p>它是rigrsure和sqtwolog准则的混合，当信噪比很低时，rigrsure准则估计有很大噪声，这时采用固定阈值。其阈值计算方法为：首先判断两个变量 Eta 和 Crit 的大小</p></li><li><p>极大极小准则(minimaxi)</p></li></ol></li><li><p>分解层次的确定</p><ul><li>根据多分辨率分析理论，高层分解的小波系数对应的是低频部分，而低频部分主要由信号构成。因此分解层次越高，去掉的低频成分越多，去噪效果越明显，但失真度也增大。为保守起见，分解层次不宜太高，最大不超过5层。对波动性更强的序列如收益序列，一般不超过3层。</li></ul></li></ol><h3 id="小波降噪实例（Python-实现）"><a href="#小波降噪实例（Python-实现）" class="headerlink" title="小波降噪实例（Python 实现）"></a>小波降噪实例（Python 实现）</h3><pre><code><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">wt</span><span class="params">(data, keyname, wavefunc, level, m, n)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    小波降噪函数</div><div class="line">    - level: 分解层数；</div><div class="line">    - data: 保存列表类型的字典；</div><div class="line">    - keyname: 键名；</div><div class="line">    - index_list: 待处理序列；</div><div class="line">    - wavefunc: 选取的小波函数；</div><div class="line">    - m,n 选择进行阈值处理的小波系数层数</div><div class="line">    """</div><div class="line">    <span class="comment"># 分解</span></div><div class="line">    coeff = pywt.wavedec(data[keyname], wavefunc, mode=<span class="string">'sym'</span>, level=level)</div><div class="line">    <span class="comment"># 设置 sgn 函数</span></div><div class="line">    sgn = <span class="keyword">lambda</span> x: <span class="number">1</span> <span class="keyword">if</span> x &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">-1</span> <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></div><div class="line">    <span class="comment"># 降噪过程</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(m, n + <span class="number">1</span>):  <span class="comment"># 选取小波系数层数为 m~n 层</span></div><div class="line">        cD = coeff[i]</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(cD)):</div><div class="line">            Tr = np.sqrt(<span class="number">2</span> * np.log(len(cD)))  <span class="comment"># 计算阈值</span></div><div class="line">            <span class="keyword">if</span> cD[j] &gt;= Tr:</div><div class="line">                coeff[i][j] = sgn(cD[j]) - Tr  <span class="comment"># 使用 sgn 函数向零收缩</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                coeff[i][j] = <span class="number">0</span>  <span class="comment"># 低于阈值置零</span></div><div class="line">    <span class="comment"># 重新构建</span></div><div class="line">    denoised_data_list = my_wave_rec(coeff, wavefunc, data[keyname])</div><div class="line">    <span class="comment"># 为了避免出现负值的情况，取绝对值</span></div><div class="line">    abs_denoised_list = list(map(<span class="keyword">lambda</span> x: abs(x), denoised_data_list))</div><div class="line">    <span class="comment"># 返回降噪结果</span></div><div class="line">    <span class="keyword">return</span> abs_denoised_list</div></pre></td></tr></table></figure>
</code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li>中国科学技术大学统计与金融系 - 金百锁副教授的课件： <a href="http://staff.ustc.edu.cn/~jbs/chapt3.pdf" target="_blank" rel="external">第三章统计数据的预处理</a></li><li>优矿 - fyiqi： <a href="https://uqer.io/community/share/57175736228e5b82757f53e2" target="_blank" rel="external">时间序列的小波去噪</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文的主要内容是笔者在进行数学建模分析数据时遇到的预处理问题以及解决方案。&lt;/p&gt;&lt;p&gt;本文预先假定读者熟悉 python 和其中的 pandas 框架，如果不熟悉看看官方文档就好。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://blog.superyoung.win/tags/Python/"/>
    
      <category term="异常值" scheme="http://blog.superyoung.win/tags/%E5%BC%82%E5%B8%B8%E5%80%BC/"/>
    
      <category term="缺失值" scheme="http://blog.superyoung.win/tags/%E7%BC%BA%E5%A4%B1%E5%80%BC/"/>
    
      <category term="噪声" scheme="http://blog.superyoung.win/tags/%E5%99%AA%E5%A3%B0/"/>
    
      <category term="小波" scheme="http://blog.superyoung.win/tags/%E5%B0%8F%E6%B3%A2/"/>
    
      <category term="降噪" scheme="http://blog.superyoung.win/tags/%E9%99%8D%E5%99%AA/"/>
    
      <category term="Wavelet" scheme="http://blog.superyoung.win/tags/Wavelet/"/>
    
      <category term="Grubbs" scheme="http://blog.superyoung.win/tags/Grubbs/"/>
    
  </entry>
  
  <entry>
    <title>关于长时间伏案工作和学习的经验</title>
    <link href="http://blog.superyoung.win/2017/04/02/notes/about_working/"/>
    <id>http://blog.superyoung.win/2017/04/02/notes/about_working/</id>
    <published>2017-04-02T12:37:00.000Z</published>
    <updated>2017-04-02T13:05:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>多读书，多看报，少吃零食，多睡觉！</p><a id="more"></a><p>最近总是长时间对着电脑学习和工作，感觉皮肤和身体状况都差了好多。定期的运动呢是有的，但是这并不能解决工作时的状态不佳问题。有人建议说定时休息，去茶水间喝喝水或者跟别人聊聊天。但是我个人的工作习惯是解决一个问题才休息，毕竟重新集中精力很难、非常难。但是其实吧，这种态度完全是错误的，最优解还是定时休息，番茄工作法建议半个小时休息5分钟，而按照我个人的实践来说，一般以一到两个小时休息十五分钟到半个小时为最佳。因为</p><ol><li>半个小时往往并不能解决一个问题；</li><li>休息五分钟并不能放松；</li><li>重新进入状态花费的时间可能更长；</li><li>而休息十五分钟到半个小时的话，可以花费其中的一部分休息时间让自己做好工作准备；</li><li>况且工作时一旦进入心流状态，肯定会持续超过半个小时的，心流状态难得，实在不忍心打断；</li></ol><p>所以不管怎么说，定时休息是必须的。不要在一个问题上工作太长时间，如果长时间无法解决一个问题的话，说明思路不对，而且长时间面对一个问题很容易让自己钻牛角尖，放松的时候你的思路会更加扩散，反而更有利于解决问题，自己的压力也能减轻一点。</p><p>但是我这个人呢，习惯就是这样，坐下来就不想动，相信很多人也和我一样。那难道就没办法了吗？有的。有一个办法，也算是一个工作的时候能遵守的原则，就是：</p><blockquote><p>正常情况下，如果手边没有茶水，我是不会碰电脑/开始工作的<br>┑(￣Д ￣)┍</p></blockquote><p>原因嘛就是，边工作边喝茶，喝完茶过了一段时间自然而然想去上厕所。喝茶呢一个可以保护自己的皮肤状态和体液平衡，另一个原因呢尿意会自动逼你站起来走走，一旦站起来，自然就会放松一下，而且走走正好可以扩展一下思路。</p><p>以上，献给跟我一样工作起来就不能频繁走动的人。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;多读书，多看报，少吃零食，多睡觉！&lt;/p&gt;
    
    </summary>
    
    
      <category term="Working" scheme="http://blog.superyoung.win/tags/Working/"/>
    
      <category term="Experience" scheme="http://blog.superyoung.win/tags/Experience/"/>
    
  </entry>
  
  <entry>
    <title>关闭 macOS 的 Spotlight 功能</title>
    <link href="http://blog.superyoung.win/2017/03/27/learning_macos_command/disable_spotlight_in_macos/"/>
    <id>http://blog.superyoung.win/2017/03/27/learning_macos_command/disable_spotlight_in_macos/</id>
    <published>2017-03-27T07:17:44.000Z</published>
    <updated>2017-10-01T11:16:33.590Z</updated>
    
    <content type="html"><![CDATA[<p><code>不建议</code> 关闭 Spotlight 服务！ 因为 Alfred 依赖于 Spotlight 服务建立起来的索引。</p><a id="more"></a><h2 id="unload-metadata-模块："><a href="#unload-metadata-模块：" class="headerlink" title="unload metadata 模块："></a>unload metadata 模块：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># unload</div><div class="line">sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.metadata.mds.plist</div><div class="line"># load</div><div class="line">sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.metadata.mds.plist</div></pre></td></tr></table></figure><p>注意，一旦 unload metadata 模块，系统的索引功能也会失效，也就是说索引功能不能通过以下命令开启和关闭。而且这时候 Alfred 和 Spotlight 都将不能使用搜索文件的功能。</p><h2 id="关闭索引："><a href="#关闭索引：" class="headerlink" title="关闭索引："></a>关闭索引：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># turn off:</div><div class="line">sudo mdutil -a -i off</div><div class="line"># turn on</div><div class="line">sudo mdutil -a -i on</div></pre></td></tr></table></figure><p>以下内容摘自 Alfred 的 troubleshooting：</p><blockquote><p>Q: Can Alfred work without Spotlight enabled?</p><p>A: Alfred relies on the same OS X metadata index as Spotlight. As such, it’s important for you to let Spotlight run on your Mac to maintain an index of the files on it. Turning off Spotlight indexing will still allow you to use Alfred as a web launcher but you’ll no longer be able to find files on your Mac.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;不建议&lt;/code&gt; 关闭 Spotlight 服务！ 因为 Alfred 依赖于 Spotlight 服务建立起来的索引。&lt;/p&gt;
    
    </summary>
    
    
      <category term="macOS" scheme="http://blog.superyoung.win/tags/macOS/"/>
    
      <category term="Spotlight" scheme="http://blog.superyoung.win/tags/Spotlight/"/>
    
      <category term="OS X" scheme="http://blog.superyoung.win/tags/OS-X/"/>
    
  </entry>
  
  <entry>
    <title>把 Gcc / G++ 的错误重定向输出到文件</title>
    <link href="http://blog.superyoung.win/2017/03/23/learning_bash/redirect_gcc_error_output_to_file/"/>
    <id>http://blog.superyoung.win/2017/03/23/learning_bash/redirect_gcc_error_output_to_file/</id>
    <published>2017-03-23T05:19:34.000Z</published>
    <updated>2017-04-05T06:54:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过管道，重定向 gcc 的错误输出到文件<br><a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># compile and output error messages to log file:</div><div class="line">    g++ -o a *.cpp 2&gt;build_err.log</div></pre></td></tr></table></figure><ul><li>因为 g++ 使用了错误流（而不是标准输出流）来输出错误信息，所以需要制定上面的<code>2</code>来重定向 g++ 的错误流，若不指定，将会尝试重定向标准输出流，而标准输出流往往没有任何内容的。</li><li><code>&gt;</code> 是重定向符，借助它才能将向屏幕的输出流重定向到指定文件</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过管道，重定向 gcc 的错误输出到文件&lt;br&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://blog.superyoung.win/tags/Linux/"/>
    
      <category term="Shell" scheme="http://blog.superyoung.win/tags/Shell/"/>
    
      <category term="GNU" scheme="http://blog.superyoung.win/tags/GNU/"/>
    
      <category term="GCC" scheme="http://blog.superyoung.win/tags/GCC/"/>
    
      <category term="G++" scheme="http://blog.superyoung.win/tags/G/"/>
    
      <category term="Redirect" scheme="http://blog.superyoung.win/tags/Redirect/"/>
    
      <category term="log" scheme="http://blog.superyoung.win/tags/log/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 中 DATE, DATETIME 和 TIMESTAMP 的异同</title>
    <link href="http://blog.superyoung.win/2017/03/20/learning_mysql/difference_date_datetime_timestamp/"/>
    <id>http://blog.superyoung.win/2017/03/20/learning_mysql/difference_date_datetime_timestamp/</id>
    <published>2017-03-20T03:10:15.000Z</published>
    <updated>2017-03-20T08:15:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章介绍了<code>DATE</code>, <code>DATETIME</code> 和 <code>TIMESTAMP</code> 的相似点和不同点。</p><a id="more"></a><p><code>DATE</code> 类型被用作表示日期，而不包括时间部分。 MySQL 用’YYYY-MM-DD’格式检索和展示 DATE 值。支持范围从’1000-01-01’到’9999-12-31’</p><p><code>DATETIME</code> 类型用来保存日期和时间。MySQL 以’YYYY-MM-DD HH:MM:SS’ 格式处理DATETIME 类型。范围从’1000-01-01 00:00:00’ 到 ‘9999-12-31 23:59:59’</p><p><code>TIMESTAMP</code> 类型也用来表示时间和日期。 TIMESTAMP 表示范围是：‘1970-01-01 00:00:01’ 到 ‘2038-01-19 03:14:07’ UTC。</p><p>MySQL 在存储 TIMESTAMP 格式的值的时候，会把它从当前时区转换成 UTC 时区，然后在处理的时候把它从 UTC 时区转换回当前时区。而其他类型（比如 DATETIME）不会发生这样的转换。默认情况下，每个链接的当前时区是服务器所在的时区。但是每个链接可以自定义自己的时区。只要时区设置是同一个常数，你就可以获取到你存入的准确时间。所以如果你在存入 TIMESTAMP 值后更改了时区，再取回数据，这些被取回的数据将会和你存入的不同。详情参见 <a href="https://dev.mysql.com/doc/refman/5.5/en/time-zone-support.html" target="_blank" rel="external">Section 10.6, “MySQL Server Time Zone Support”</a></p><p><code>TIMESTAMP</code> 数据可以自动初始化和更新当前日期和时间。详情参见 <a href="https://dev.mysql.com/doc/refman/5.5/en/timestamp-initialization.html" target="_blank" rel="external">Section 11.3.5, “Automatic Initialization and Updating for TIMESTAMP”</a></p><p><code>DATETIME</code> 或者 <code>TIMESTAMP</code> 值可以在尾部包含小数形式的秒，精确到毫秒级（6位）。虽然这些小数部分可以被识别，但是在存储入 DATETIME 或者 TIMESTAMP 的字段中的时候会被丢弃。</p><p>无效的 DATE，DATETIME 或者 TIMESTAMP 值将会被转换成对应类型的 “零” （’0000-00-00’ or ‘0000-00-00 00:00:00’）。</p><p>注意这些特定的属性在 MySQL 中的解释：</p><ul><li><p>MySQL 支持一些 “便利格式”，也就是在把一个分隔符，有时候这些便利语法也可以被接受，比如，一个 <code>&#39;10:11:12</code> 可能因为 <code>:</code> 看起来像时间，但是如果被存入一个日期字段，它会被转换成对应的日期 <code>2010-11-12</code> 。而如果把值 <code>&#39;10:45:15&#39;</code> 存入日期字段，它将会被转换成 <code>&#39;0000-00-00&#39;</code> 再存入，因为 ‘45’ 不是一个有效的月份值。</p></li><li><p>服务器验证月份和日期的有效性的时候，不会仅仅验证1-12和1-31。在关闭严格模式（strict mode）的时候，不正确的值（’2004-04-31’）将会被转换成’0000-00-00’存入数据库，并伴随着一个警告。而当打开严格模式的时候，将不会存入，并产生一个错误。而如果你要让服务器接受这样不正确的值，你需要打开 <code>ALLOW_INVALID_DATES</code>。</p></li><li><p>MySQL 不接受包含 0 的或者无效的 TIMESTAMP 值。唯一的例外是 ‘0000-00-00 00:00:00’</p></li><li><p><code>CAST()</code> 会把 TIMESTAMP 转换成字符串。详情参见 <a href="https://dev.mysql.com/doc/refman/5.7/en/cast-functions.html" target="_blank" rel="external">Section 12.10, “Cast Functions and Operators”</a></p></li><li><p>Dates containing two-digit year values are ambiguous because the century is unknown. MySQL interprets two-digit year values using these rules:</p></li><li>当不指定年份的前两位的时候，为了避免二义性，MySQL 将会这样做：<ul><li>00-69 将会被转化为 2000-2069</li><li>70-99 将会被转化为 1970-1999</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章介绍了&lt;code&gt;DATE&lt;/code&gt;, &lt;code&gt;DATETIME&lt;/code&gt; 和 &lt;code&gt;TIMESTAMP&lt;/code&gt; 的相似点和不同点。&lt;/p&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://blog.superyoung.win/tags/MySQL/"/>
    
      <category term="DATE" scheme="http://blog.superyoung.win/tags/DATE/"/>
    
      <category term="DATETIME" scheme="http://blog.superyoung.win/tags/DATETIME/"/>
    
      <category term="TIMESTAMP" scheme="http://blog.superyoung.win/tags/TIMESTAMP/"/>
    
      <category term="Difference" scheme="http://blog.superyoung.win/tags/Difference/"/>
    
  </entry>
  
  <entry>
    <title>使用 Which 命令查看当前执行的命令所在路径</title>
    <link href="http://blog.superyoung.win/2017/03/20/learning_bash/determined_which_command_your_are_running/"/>
    <id>http://blog.superyoung.win/2017/03/20/learning_bash/determined_which_command_your_are_running/</id>
    <published>2017-03-20T02:43:01.000Z</published>
    <updated>2017-04-05T06:53:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>有时候可能需要知道某个命令执行的程序所在的具体路径，特别是当你的程序有多个版本的时候，接下来要介绍的这个命令就非常重要了。<br>这个命令就是 which 命令，简单来说，其用法为： <code>which [-as] program</code></p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ man which</div><div class="line"></div><div class="line">WHICH(1)             BSD General Commands Manual             WHICH(1)</div><div class="line"></div><div class="line">NAME</div><div class="line">     which -- locate a program file in the user&apos;s path</div><div class="line"></div><div class="line">SYNOPSIS</div><div class="line">     which [-as] program ...</div><div class="line"></div><div class="line">DESCRIPTION</div><div class="line">     which 工具接收一个或几个命令名字，然后搜索每个可执行文件的路径</div><div class="line"></div><div class="line">     The following options are available:</div><div class="line"></div><div class="line">     -a      列出所有可执行文件，而不是只列出第一个可执行文件（可以用来查看已安装的某个应用的所有版本）</div><div class="line"></div><div class="line">     -s      无输出，当可执行文件存在的时候返回 `0`，不存在的时候返回 `1`。</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时候可能需要知道某个命令执行的程序所在的具体路径，特别是当你的程序有多个版本的时候，接下来要介绍的这个命令就非常重要了。&lt;br&gt;这个命令就是 which 命令，简单来说，其用法为： &lt;code&gt;which [-as] program&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://blog.superyoung.win/tags/Linux/"/>
    
      <category term="Shell" scheme="http://blog.superyoung.win/tags/Shell/"/>
    
      <category term="Command" scheme="http://blog.superyoung.win/tags/Command/"/>
    
      <category term="Path" scheme="http://blog.superyoung.win/tags/Path/"/>
    
      <category term="which" scheme="http://blog.superyoung.win/tags/which/"/>
    
  </entry>
  
  <entry>
    <title>使用 Matlab 高效计算位平面图</title>
    <link href="http://blog.superyoung.win/2017/03/11/learning_matlab/caculate_bit_plane_picture/"/>
    <id>http://blog.superyoung.win/2017/03/11/learning_matlab/caculate_bit_plane_picture/</id>
    <published>2017-03-11T02:05:57.000Z</published>
    <updated>2017-03-11T05:17:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>bit-plane，就是将一张图按照各个比特位来切分以后的图，每一张位面图都是二值图。<br>为了避免与游戏中的名词<code>位面图</code>混淆，可以把bit-plane翻译成<code>位平面图</code>，而且这样更好理解。</p><p>本文章记录了使用 Matlab2016a 计算一张图的位平面图过程，以及并行功能使用过程中的一些要点。<br>Matlab 的并行工具使用起来还算简单，效率也高，按照本人<code>1.3 GHz Intel Core i5</code>测试的结果加速比大概有 1.5。</p><a id="more"></a><p>##　废话不多说，直接上代码和注释</p><ol><li><p>首先初始化 Matlab 并行池：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">% parallel pool initialization</span></div><div class="line">CoreNum = <span class="number">2</span>; <span class="comment">% core number of you computer</span></div><div class="line"><span class="keyword">if</span> <span class="built_in">isempty</span>(gcp(<span class="string">'nocreate'</span>))</div><div class="line">    parpool(<span class="string">'local'</span>, CoreNum);</div><div class="line"><span class="keyword">else</span></div><div class="line">    <span class="built_in">disp</span>(<span class="string">'parallel pool is already initialized'</span>)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></li><li><p>读取图像，并初始化用于保存结果的变量：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">% read the image by path</span></div><div class="line">im = imread(<span class="string">'/Users/yjm/Desktop/_MG_0403.jpg'</span>);</div><div class="line"><span class="comment">% show the original image</span></div><div class="line">figure, subplot(<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>), imshow(im);</div><div class="line">im = double(im);</div><div class="line"><span class="comment">% get the size</span></div><div class="line">[height, width, dropped] = <span class="built_in">size</span>(im);</div><div class="line"><span class="comment">% initialize the result matrix</span></div><div class="line">onesbitmap = <span class="built_in">ones</span>(height, width);</div><div class="line">result = [];</div></pre></td></tr></table></figure></li><li><p>开始计算：</p><blockquote><p>这里用的是 parfor 并行计算工具，用来代替原本的普通 for 循环：</p></blockquote></li></ol><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">% start caculation</span></div><div class="line">tic <span class="comment">% 计时开始</span></div><div class="line"><span class="keyword">parfor</span> v = <span class="number">1</span> : <span class="number">8</span></div><div class="line">    tic</div><div class="line">    bitmap = <span class="built_in">ones</span>(height, width);</div><div class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : height</div><div class="line">        <span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span> : width</div><div class="line">            <span class="keyword">if</span> <span class="built_in">mod</span>(<span class="built_in">floor</span>(im(<span class="built_in">i</span>,<span class="built_in">j</span>)/(<span class="number">2</span>^(v<span class="number">-1</span>))), <span class="number">2</span>) == <span class="number">0</span></div><div class="line">                bitmap(<span class="built_in">i</span>, <span class="built_in">j</span>) = <span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> </div><div class="line">                bitmap(<span class="built_in">i</span>, <span class="built_in">j</span>) = <span class="number">0</span>;</div><div class="line">            <span class="keyword">end</span></div><div class="line">        <span class="keyword">end</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">    result = [result bitmap]; <span class="comment">% append bitmap to result</span></div><div class="line">    toc</div><div class="line"><span class="keyword">end</span></div><div class="line">toc <span class="comment">% 计时结束</span></div></pre></td></tr></table></figure><blockquote><p>上面的代码中有三大要点：</p><ol><li>注意 parfor 循环中使用的变量只有两种情况：要么是局部变量，要么需要在 parfor 外分配好内存空间。并且尽量避免使用全局变量，可能会导致并行过程中的信息交换拖慢运行速度。</li><li>最内层循环的判断句 <code>if mod(floor(im(i,j)/(2^(v-1))), 2) == 0</code>，这是计算位平面图的核心算法。 自己改写成数学公式以后会很容易理解的。</li><li>其次是 <code>result = [result bitmap];</code>，这句话是把本次循环后计算出来的值增加到结果变量的最后面。</li></ol></blockquote><ol><li>展示结果：<figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">% show the result</span></div><div class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : <span class="number">8</span></div><div class="line">    <span class="comment">% show the bit-plane images, from  column  (i-1)*width+1 to i*width</span></div><div class="line">    subplot(<span class="number">3</span>,<span class="number">3</span>,<span class="built_in">i</span>+<span class="number">1</span>), imshow(result(<span class="number">1</span>: height, (<span class="built_in">i</span><span class="number">-1</span>)*width+<span class="number">1</span> : <span class="built_in">i</span>*width))</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></li></ol><blockquote><p>注意这里要自己计算出结果变量中的各个图像的边界，Matlab 不会自动把那些图像分开。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;bit-plane，就是将一张图按照各个比特位来切分以后的图，每一张位面图都是二值图。&lt;br&gt;为了避免与游戏中的名词&lt;code&gt;位面图&lt;/code&gt;混淆，可以把bit-plane翻译成&lt;code&gt;位平面图&lt;/code&gt;，而且这样更好理解。&lt;/p&gt;&lt;p&gt;本文章记录了使用 Matlab2016a 计算一张图的位平面图过程，以及并行功能使用过程中的一些要点。&lt;br&gt;Matlab 的并行工具使用起来还算简单，效率也高，按照本人&lt;code&gt;1.3 GHz Intel Core i5&lt;/code&gt;测试的结果加速比大概有 1.5。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Matlab" scheme="http://blog.superyoung.win/tags/Matlab/"/>
    
      <category term="Bit-plane" scheme="http://blog.superyoung.win/tags/Bit-plane/"/>
    
      <category term="Digital" scheme="http://blog.superyoung.win/tags/Digital/"/>
    
      <category term="Image" scheme="http://blog.superyoung.win/tags/Image/"/>
    
      <category term="Processing" scheme="http://blog.superyoung.win/tags/Processing/"/>
    
      <category term="Parallel" scheme="http://blog.superyoung.win/tags/Parallel/"/>
    
      <category term="parfor" scheme="http://blog.superyoung.win/tags/parfor/"/>
    
  </entry>
  
  <entry>
    <title>搭建你自己的 SVN 服务器</title>
    <link href="http://blog.superyoung.win/2017/03/03/version_controller/setup_svn_server/"/>
    <id>http://blog.superyoung.win/2017/03/03/version_controller/setup_svn_server/</id>
    <published>2017-03-03T15:00:39.000Z</published>
    <updated>2017-03-11T02:05:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>SVN 全称：<a href="https://subversion.apache.org" target="_blank" rel="external">Apache™ Subversion®</a> ，是一个开源的 <code>Enterprise-class centralized version control for the masses</code> 企业级中心化版本控制器。区分于 Git，它不是分布式的而是中心化的，在过去十年中也挺成功。但是在 Git 出现之后，它的光环就有点暗淡了。</p><p>好，闲话不多说，本教程将会教你如何搭建自己的 SVN 服务器</p><a id="more"></a><p>可以看看<a href="/images/set_up_svn_server/index.html">简洁版</a></p><h2 id="0x00-准备"><a href="#0x00-准备" class="headerlink" title="0x00 准备"></a>0x00 准备</h2><ol><li>你需要一台运行 Linux 或者 Unix 系列系统的计算机，并且你有其管理员权限</li><li>你需要有一个正常的网络连接</li><li>macOS 系统中请先安装 brew 包管理器</li></ol><p>本教程将以 macOS 为示例。</p><h2 id="0x01-安装-SVN"><a href="#0x01-安装-SVN" class="headerlink" title="0x01 安装 SVN"></a>0x01 安装 SVN</h2><ol><li>执行下述命令：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># CentOS</div><div class="line">sudo yum install svn</div><div class="line"># Ubuntu</div><div class="line">sudo apt-get install svn</div><div class="line"># macOS</div><div class="line">brew install svn</div></pre></td></tr></table></figure></li></ol><p>结果如下图：<br><img src="/images/setup_svn_server/01.png" alt="图1"></p><h2 id="0x02-建立-Repository"><a href="#0x02-建立-Repository" class="headerlink" title="0x02 建立 Repository"></a>0x02 建立 Repository</h2><p>执行下述命令：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 这条命令进入一个目录</div><div class="line">cd ~/testsvn/</div><div class="line"># 这条命令将会在当前目录下新建一个 Repository</div><div class="line">svnadmin create test</div></pre></td></tr></table></figure><p></p><p>结果如下图：<br><img src="/images/setup_svn_server/02.png" alt="图2"></p><h1 id="0x03-配置-Repository"><a href="#0x03-配置-Repository" class="headerlink" title="0x03 配置 Repository"></a>0x03 配置 Repository</h1><p>键入以下命令：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 修改 conf 路径下的 svnserve.conf 文件</div><div class="line">vi conf/svnserve.conf</div></pre></td></tr></table></figure><p></p><p>此时就通过 vi 打开你的<code>svnserve.conf</code>配置文件了，找到 [general] 块，你将会看到整个 general 都被注释掉了，<code>###</code> 的是介绍，<code>#</code>的是被注释掉的配置项，可以作为例子。</p><p>这里用中文翻译一下介绍吧：<br>|字段|解释|可选值|<br>|—|—|—|<br>|anon-access|控制未授权用户的权限|write、read、none|<br>|auth-access|控制已授权用户的权限|write、read、none|<br>|password-db|控制密码数据库的位置（以<code>/</code>开头为绝对路径，否则是相对路径）；<br>如果 SASL 被启用，这个文件将不会被使用。|passwd 代表默认数据库|<br>|authz-db|控制“基于路径的访问控制”数据库的位置；<br>指定的路径可能是一个与 repository 相对路径 URL <code>^/</code> 或者是一个绝对路径 URL <code>file://</code> 指向一个在 Subversion Repository 中的文本文件；<br>如果不指定，则不会有基于路径的访问控制。|authz 代表默认数据库|<br>|groups-db|控制“群组定义和每个群组的权限”文件的位置；<br>groups-db 文件和 authz-db 文件格式相同，并且groups-db应该包含一个[groups]块；<br>不过如果开启了这个选项，authzdb 文件中奖不能包含 [groups] 块。|<br>|realm|指定存储库的认证领域，他们应该有同一个密码数据库，反之亦然；<br>默认的 realm 是 repository 的 uuid|<br>|force-username-case|控制SVNServer在按照authz-db指定的规则比较用户名之前转换大小写。|upper、lower、none|<br>|hooks-env|指定一个路径到 hood script 环境配置文件，这个选项会覆盖 per-repository 的默认值，并且可以用来在单个文件中配置有多个 repositories 情况下的 hood script 环境|</p><p>介绍完以后，我们这样修改一下svnserve.conf：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[general]</div><div class="line">anon-access = none</div><div class="line">auth-access = write</div><div class="line">password-db = passwd</div><div class="line">authz-db = authz</div></pre></td></tr></table></figure><p></p><p>接下来修改 conf 下的 passwd 文件，添加两个用户名和密码，在[users] 块中加入以下内容：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root = root@Svnserver</div><div class="line">ysy = userysy</div></pre></td></tr></table></figure><p></p><p>然后修改 conf 下的 authz 文件：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[groups]</div><div class="line">admin = root # 注意这里的</div><div class="line">user = ysy</div><div class="line">[/]</div><div class="line">@admin = rw</div><div class="line">@user = r</div><div class="line">[test: /]</div><div class="line">@admin = rw</div><div class="line">@user = r</div></pre></td></tr></table></figure><p></p><p>这里首先定义了两个用户组，一个是 root，另一个是 user。</p><p>admin 中有 root 这个用户；user 中有 ysy 这个用户。然后分别给他们配置路径权限。</p><p>值得注意的是<code>[/]</code>指 testsvn 目录，而<code>[test: /]</code>指 test 目录。</p><p>基本的配置到这里已经完成，理论上我们可以启动我们的 SVN 服务器了。</p><p>但是为了安全起见，还有些事情可以做，比如说使用 <code>chown -R</code> / <code>chmod -R</code> 命令控制一下 svntest 目录的所有者和权限之类的，</p><h2 id="0x04-启动服务器"><a href="#0x04-启动服务器" class="headerlink" title="0x04 启动服务器"></a>0x04 启动服务器</h2><p>执行以下命令：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 注意：下面的 --log-file=不能使用`~`来指定当前用户的 home 目录</div><div class="line">sudo svnserve -d -r ~/testsvn --log-file=./log/svn.log</div></pre></td></tr></table></figure><p></p><p>SVN 默认使用的端口是3690，如果没冲突，这样 SVN 服务器就成功启动了。</p><p>可以用 less 命令查看上面命令指定的 log 文件，也可以像这样测试是否启动成功：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 1. 使用 ps 命令查看进程</div><div class="line">ps aux | grep svnserve</div><div class="line"># 2. 使用 Telnet 测试连接</div><div class="line">telnet localhost 3690</div><div class="line"># 3. 使用 svn 客户端测试连接</div></pre></td></tr></table></figure><p></p><h2 id="0x05-创建目录结构并导入到-SVN-Repository-中"><a href="#0x05-创建目录结构并导入到-SVN-Repository-中" class="headerlink" title="0x05 创建目录结构并导入到 SVN Repository 中"></a>0x05 创建目录结构并导入到 SVN Repository 中</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mkdir -p ~/tmp/svntmp/;</div><div class="line">cd ~/tmp/svntmp/;</div><div class="line">mkdir master dev ysy;</div><div class="line">cd ../../;</div><div class="line">svn import --username root -m &apos;init repo&apos; ~/tmp/svntmp/ svn://localhost/test</div></pre></td></tr></table></figure><p>输入用户名密码，大功告成！<br><img src="/images/setup_svn_server/03.png" alt="图3"></p><blockquote><p>如果有任何问题，可以通过 <code>--help</code> 参数来查看：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 查看 svn 的帮助信息</div><div class="line">svn --help</div><div class="line"># 查看 svn import 的帮助信息</div><div class="line">svn import --help</div></pre></td></tr></table></figure><p></p></blockquote><h2 id="0x06-最后推荐几款-GUI-的-SVN-客户端"><a href="#0x06-最后推荐几款-GUI-的-SVN-客户端" class="headerlink" title="0x06 最后推荐几款 GUI 的 SVN 客户端"></a>0x06 最后推荐几款 GUI 的 SVN 客户端</h2><ol><li>首先肯定是是跨平台的开源的 TortoiseSVN</li><li>如果在 macOS 下想有更好的体验，特别是在处理冲突或者合并源码的时候，强烈推荐 Cornerstone。</li></ol><blockquote><p>macOS 为了安全起见，默认是不允许运行苹果白名单以外签名的 app 的，运行则会报告此安装包已损坏。所以如果在 macOS 中需要运行未知来源的 app，需要输入以下命令解锁：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo xattr -rd com.apple.quarantine /Applications/theApplication.app</div></pre></td></tr></table></figure><p></p></blockquote><p>下图是 Cornerstone 的运行结果：<br><img src="/images/setup_svn_server/04.png" alt="图4"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SVN 全称：&lt;a href=&quot;https://subversion.apache.org&quot;&gt;Apache™ Subversion®&lt;/a&gt; ，是一个开源的 &lt;code&gt;Enterprise-class centralized version control for the masses&lt;/code&gt; 企业级中心化版本控制器。区分于 Git，它不是分布式的而是中心化的，在过去十年中也挺成功。但是在 Git 出现之后，它的光环就有点暗淡了。&lt;/p&gt;&lt;p&gt;好，闲话不多说，本教程将会教你如何搭建自己的 SVN 服务器&lt;/p&gt;
    
    </summary>
    
    
      <category term="Server" scheme="http://blog.superyoung.win/tags/Server/"/>
    
      <category term="Tutorial" scheme="http://blog.superyoung.win/tags/Tutorial/"/>
    
      <category term="Guide" scheme="http://blog.superyoung.win/tags/Guide/"/>
    
      <category term="服务器" scheme="http://blog.superyoung.win/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="教程" scheme="http://blog.superyoung.win/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="配置" scheme="http://blog.superyoung.win/tags/%E9%85%8D%E7%BD%AE/"/>
    
      <category term="SVN" scheme="http://blog.superyoung.win/tags/SVN/"/>
    
  </entry>
  
  <entry>
    <title>建立你自己的 Matlab 远程计算服务器</title>
    <link href="http://blog.superyoung.win/2017/03/02/learning_matlab/setup_yourself_a_remote_matlab_computation_server/"/>
    <id>http://blog.superyoung.win/2017/03/02/learning_matlab/setup_yourself_a_remote_matlab_computation_server/</id>
    <published>2017-03-02T01:44:40.000Z</published>
    <updated>2017-10-01T12:26:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>其实原理很简单，借助 ssh 服务和 Matlab 应用的二进制可执行文件即可。<br>缺点也有，不能直接显示图像处理或者绘图结果。</p><a id="more"></a><h2 id="0x00-Requirement"><a href="#0x00-Requirement" class="headerlink" title="0x00 Requirement"></a>0x00 Requirement</h2><ol><li>你需要一台能够直接访问互联网的服务器或者个人电脑</li><li>这台电脑上必须安装有 Matlab 应用和 ssh 服务。</li></ol><h2 id="0x01-Add-Matlab-Binary-to-your-PATH"><a href="#0x01-Add-Matlab-Binary-to-your-PATH" class="headerlink" title="0x01 Add Matlab Binary to your PATH"></a>0x01 Add Matlab Binary to your PATH</h2><ol><li>找到你 Matlab 的安装路径，比如我这里是 <code>/Applications/MATLAB_R2016a.app</code></li><li>找到其中的 <code>bin</code> 文件夹，记录下其路劲，比如我的是 <code>/Applications/MATLAB_R2016a.app/bin</code></li><li><p>将路径加入系统环境变量的 <code>PATH</code> 中</p><ol><li><p>Unix 下可以编辑 <code>~/.bash_profile</code> 文件（自行替换为终端启动时加载的文件），加入以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># Setup Matlab2016a Environment</div><div class="line">export PATH=&quot;$PATH:/Applications/MATLAB_R2016a.app/bin&quot;</div><div class="line">alias matlab=&apos;matlab -nojvm -nodisplay -nosplash&apos;</div></pre></td></tr></table></figure><p>然后 <code>source ~/.bash_profile</code> 即可。</p></li><li>Windows 下请自行搜索关键字 <code>系统环境变量</code>，找到 PATH 变量并 <code>加入</code> 上面的路劲，用分号隔开不同路径。</li></ol></li></ol><h2 id="0x02-ALL-Done-login-to-your-ssh-server-and-run-matlab"><a href="#0x02-ALL-Done-login-to-your-ssh-server-and-run-matlab" class="headerlink" title="0x02 ALL Done, login to your ssh server and run matlab"></a>0x02 ALL Done, login to your ssh server and run <code>matlab</code></h2><p>完成了。登录你的 ssh 服务器即可远程使用 <code>matlab</code> 命令执行科学计算。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实原理很简单，借助 ssh 服务和 Matlab 应用的二进制可执行文件即可。&lt;br&gt;缺点也有，不能直接显示图像处理或者绘图结果。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Matlab" scheme="http://blog.superyoung.win/tags/Matlab/"/>
    
      <category term="Server" scheme="http://blog.superyoung.win/tags/Server/"/>
    
      <category term="Science" scheme="http://blog.superyoung.win/tags/Science/"/>
    
      <category term="Computation" scheme="http://blog.superyoung.win/tags/Computation/"/>
    
  </entry>
  
  <entry>
    <title>搭建自己的 Git 服务器教程</title>
    <link href="http://blog.superyoung.win/2017/02/28/version_controller/setup_git_server/"/>
    <id>http://blog.superyoung.win/2017/02/28/version_controller/setup_git_server/</id>
    <published>2017-02-28T10:37:41.000Z</published>
    <updated>2017-03-03T15:01:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>本教程关于如何搭建自己的 Git 服务器，使用 Keynote 制作<br><a id="more"></a></p><p>废话不多说，教程在此：<a href="/images/set_up_git_server/index.html">传送门</a></p><p><img src="/images/setup_git_server/00.png" alt="图1"><br><img src="/images/setup_git_server/01.png" alt="图2"><br><img src="/images/setup_git_server/02.png" alt="图3"><br><img src="/images/setup_git_server/03.png" alt="图4"><br><img src="/images/setup_git_server/04.png" alt="图5"><br><img src="/images/setup_git_server/05.png" alt="图6"><br><img src="/images/setup_git_server/06.png" alt="图7"><br><img src="/images/setup_git_server/07.png" alt="图8"><br><img src="/images/setup_git_server/08.png" alt="图9"><br><img src="/images/setup_git_server/09.png" alt="图10"><br><img src="/images/setup_git_server/10.png" alt="图10"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本教程关于如何搭建自己的 Git 服务器，使用 Keynote 制作&lt;br&gt;
    
    </summary>
    
    
      <category term="Server" scheme="http://blog.superyoung.win/tags/Server/"/>
    
      <category term="Git" scheme="http://blog.superyoung.win/tags/Git/"/>
    
      <category term="Tutorial" scheme="http://blog.superyoung.win/tags/Tutorial/"/>
    
      <category term="Guide" scheme="http://blog.superyoung.win/tags/Guide/"/>
    
      <category term="服务器" scheme="http://blog.superyoung.win/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="教程" scheme="http://blog.superyoung.win/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="配置" scheme="http://blog.superyoung.win/tags/%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Ten Ways to Uniqify a List in Python</title>
    <link href="http://blog.superyoung.win/2017/02/22/learning_python/list_uniqify_and_benchmark/"/>
    <id>http://blog.superyoung.win/2017/02/22/learning_python/list_uniqify_and_benchmark/</id>
    <published>2017-02-22T08:25:41.000Z</published>
    <updated>2017-03-02T02:53:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>10 种方法让你的 python 数组中的元素保持唯一，并且探讨了其中最快的方法。<br><a id="more"></a><br><a href="https://www.peterbe.com/plog/uniqifiers-benchmark" target="_blank" rel="external">原贴在此</a></p><p>Suppose you have a list in python that looks like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'a'</span>]</div><div class="line"><span class="comment"># or like this:</span></div><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>]</div></pre></td></tr></table></figure><p>and you want to remove all duplicates so you get this result:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[<span class="string">'a'</span>,<span class="string">'b'</span>]</div><div class="line"><span class="comment"># or</span></div><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</div></pre></td></tr></table></figure><p>How do you do that? …the fastest way? I wrote a couple of alternative implementations and did a quick benchmark loop on the various implementations to find out which way was the fastest. (I haven’t looked at memory usage). The slowest function was 78 times slower than the fastest function.</p><p>However, there’s one very important difference between the various functions. Some are order preserving and some are not. For example, in an order preserving function, apart from the duplicates, the order is guaranteed to be the same as it was inputted. Eg, uniqify([1,2,2,3])==[1,2,3]</p><h2 id="Here-are-the-functions"><a href="#Here-are-the-functions" class="headerlink" title="Here are the functions:"></a>Here are the functions:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> random <span class="keyword">import</span> shuffle, randint</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">from</span> sets <span class="keyword">import</span> Set</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(seq)</span>:</span> <span class="comment"># Raymond Hettinger</span></div><div class="line">    <span class="comment"># not order preserving</span></div><div class="line">    set = &#123;&#125;</div><div class="line">    map(set.__setitem__, seq, [])</div><div class="line">    <span class="keyword">return</span> set.keys()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(seq)</span>:</span>   <span class="comment"># *********</span></div><div class="line">    <span class="comment"># order preserving</span></div><div class="line">    checked = []</div><div class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> seq:</div><div class="line">        <span class="keyword">if</span> e <span class="keyword">not</span> <span class="keyword">in</span> checked:</div><div class="line">            checked.append(e)</div><div class="line">    <span class="keyword">return</span> checked</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">(seq)</span>:</span></div><div class="line">    <span class="comment"># Not order preserving</span></div><div class="line">    keys = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> seq:</div><div class="line">        keys[e] = <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> keys.keys()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f4</span><span class="params">(seq)</span>:</span> <span class="comment"># ********** order preserving</span></div><div class="line">    noDupes = []</div><div class="line">    [noDupes.append(i) <span class="keyword">for</span> i <span class="keyword">in</span> seq <span class="keyword">if</span> <span class="keyword">not</span> noDupes.count(i)]</div><div class="line">    <span class="keyword">return</span> noDupes</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f5</span><span class="params">(seq, idfun=None)</span>:</span> <span class="comment"># Alex Martelli ******* order preserving</span></div><div class="line">    <span class="keyword">if</span> idfun <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">idfun</span><span class="params">(x)</span>:</span> <span class="keyword">return</span> x</div><div class="line">    seen = &#123;&#125;</div><div class="line">    result = []</div><div class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> seq:</div><div class="line">        marker = idfun(item)</div><div class="line">        <span class="comment"># in old Python versions:</span></div><div class="line">        <span class="comment"># if seen.has_key(marker)</span></div><div class="line">        <span class="comment"># but in new ones:</span></div><div class="line">        <span class="keyword">if</span> marker <span class="keyword">in</span> seen: <span class="keyword">continue</span></div><div class="line">        seen[marker] = <span class="number">1</span></div><div class="line">        result.append(item)</div><div class="line">    <span class="keyword">return</span> result</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f5b</span><span class="params">(seq, idfun=None)</span>:</span> <span class="comment"># Alex Martelli ******* order preserving</span></div><div class="line">    <span class="keyword">if</span> idfun <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">idfun</span><span class="params">(x)</span>:</span> <span class="keyword">return</span> x</div><div class="line">    seen = &#123;&#125;</div><div class="line">    result = []</div><div class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> seq:</div><div class="line">        marker = idfun(item)</div><div class="line">        <span class="comment"># in old Python versions:</span></div><div class="line">        <span class="comment"># if seen.has_key(marker)</span></div><div class="line">        <span class="comment"># but in new ones:</span></div><div class="line">        <span class="keyword">if</span> marker <span class="keyword">not</span> <span class="keyword">in</span> seen:</div><div class="line">            seen[marker] = <span class="number">1</span></div><div class="line">            result.append(item)</div><div class="line">            </div><div class="line">    <span class="keyword">return</span> result</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f6</span><span class="params">(seq)</span>:</span></div><div class="line">    <span class="comment"># Not order preserving</span></div><div class="line">    <span class="keyword">return</span> list(Set(seq))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f7</span><span class="params">(seq)</span>:</span></div><div class="line">    <span class="comment"># Not order preserving</span></div><div class="line">    <span class="keyword">return</span> list(set(seq))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f8</span><span class="params">(seq)</span>:</span> <span class="comment"># Dave Kirby</span></div><div class="line">    <span class="comment"># Order preserving</span></div><div class="line">    seen = set()</div><div class="line">    <span class="keyword">return</span> [x <span class="keyword">for</span> x <span class="keyword">in</span> seq <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> seen <span class="keyword">and</span> <span class="keyword">not</span> seen.add(x)]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f9</span><span class="params">(seq)</span>:</span></div><div class="line">    <span class="comment"># Not order preserving</span></div><div class="line">    <span class="keyword">return</span> &#123;&#125;.fromkeys(seq).keys()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f10</span><span class="params">(seq, idfun=None)</span>:</span> <span class="comment"># Andrew Dalke</span></div><div class="line">    <span class="comment"># Order preserving</span></div><div class="line">    <span class="keyword">return</span> list(_f10(seq, idfun))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_f10</span><span class="params">(seq, idfun=None)</span>:</span></div><div class="line">    seen = set()</div><div class="line">    <span class="keyword">if</span> idfun <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> seq:</div><div class="line">            <span class="keyword">if</span> x <span class="keyword">in</span> seen:</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            seen.add(x)</div><div class="line">            <span class="keyword">yield</span> x</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> seq:</div><div class="line">            x = idfun(x)</div><div class="line">            <span class="keyword">if</span> x <span class="keyword">in</span> seen:</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            seen.add(x)</div><div class="line">            <span class="keyword">yield</span> x</div><div class="line">            </div><div class="line">            </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f11</span><span class="params">(seq)</span>:</span> <span class="comment"># f10 but simpler</span></div><div class="line">    <span class="comment"># Order preserving</span></div><div class="line">    <span class="keyword">return</span> list(_f10(seq))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_f11</span><span class="params">(seq)</span>:</span></div><div class="line">    seen = set()</div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> seq:</div><div class="line">        <span class="keyword">if</span> x <span class="keyword">in</span> seen:</div><div class="line">            <span class="keyword">continue</span></div><div class="line">        seen.add(x)</div><div class="line">        <span class="keyword">yield</span> x</div></pre></td></tr></table></figure><p>And what you’ve all been waiting for (if you’re still reading). Here are the results:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">* f2 13.24</div><div class="line">* f4 11.73</div><div class="line">* f5 0.37</div><div class="line">f1 0.18</div><div class="line">f3 0.17</div><div class="line">f6 0.19</div><div class="line"></div><div class="line">(* order preserving)</div></pre></td></tr></table></figure><p>Clearly f5 is the “best” solution. Not only is it really really fast; it’s also order preserving and supports an optional transform function which makes it possible to do this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a=list(<span class="string">'ABeeE'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f5(a)</div><div class="line">[<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'e'</span>,<span class="string">'E'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f5(a, <span class="keyword">lambda</span> x: x.lower())</div><div class="line">[<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'e'</span>]</div></pre></td></tr></table></figure><p>Download the benchmark script here</p><h2 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h2><p>From the comments I’ve now added a couple of more functions to the benchmark. Some which don’t support uniqify a list of objects that can’t be hashed unless passed with a special hashing method. So see all the functions download the file</p><p>Here are the new results:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">* f5 10.1</div><div class="line">* f5b 9.99</div><div class="line">* f8 6.49</div><div class="line">* f10 6.57</div><div class="line">* f11 6.6</div><div class="line">f1 4.28</div><div class="line">f3 3.55</div><div class="line">f6 4.03</div><div class="line">f7 2.59</div><div class="line">f9 2.58</div></pre></td></tr></table></figure><p>So, we can draw a conclusion that f8 and f9 is the fastest way to uniqify a list<br>(f2 and f4) were too slow for this testdata.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;10 种方法让你的 python 数组中的元素保持唯一，并且探讨了其中最快的方法。&lt;br&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://blog.superyoung.win/tags/Python/"/>
    
      <category term="List" scheme="http://blog.superyoung.win/tags/List/"/>
    
  </entry>
  
  <entry>
    <title>Unit - Driver 介绍及示例</title>
    <link href="http://blog.superyoung.win/2017/02/14/learning_Rx/driver/"/>
    <id>http://blog.superyoung.win/2017/02/14/learning_Rx/driver/</id>
    <published>2017-02-14T08:16:48.000Z</published>
    <updated>2017-03-02T02:48:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>Driver 是 RxSwift 中的一个 Unit，专门设计用于控制界面操作——驱动界面。</p><a id="more"></a><h2 id="为什么这个-Unit-叫做-Driver？"><a href="#为什么这个-Unit-叫做-Driver？" class="headerlink" title="为什么这个 Unit 叫做 Driver？"></a>为什么这个 Unit 叫做 Driver？</h2><p>Driver 是为了：</p><ul><li>通过数据模型驱动 UI</li><li>通过另一个 UI 元素的改变来驱动 UI</li></ul><p>bindTo 也可以驱动 UI，但是 Driver 和 bindTo 不同，不同之处是以下三点：</p><ol><li>Driver 默认主线程执行，不需要每次通过 bindTo 手动控制线程</li><li>Driver 容易进行出错控制</li><li>Driver 默认 <code>shareReplay(1)</code><br>以上，让 Driver 控制 UI 事件更容易，而我们使用 Rx 主要也是对 UI 进行操作，所以 Driver 也属于 Rx 中比较重要的知识点。<br>具体的例子还是参考官方文档：<a href="https://github.com/ReactiveX/RxSwift/blob/master/Documentation/Units.md#driver" target="_blank" rel="external">点击这里</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Driver 是 RxSwift 中的一个 Unit，专门设计用于控制界面操作——驱动界面。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Programming" scheme="http://blog.superyoung.win/tags/Programming/"/>
    
      <category term="iOS" scheme="http://blog.superyoung.win/tags/iOS/"/>
    
      <category term="Swift" scheme="http://blog.superyoung.win/tags/Swift/"/>
    
      <category term="RxSwift" scheme="http://blog.superyoung.win/tags/RxSwift/"/>
    
      <category term="响应式" scheme="http://blog.superyoung.win/tags/%E5%93%8D%E5%BA%94%E5%BC%8F/"/>
    
      <category term="开发" scheme="http://blog.superyoung.win/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="Unit" scheme="http://blog.superyoung.win/tags/Unit/"/>
    
      <category term="Driver" scheme="http://blog.superyoung.win/tags/Driver/"/>
    
  </entry>
  
  <entry>
    <title>ReactiveX 中 Unit 的概念（RxSwift为例）</title>
    <link href="http://blog.superyoung.win/2017/02/14/learning_Rx/units-concept-in-rxswift/"/>
    <id>http://blog.superyoung.win/2017/02/14/learning_Rx/units-concept-in-rxswift/</id>
    <published>2017-02-14T08:11:40.000Z</published>
    <updated>2017-03-02T02:40:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>Unit 单元，从根本上来说，只是一个封装后的结构体。该结构体仅有一个指向可观察序列的只读属性。</p><a id="more"></a><p>本文翻译自<a href="https://github.com/ReactiveX/RxSwift/blob/master/Documentation/Units.md" target="_blank" rel="external">RxSwift 官方文档</a></p><p>观念性的东西请参考官方文档，这里就不重复了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Unit 单元，从根本上来说，只是一个封装后的结构体。该结构体仅有一个指向可观察序列的只读属性。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Programming" scheme="http://blog.superyoung.win/tags/Programming/"/>
    
      <category term="iOS" scheme="http://blog.superyoung.win/tags/iOS/"/>
    
      <category term="Swift" scheme="http://blog.superyoung.win/tags/Swift/"/>
    
      <category term="RxSwift" scheme="http://blog.superyoung.win/tags/RxSwift/"/>
    
      <category term="响应式" scheme="http://blog.superyoung.win/tags/%E5%93%8D%E5%BA%94%E5%BC%8F/"/>
    
      <category term="开发" scheme="http://blog.superyoung.win/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="Unit" scheme="http://blog.superyoung.win/tags/Unit/"/>
    
      <category term="Driver" scheme="http://blog.superyoung.win/tags/Driver/"/>
    
  </entry>
  
  <entry>
    <title>Learning Enum, Structure and Class in Swift Programming Language</title>
    <link href="http://blog.superyoung.win/2017/02/12/learning_swift/enum_struct_class_in_swift/"/>
    <id>http://blog.superyoung.win/2017/02/12/learning_swift/enum_struct_class_in_swift/</id>
    <published>2017-02-12T09:50:36.000Z</published>
    <updated>2017-02-12T09:54:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章简要介绍了 Swift 语言中 <code>enum</code>，<code>struct</code>，<code>class</code> 之间的区别</p><p><em><a href="https://www.raywenderlich.com/119881/enums-structs-and-classes-in-swift" target="_blank" rel="external">原文链接：</a></em></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章简要介绍了 Swift 语言中 &lt;code&gt;enum&lt;/code&gt;，&lt;code&gt;struct&lt;/code&gt;，&lt;code&gt;class&lt;/code&gt; 之间的区别&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.raywenderlich.com/119881/enums-structs-and-classes-in-swift&quot;&gt;原文链接：&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Programming" scheme="http://blog.superyoung.win/tags/Programming/"/>
    
      <category term="Swift" scheme="http://blog.superyoung.win/tags/Swift/"/>
    
      <category term="Difference" scheme="http://blog.superyoung.win/tags/Difference/"/>
    
      <category term="Language" scheme="http://blog.superyoung.win/tags/Language/"/>
    
      <category term="Enum" scheme="http://blog.superyoung.win/tags/Enum/"/>
    
      <category term="Struct" scheme="http://blog.superyoung.win/tags/Struct/"/>
    
      <category term="Class" scheme="http://blog.superyoung.win/tags/Class/"/>
    
  </entry>
  
  <entry>
    <title>An Introduction to Map(), flatMap(), Reduce() and Filter() in Swift</title>
    <link href="http://blog.superyoung.win/2017/02/02/learning_swift/map_reduce_filter/"/>
    <id>http://blog.superyoung.win/2017/02/02/learning_swift/map_reduce_filter/</id>
    <published>2017-02-02T06:26:48.000Z</published>
    <updated>2017-02-03T05:56:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>我曾经很好奇 map(), flatMap(), reduce() 和 filter() 函数是用来做什么的，是怎么实现的。在我阅读了 Swift 源码还有一些文章以后，我觉得是时候分享一下了。</p><p>I have been wondering a long time about what the map() function, reduce() function and filter() function have done. After reading many passages and <a href="https://github.com/apple/swift/blob/master/stdlib/public/core/" target="_blank" rel="external">the source code of swift</a>, I think it is time to summerize what I have got. Besides, I hope this post can help someone who want to but not yet understand these function to understand them.</p><a id="more"></a><h2 id="Higher-order-function-高阶函数"><a href="#Higher-order-function-高阶函数" class="headerlink" title="Higher-order function 高阶函数"></a>Higher-order function 高阶函数</h2><p>首先来提一下高阶函数，在 Wikipedia 中是这样定义高阶函数的：</p><blockquote><p>高阶函数 Higher-order function<br>在数学和计算机科学，一个高阶函数是一个至少满足以下一个条件的函数：<br>In mathematics and computer science, a higher-order function (also functional, functional form or functor) is a function that does at least one of the following:</p><ul><li>接收一个或者多个函数作为参数 takes one or more functions as arguments (i.e., procedural parameters),</li><li>返回一个函数作为结果 returns a function as its result.</li></ul></blockquote><p>An example in Swift:<br></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">twice</span><span class="params">(<span class="number">_</span> f: @escaping <span class="params">(Int)</span></span></span> -&gt; <span class="type">Int</span>) -&gt; (<span class="type">Int</span>) -&gt; <span class="type">Int</span> </div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> &#123; f( f($<span class="number">0</span>) ) &#125; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(<span class="number">_</span> arg: Int)</span></span> -&gt; <span class="type">Int</span> &#123; </div><div class="line">    <span class="keyword">return</span> arg + <span class="number">3</span> </div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> g = twice(f)</div><div class="line"><span class="built_in">print</span>(g(<span class="number">7</span>)) <span class="comment">// 13</span></div></pre></td></tr></table></figure><p></p><p>The function signature in swift is ugly, so here is another example in Haskell:<br></p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="title">twice</span> :: (a -&gt; a) -&gt; (a -&gt; a)</div><div class="line"><span class="title">twice</span> f = f . f <span class="comment">-- 点号表示函数复合</span></div><div class="line"></div><div class="line"><span class="title">minus3</span> :: <span class="type">Num</span> a =&gt; a -&gt; a</div><div class="line"><span class="title">minus3</span> n = n + <span class="number">3</span></div><div class="line"></div><div class="line"><span class="title">main</span> :: <span class="type">IO</span> ()</div><div class="line"><span class="title">main</span> = print (twice minus3 <span class="number">7</span>) <span class="comment">-- 13</span></div></pre></td></tr></table></figure><p></p><p>And in JavaScript:<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> twice = <span class="function">(<span class="params">f, v</span>) =&gt;</span> f( f(v) );</div><div class="line"><span class="keyword">const</span> f = <span class="function"><span class="params">v</span> =&gt;</span> v + <span class="number">3</span>;</div><div class="line"><span class="built_in">console</span>.log( twice(f, <span class="number">7</span>) ); <span class="comment">// 13</span></div></pre></td></tr></table></figure><p></p><p>So, the function <code>twice</code> which take a function as a parameter is a Higher-order function.</p><p>而我们要讲的 map(), flatMap(), reduce() and filter() 都是高阶函数，因为他们都至少都接受一个函数（闭包）作为参数。</p><h2 id="这四个函数分别是做什么的？"><a href="#这四个函数分别是做什么的？" class="headerlink" title="这四个函数分别是做什么的？"></a>这四个函数分别是做什么的？</h2><p>首先简单讲讲 map() 和 flatMap() 以及他们之间的区别</p><ul><li><p><code>map</code> 可以理解成「映射」。就像数学中函数的映射一样。但是 map() 作为 <code>SequenceType</code> 类的实例方法，传入一个函数（闭包）作为参数，然后 <code>map()</code> 会把 <code>SequenceType</code> 的实例中的每一项都应用函数（闭包），然后返回一个新的实例。</p></li><li><p><code>flatMap()</code> 和 <code>map()</code> 功能差不多，但是 flatMap 有点复杂，它有两个重载函数。在第一个重载函数里， <code>flatMap()</code> 返回一个被压平了的结果序列（此时 map 将会返回一个嵌套序列）；而第二个重载函数里 <code>flatMap()</code> 的返回序列中没有 nil。具体区别可以在下面的源码中详细了解。</p></li><li><p><code>reduce(_ initialResult: _ nextPartialResult:(_ partialResult: Iterator.Element:))</code> 接受两个参数：</p><ol><li><code>initialResult</code> 接受的参数代表结果的初始值，</li><li><code>nextPartialResult(_ partialResult: Iterator.Element:)</code> 接受一个闭包，这个闭包将会被应用在该序列的所有元素上，这个闭包的参数<code>partialResult</code>代表已经计算了的部分结果，而<code>Iterator.Element</code>则是该序列对每个元素的迭代器。</li></ol><ul><li>简而言之，<code>reduce()</code>的作用是给该序列的每个元素应用传入的闭包，产生一个单一值的结果。具体实现可以看下面的源码，这里为了说明得更清晰，举一个使用 reduce 进行求和的栗子，两种写法。<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 方法1</span></div><div class="line"><span class="keyword">var</span> addResult = a.<span class="built_in">reduce</span>(<span class="number">0</span>, +)<span class="comment">// `+`在 Swift 里是一个函数，所以可以直接写</span></div><div class="line"><span class="comment">// 方法2</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">justAdd</span><span class="params">(l: Int, r: Int)</span></span> -&gt; <span class="type">Int</span>&#123;</div><div class="line">    <span class="keyword">return</span> l + r</div><div class="line">&#125;</div><div class="line">addResult = a.<span class="built_in">reduce</span>(<span class="number">0</span>, justAdd)</div><div class="line"><span class="comment">// 方法3</span></div><div class="line">addResult = a.<span class="built_in">reduce</span>(<span class="number">0</span>, &#123; (res:<span class="type">Int</span>, e:<span class="type">Int</span>) -&gt; <span class="type">Int</span> <span class="keyword">in</span></div><div class="line">    <span class="keyword">return</span> res + e</div><div class="line">&#125;)</div></pre></td></tr></table></figure></li></ul></li></ul><p>以上三种写法的结果完全一样。不过请尽量用第一二种写法，因为这两种写法可以在得到结果的同时增强代码的可读性。如果情况复杂，请多使用第二种写法，虽然略显繁琐，但是将逻辑细节封装起来的代码比较易懂，同时也可以增加可复用性。如果确定此方法只使用一次，而且需要处理的逻辑不太复杂，那么尽管使用第三种写法吧，快捷方便（虽然可读性可能略低，自行酌情处理）。</p><ul><li><code>filter(_ isIncluded:(Iterator.Element) -&gt; Bool) -&gt; [Iterator.Element]</code> 将序列中的每一个元素传入函数（闭包），如果闭包返回值为真，则增加到 filter 的返回序列中。</li></ul><h2 id="关于-throws-和-rethrows"><a href="#关于-throws-和-rethrows" class="headerlink" title="关于 throws 和 rethrows"></a>关于 <code>throws</code> 和 <code>rethrows</code></h2><p>关于 <code>throws</code> 和 <code>rethrows</code>， <a href="http://robnapier.net/re-throws" target="_blank" rel="external">这篇文章讲得挺清晰</a>。最近要没时间了，有空我再看看怎么翻译转载一下。<br>简单来说：所有声明了<code>throws</code>的函数都是需要写<code>try-catch</code>语句的，而有时候的函数调用不一定会<code>throws</code>，每次调用都写<code>try-catch</code>实在太麻烦了。有一个临时的解决办法就是「重载」对应的方法，一个函数签名有<code>throws</code>一个没有<code>throws</code>，但是这样还是太麻烦，而且两个不同签名的函数做的事情居然是一模一样的，非常不方便后期维护。<br>最后Swift 开发小组说要优雅，于是就有了<code>rethrows</code>。函数签名中有<code>rethrows</code>的函数，可以<code>try-catch</code>语句也可以不写 try-catch 语句。<code>rethrows</code>就是为了解决这种问题而存在的。所以某种角度上来说，也可以把<code>rethrows</code>当做<code>throws</code>的语法糖吧。<br>It is clear explained in <a href="http://robnapier.net/re-throws" target="_blank" rel="external">this passage</a> about key words <code>throws</code> and <code>rethrows</code> in the source code.</p><blockquote><p>其实以上讲的，都来自<a href="https://github.com/apple/swift/blob/master/" target="_blank" rel="external"><code>这里</code></a> 欢迎大家前去 clone 下来研究。Swift3 有些函数的效率还能优化，如果你发现了优化点，千万不要吝惜于提交 issue ;&gt;<br><a href="https://github.com/apple/swift/blob/master/" target="_blank" rel="external"><code>here</code></a>. You are welcome to clone and studying with it.<br>Some functions in the lib are still not yet been optimized, and if you find any problem please don’t begrudge submitting a issue ;&gt;</p></blockquote><p>源码就不翻译了哈，再翻译就成易语言了 😑</p><h2 id="Talk-is-cheap-show-me-the-code"><a href="#Talk-is-cheap-show-me-the-code" class="headerlink" title="Talk is cheap, show me the code"></a>Talk is cheap, show me the code</h2><p>Let’s now go deeper:<br>You can find the source code of Sequence Type <code>map()</code> function <a href="https://github.com/apple/swift/blob/master/stdlib/public/core/Collection.swift" target="_blank" rel="external">here</a>. Here I quote it like:<br></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// Returns an array containing the results of mapping the given closure</span></div><div class="line"><span class="comment">/// over the sequence's elements.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// In this example, `map` is used first to convert the names in the array</span></div><div class="line"><span class="comment">/// to lowercase strings and then to count their characters.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">///     let cast = ["Vivien", "Marlon", "Kim", "Karl"]</span></div><div class="line"><span class="comment">///     let lowercaseNames = cast.map &#123; $0.lowercaseString &#125;</span></div><div class="line"><span class="comment">///     // 'lowercaseNames' == ["vivien", "marlon", "kim", "karl"]</span></div><div class="line"><span class="comment">///     let letterCounts = cast.map &#123; $0.characters.count &#125;</span></div><div class="line"><span class="comment">///     // 'letterCounts' == [6, 6, 3, 4]</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// - Parameter transform: A mapping closure. `transform` accepts an</span></div><div class="line"><span class="comment">///   element of this sequence as its parameter and returns a transformed</span></div><div class="line"><span class="comment">///   value of the same or of a different type.</span></div><div class="line"><span class="comment">/// - Returns: An array containing the transformed elements of this sequence. </span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">map</span>&lt;T&gt;<span class="params">(<span class="number">_</span> transform: <span class="params">(Iterator.Element)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">T</span>) <span class="keyword">rethrows</span> -&gt; [<span class="type">T</span>] &#123;</div><div class="line">    <span class="comment">// <span class="doctag">TODO:</span> swift-3-indexing-model - review the following</span></div><div class="line">    <span class="keyword">let</span> <span class="built_in">count</span>: <span class="type">Int</span> = <span class="built_in">numericCast</span>(<span class="keyword">self</span>.<span class="built_in">count</span>)</div><div class="line">    <span class="keyword">if</span> <span class="built_in">count</span> == <span class="number">0</span> &#123;</div><div class="line">        <span class="keyword">return</span> []</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> result = <span class="type">ContiguousArray</span>&lt;<span class="type">T</span>&gt;()</div><div class="line">    result.reserveCapacity(<span class="built_in">count</span>)</div><div class="line">    <span class="keyword">var</span> i = <span class="keyword">self</span>.startIndex</div><div class="line">    <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="built_in">count</span> &#123;</div><div class="line">        result.append(<span class="keyword">try</span> transform(<span class="keyword">self</span>[i]))</div><div class="line">        formIndex(after: &amp;i)</div><div class="line">    &#125;</div><div class="line">    _expectEnd(of: <span class="keyword">self</span>, <span class="keyword">is</span>: i)</div><div class="line">    <span class="keyword">return</span> <span class="type">Array</span>(result)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>And Optional Type <code>map()</code> <a href="https://github.com/apple/swift/blob/master/stdlib/public/core/Optional.swift" target="_blank" rel="external">here</a><br></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// Evaluates the given closure when this `Optional` instance is not `nil`,</span></div><div class="line"><span class="comment">/// passing the unwrapped value as a parameter.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// Use the `map` method with a closure that returns a nonoptional value.</span></div><div class="line"><span class="comment">/// This example performs an arithmetic operation on an</span></div><div class="line"><span class="comment">/// optional integer.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">///     let possibleNumber: Int? = Int("42")</span></div><div class="line"><span class="comment">///     let possibleSquare = possibleNumber.map &#123; $0 * $0 &#125;</span></div><div class="line"><span class="comment">///     print(possibleSquare)</span></div><div class="line"><span class="comment">///     // Prints "Optional(1746)"</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">///     let noNumber: Int? = nil</span></div><div class="line"><span class="comment">///     let noSquare = noNumber.map &#123; $0 * $0 &#125;</span></div><div class="line"><span class="comment">///     print(noSquare)</span></div><div class="line"><span class="comment">///     // Prints "nil"</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// - Parameter transform: A closure that takes the unwrapped value</span></div><div class="line"><span class="comment">///   of the instance.</span></div><div class="line"><span class="comment">/// - Returns: The result of the given closure. If this instance is `nil`,</span></div><div class="line"><span class="comment">///   returns `nil`.</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">map</span>&lt;U&gt;<span class="params">(</span></span></div><div class="line">    <span class="number">_</span> transform: <span class="params">(Wrapped)</span> <span class="keyword">throws</span> -&gt; <span class="type">U</span></div><div class="line">    ) <span class="keyword">rethrows</span> -&gt; <span class="type">U</span>? &#123;</div><div class="line">    <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</div><div class="line">    <span class="keyword">case</span> .some(<span class="keyword">let</span> y):</div><div class="line">        <span class="keyword">return</span> .some(<span class="keyword">try</span> transform(y))</div><div class="line">    <span class="keyword">case</span> .<span class="keyword">none</span>:</div><div class="line">        <span class="keyword">return</span> .<span class="keyword">none</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>Then here comes the <code>flatMap()</code> function. You can find the source code of Sequence Type <code>flatMap()</code> function <a href="https://github.com/apple/swift/blob/master/stdlib/public/core/SequenceAlgorithms.swift.gyb" target="_blank" rel="external">here</a>.<br>And I quote it like:<br></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// Returns an array containing the concatenated results of calling the</span></div><div class="line"><span class="comment">/// given transformation with each element of this sequence.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// Use this method to receive a single-level collection when your</span></div><div class="line"><span class="comment">/// transformation produces a sequence or collection for each element.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// In this example, note the difference in the result of using `map` and</span></div><div class="line"><span class="comment">/// `flatMap` with a transformation that returns an array.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">///     let numbers = [1, 2, 3, 4]</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">///     let mapped = numbers.map &#123; Array(count: $0, repeatedValue: $0) &#125;</span></div><div class="line"><span class="comment">///     // [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4]]</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">///     let flatMapped = numbers.flatMap &#123; Array(count: $0, repeatedValue: $0) &#125;</span></div><div class="line"><span class="comment">///     // [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// In fact, `s.flatMap(transform)`  is equivalent to</span></div><div class="line"><span class="comment">/// `Array(s.map(transform).joined())`.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// - Parameter transform: A closure that accepts an element of this</span></div><div class="line"><span class="comment">///   sequence as its argument and returns a sequence or collection.</span></div><div class="line"><span class="comment">/// - Returns: The resulting flattened array.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// - Complexity: O(*m* + *n*), where *m* is the length of this sequence</span></div><div class="line"><span class="comment">///   and *n* is the length of the result.</span></div><div class="line"><span class="comment">/// - SeeAlso: `joined()`, `map(_:)`</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">flatMap</span>&lt;SegmentOfResult : Sequence&gt;<span class="params">(<span class="number">_</span> transform: <span class="params">(Iterator.Element)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">SegmentOfResult</span>) <span class="keyword">rethrows</span> -&gt; [<span class="type">SegmentOfResult</span>.<span class="type">Iterator</span>.<span class="type">Element</span>] &#123;</div><div class="line">        <span class="keyword">var</span> result: [<span class="type">SegmentOfResult</span>.<span class="type">Iterator</span>.<span class="type">Element</span>] = []</div><div class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> <span class="keyword">self</span> &#123;</div><div class="line">            result.append(contentsOf: <span class="keyword">try</span> transform(element))</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/// Returns an array containing the non-`nil` results of calling the given</span></div><div class="line"><span class="comment">/// transformation with each element of this sequence.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// Use this method to receive an array of nonoptional values when your</span></div><div class="line"><span class="comment">/// transformation produces an optional value.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// In this example, note the difference in the result of using `map` and</span></div><div class="line"><span class="comment">/// `flatMap` with a transformation that returns an optional `Int` value.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">///     let possibleNumbers = ["1", "2", "three", "///4///", "5"]</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">///     let mapped: [Int?] = possibleNumbers.map &#123; str in Int(str) &#125;</span></div><div class="line"><span class="comment">///     // [1, 2, nil, nil, 5]</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">///     let flatMapped: [Int] = possibleNumbers.flatMap &#123; str in Int(str) &#125;</span></div><div class="line"><span class="comment">///     // [1, 2, 5]</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// - Parameter transform: A closure that accepts an element of this</span></div><div class="line"><span class="comment">///   sequence as its argument and returns an optional value.</span></div><div class="line"><span class="comment">/// - Returns: An array of the non-`nil` results of calling `transform`</span></div><div class="line"><span class="comment">///   with each element of the sequence.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// - Complexity: O(*m* + *n*), where *m* is the length of this sequence</span></div><div class="line"><span class="comment">///   and *n* is the length of the result.</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">flatMap</span>&lt;ElementOfResult&gt;<span class="params">(<span class="number">_</span> transform: <span class="params">(Iterator.Element)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">ElementOfResult</span>?) <span class="keyword">rethrows</span> -&gt; [<span class="type">ElementOfResult</span>] &#123;</div><div class="line">    <span class="keyword">var</span> result: [<span class="type">ElementOfResult</span>] = []</div><div class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> <span class="keyword">self</span> &#123;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> newElement = <span class="keyword">try</span> transform(element) &#123;</div><div class="line">            result.append(newElement)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>And the Optional Type <code>flatMap()</code> <a href="https://github.com/apple/swift/blob/master/stdlib/public/core/Optional.swift" target="_blank" rel="external">here</a><br></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// Evaluates the given closure when this `Optional` instance is not `nil`,</span></div><div class="line"><span class="comment">/// passing the unwrapped value as a parameter.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// Use the `flatMap` method with a closure that returns an optional value.</span></div><div class="line"><span class="comment">/// This example performs an arithmetic operation with an optional result on</span></div><div class="line"><span class="comment">/// an optional integer.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">///     let possibleNumber: Int? = Int("42")</span></div><div class="line"><span class="comment">///     let nonOverflowingSquare = possibleNumber.flatMap &#123; x -&gt; Int? in</span></div><div class="line"><span class="comment">///         let (result, overflowed) = Int.multiplyWithOverflow(x, x)</span></div><div class="line"><span class="comment">///         return overflowed ? nil : result</span></div><div class="line"><span class="comment">///     &#125;</span></div><div class="line"><span class="comment">///     print(nonOverflowingSquare)</span></div><div class="line"><span class="comment">///     // Prints "Optional(1746)"</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// - Parameter transform: A closure that takes the unwrapped value</span></div><div class="line"><span class="comment">///   of the instance.</span></div><div class="line"><span class="comment">/// - Returns: The result of the given closure. If this instance is `nil`,</span></div><div class="line"><span class="comment">///   returns `nil`.</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">flatMap</span>&lt;U&gt;<span class="params">(</span></span></div><div class="line">    <span class="number">_</span> transform: <span class="params">(Wrapped)</span> <span class="keyword">throws</span> -&gt; <span class="type">U</span>?</div><div class="line">    ) <span class="keyword">rethrows</span> -&gt; <span class="type">U</span>? &#123;</div><div class="line">    <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</div><div class="line">    <span class="keyword">case</span> .some(<span class="keyword">let</span> y):</div><div class="line">        <span class="keyword">return</span> <span class="keyword">try</span> transform(y)</div><div class="line">    <span class="keyword">case</span> .<span class="keyword">none</span>:</div><div class="line">        <span class="keyword">return</span> .<span class="keyword">none</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>And you can find the source code of <code>reduce()</code> function <a href="https://github.com/apple/swift/blob/d6033995f6485fe3bf979ae9a04287fc3ecbc512/stdlib/public/core/SequenceAlgorithms.swift.gyb" target="_blank" rel="external">here</a>,<br>quote like:<br></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// Returns the result of combining the elements of the sequence using the</span></div><div class="line"><span class="comment">/// given closure.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// Use the `reduce(_:_:)` method to produce a single value from the elements</span></div><div class="line"><span class="comment">/// of an entire sequence. For example, you can use this method on an array</span></div><div class="line"><span class="comment">/// of numbers to find their sum or product.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// The `nextPartialResult` closure is called sequentially with an</span></div><div class="line"><span class="comment">/// accumulating value initialized to `initialResult` and each element of</span></div><div class="line"><span class="comment">/// the sequence. This example shows how to find the sum of an array of</span></div><div class="line"><span class="comment">/// numbers.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">///     let numbers = [1, 2, 3, 4]</span></div><div class="line"><span class="comment">///     let numberSum = numbers.reduce(0, &#123; x, y in</span></div><div class="line"><span class="comment">///         x + y</span></div><div class="line"><span class="comment">///     &#125;)</span></div><div class="line"><span class="comment">///     // numberSum == 10</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// When `numbers.reduce(_:_:)` is called, the following steps occur:</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// 1. The `nextPartialResult` closure is called with `initialResult`---`0`</span></div><div class="line"><span class="comment">///    in this case---and the first element of `numbers`, returning the sum:</span></div><div class="line"><span class="comment">///    `1`.</span></div><div class="line"><span class="comment">/// 2. The closure is called again repeatedly with the previous call's return</span></div><div class="line"><span class="comment">///    value and each element of the sequence.</span></div><div class="line"><span class="comment">/// 3. When the sequence is exhausted, the last value returned from the</span></div><div class="line"><span class="comment">///    closure is returned to the caller.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// If the sequence has no elements, `nextPartialResult` is never executed</span></div><div class="line"><span class="comment">/// and `initialResult` is the result of the call to `reduce(_:_:)`.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// - Parameters:</span></div><div class="line"><span class="comment">///   - initialResult: The value to use as the initial accumulating value.</span></div><div class="line"><span class="comment">///     `initialResult` is passed to `nextPartialResult` the first time the</span></div><div class="line"><span class="comment">///     closure is executed.</span></div><div class="line"><span class="comment">///   - nextPartialResult: A closure that combines an accumulating value and</span></div><div class="line"><span class="comment">///     an element of the sequence into a new accumulating value, to be used</span></div><div class="line"><span class="comment">///     in the next call of the `nextPartialResult` closure or returned to</span></div><div class="line"><span class="comment">///     the caller.</span></div><div class="line"><span class="comment">/// - Returns: The final accumulated value. If the sequence has no elements,</span></div><div class="line"><span class="comment">///   the result is `initialResult`.</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">reduce</span>&lt;Result&gt;<span class="params">(<span class="number">_</span> initialResult: Result, <span class="number">_</span> nextPartialResult:</span></span></div><div class="line">    <span class="params">(<span class="number">_</span> partialResult: Result, Iterator.Element)</span> <span class="keyword">throws</span> -&gt; <span class="type">Result</span>)</div><div class="line">    <span class="keyword">rethrows</span> -&gt; <span class="type">Result</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> accumulator = initialResult</div><div class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> <span class="keyword">self</span> &#123;</div><div class="line">        accumulator = <span class="keyword">try</span> nextPartialResult(accumulator, element)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> accumulator</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>And the <code>filter()</code> function in <a href="https://github.com/apple/swift/blob/master/stdlib/public/core/Sequence.swift" target="_blank" rel="external">here</a><br></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// Returns an array containing, in order, the elements of the sequence</span></div><div class="line"><span class="comment">/// that satisfy the given predicate.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// In this example, `filter` is used to include only names shorter than</span></div><div class="line"><span class="comment">/// five characters.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">///     let cast = ["Vivien", "Marlon", "Kim", "Karl"]</span></div><div class="line"><span class="comment">///     let shortNames = cast.filter &#123; $0.characters.count &lt; 5 &#125;</span></div><div class="line"><span class="comment">///     print(shortNames)</span></div><div class="line"><span class="comment">///     // Prints "["Kim", "Karl"]"</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// - Parameter isIncluded: A closure that takes an element of the</span></div><div class="line"><span class="comment">///   sequence as its argument and returns a Boolean value indicating</span></div><div class="line"><span class="comment">///   whether the element should be included in the returned array.</span></div><div class="line"><span class="comment">/// - Returns: An array of the elements that `includeElement` allowed.</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">filter</span><span class="params">(<span class="number">_</span> isIncluded: <span class="params">(Iterator.Element)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">Bool</span>) <span class="keyword">rethrows</span> -&gt; [<span class="type">Iterator</span>.<span class="type">Element</span>] &#123;</div><div class="line">    <span class="keyword">var</span> result = <span class="type">ContiguousArray</span>&lt;<span class="type">Iterator</span>.<span class="type">Element</span>&gt;()</div><div class="line">    <span class="keyword">var</span> iterator = <span class="keyword">self</span>.makeIterator()</div><div class="line">    <span class="keyword">while</span> <span class="keyword">let</span> element = iterator.next() &#123;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">try</span> isIncluded(element) &#123;</div><div class="line">            result.append(element)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="type">Array</span>(result)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我曾经很好奇 map(), flatMap(), reduce() 和 filter() 函数是用来做什么的，是怎么实现的。在我阅读了 Swift 源码还有一些文章以后，我觉得是时候分享一下了。&lt;/p&gt;&lt;p&gt;I have been wondering a long time about what the map() function, reduce() function and filter() function have done. After reading many passages and &lt;a href=&quot;https://github.com/apple/swift/blob/master/stdlib/public/core/&quot;&gt;the source code of swift&lt;/a&gt;, I think it is time to summerize what I have got. Besides, I hope this post can help someone who want to but not yet understand these function to understand them.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Programming" scheme="http://blog.superyoung.win/tags/Programming/"/>
    
      <category term="Swift" scheme="http://blog.superyoung.win/tags/Swift/"/>
    
      <category term="Language" scheme="http://blog.superyoung.win/tags/Language/"/>
    
      <category term="map" scheme="http://blog.superyoung.win/tags/map/"/>
    
      <category term="reduce" scheme="http://blog.superyoung.win/tags/reduce/"/>
    
      <category term="filter" scheme="http://blog.superyoung.win/tags/filter/"/>
    
  </entry>
  
</feed>
