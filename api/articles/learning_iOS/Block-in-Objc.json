{"title":"Block 简介","slug":"learning_iOS/Block-in-Objc","date":"2017-01-03T17:13:54.000Z","updated":"2017-01-29T02:27:27.000Z","comments":true,"path":"api/articles/learning_iOS/Block-in-Objc.json","photos":[],"link":"","excerpt":"什么是 Block？Block 可以实现闭包。Block 与函数类似，只不过是直接定义在另一个函数里。Block 也可以访问、捕获它被声明的区域内的所有变量。而且 Block 因为有返回类型，它其实也可以作为个值来对待。<br>","covers":null,"content":"<p>什么是 Block？Block 可以实现闭包。Block 与函数类似，只不过是直接定义在另一个函数里。Block 也可以访问、捕获它被声明的区域内的所有变量。而且 Block 因为有返回类型，它其实也可以作为个值来对待。<br><a id=\"more\"></a></p><h2 id=\"定义-Block-的语法结构如下\"><a href=\"#定义-Block-的语法结构如下\" class=\"headerlink\" title=\"定义 Block 的语法结构如下\"></a>定义 Block 的语法结构如下</h2><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">return_type (^block_name)(parameters)&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id=\"Block-捕获的变量是不可以在-Block-中修改的\"><a href=\"#Block-捕获的变量是不可以在-Block-中修改的\" class=\"headerlink\" title=\"Block 捕获的变量是不可以在 Block 中修改的\"></a>Block 捕获的变量是不可以在 Block 中修改的</h2><p>若要修改，该变量需要在声明的时候加上 <code>__block</code> 修饰符。</p><h2 id=\"Block-和-Grand-Central-Dispatch\"><a href=\"#Block-和-Grand-Central-Dispatch\" class=\"headerlink\" title=\"Block 和 Grand Central Dispatch\"></a>Block 和 Grand Central Dispatch</h2><p><code>Grand Central Dispatch</code> 是一种与 <code>Block</code> 有关的技术，它提供了对线程的抽象，这种抽象基于派发队列<code>dispatch queue</code>，开发者可以将 <code>Block</code> 排入队列中，由 <code>GCD</code> 负责调度。</p><h2 id=\"小心保留环\"><a href=\"#小心保留环\" class=\"headerlink\" title=\"小心保留环\"></a>小心保留环</h2><p>若在类的实例方法中定义一个块，那么块会捕获 <code>self</code> 变量，如果 <code>self</code> 所指代的那个对象同时也保留了块，则会导致“保留环”。</p><h2 id=\"解决保留环问题\"><a href=\"#解决保留环问题\" class=\"headerlink\" title=\"解决保留环问题\"></a>解决保留环问题</h2><p>一般来说，只要适时清理掉环中的某个引用，就不会有问题。对于块来说的话，在块的最后令 <code>Handler = nil;</code> 即可解决保留环问题。</p><h2 id=\"全局快、栈块、堆块\"><a href=\"#全局快、栈块、堆块\" class=\"headerlink\" title=\"全局快、栈块、堆块\"></a>全局快、栈块、堆块</h2><p>栈块所占据的内存空间可能会被自动覆写，若被覆写，则运行时将会出错。解决此问题可以给块对象发送 <code>copy</code> 消息，示例如下：<br></p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">block = [^&#123;codeInBlock&#125; <span class=\"keyword\">copy</span>];</span><br></pre></td></tr></table></figure><p></p><h2 id=\"为常用块创建-typedef\"><a href=\"#为常用块创建-typedef\" class=\"headerlink\" title=\"为常用块创建 typedef\"></a>为常用块创建 typedef</h2><p>创建的语法规则：<br></p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span>(^block_name)(parameters);</span><br></pre></td></tr></table></figure><p></p><p>调用的语法规则：<br></p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">block_name block = ^(parameters)&#123;&#125;</span><br></pre></td></tr></table></figure><p></p>","categories":[],"tags":[{"name":"iOS","slug":"iOS","count":9,"path":"api/tags/iOS.json"},{"name":"Programming","slug":"Programming","count":13,"path":"api/tags/Programming.json"},{"name":"Objective C","slug":"Objective-C","count":4,"path":"api/tags/Objective-C.json"},{"name":"Block","slug":"Block","count":1,"path":"api/tags/Block.json"}]}