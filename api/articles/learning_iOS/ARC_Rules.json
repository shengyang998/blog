{"title":"ARC Rules","slug":"learning_iOS/ARC_Rules","date":"2017-01-29T02:19:41.000Z","updated":"2017-01-29T03:30:19.000Z","comments":true,"path":"api/articles/learning_iOS/ARC_Rules.json","photos":[],"link":"","excerpt":"A note for book Pro Multithreading and Memory Management for iOS and OS X<br>ARC is summarized in Apple’s own words:ARC in Objective-C makes memory management the job of the compiler. By enabling ARC with the new Apple LLVM compiler, you will never need to type retain or release again, dramatically simplifying the development process, while reducing craches and memory leaks. The compiler has a complete understanding of your objects, and releases each object the instant it is no longer used, so apps run as fast as ever, with predictable, smooth performance.","covers":null,"content":"<p>A note for book <a href=\"http://www.apress.com/us/book/9781430241164\" target=\"_blank\" rel=\"noopener\">Pro Multithreading and Memory Management for iOS and OS X</a><br>ARC is summarized in Apple’s own words:</p><blockquote><p>ARC in Objective-C makes memory management the job of the compiler. By enabling ARC with the new Apple LLVM compiler, you will never need to type retain or release again, dramatically simplifying the development process, while reducing craches and memory leaks. The compiler has a complete understanding of your objects, and releases each object the instant it is no longer used, so apps run as fast as ever, with predictable, smooth performance.</p></blockquote><a id=\"more\"></a><h2 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h2><p>Actually, reference counting is still used as the basis of ARC. But ARC helps the reference counting mechanism work automatically when you follow its rules.</p><h2 id=\"The-rules-of-Reference-Counting\"><a href=\"#The-rules-of-Reference-Counting\" class=\"headerlink\" title=\"The rules of Reference Counting\"></a>The rules of Reference Counting</h2><ul><li>You have ownership of any objects you create.</li><li>You can take ownership of an object using retain.</li><li>When you no longer need it, you must relinquish ownership of an object of which you have ownership.</li><li>You must not relinquish ownership of an object of which you don’t have ownership.</li></ul><h2 id=\"Newly-introduced-for-ARC-Ownership-Qualifier\"><a href=\"#Newly-introduced-for-ARC-Ownership-Qualifier\" class=\"headerlink\" title=\"Newly introduced for ARC: Ownership Qualifier\"></a>Newly introduced for ARC: Ownership Qualifier</h2><p>In Objective-C, ‘id’ or each object type is used for object variable types.</p><p>Object types are pointer types of Objective-C classes, such as NSObject <em>.’id’ type is used to hide its class name. ‘id’ is equivalent to void</em> in the C language.</p><p>With ARC, ‘id’ and object type variables must have one of the following four ownership qualifiers:<br></p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> __<span class=\"keyword\">strong</span></span><br><span class=\"line\"><span class=\"number\">2.</span> __<span class=\"keyword\">weak</span></span><br><span class=\"line\"><span class=\"number\">3.</span> __<span class=\"keyword\">unsafe_unretained</span></span><br><span class=\"line\"><span class=\"number\">4.</span> __autoreleasing</span><br></pre></td></tr></table></figure><p></p><p>You should decide which ownership qualifier is to be used for all the ‘id’ and object type variables in your source code. In this chapter, I explain hwo you should choos each qualifier one by one.</p><h3 id=\"strong-ownership-qualifier\"><a href=\"#strong-ownership-qualifier\" class=\"headerlink\" title=\"__strong ownership qualifier\"></a>__strong ownership qualifier</h3><p>The <strong>strong ownership qualifier is used as the default for ‘id’ and object types. It means that the variable obj in the following source code is </strong>strong qualified implicitly.<br></p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">id</span> obj = [[<span class=\"built_in\">NSObject</span> alloc] init];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>Without being explicitly qualified, ‘id’ or objects are treated as __strong. The above code is the same as:<br></p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">id</span> __<span class=\"keyword\">strong</span> obj = [[<span class=\"built_in\">NSObject</span> alloc] init];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>The following is the same source code for a non-ARC environment.<br></p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* non-ARC */</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">id</span> obj = [[<span class=\"built_in\">NSObject</span> alloc] init];</span><br><span class=\"line\">    [obj release];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>This means the “release” method is automatically added on an ARC environment to release the created object with ownership.</p><p>We add comments on the ownership status:<br></p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">id</span> __<span class=\"keyword\">strong</span> obj = [[<span class=\"built_in\">NSObject</span> alloc] init];</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * The variable obj is qualified with __strong.</span></span><br><span class=\"line\"><span class=\"comment\">    * Which means, it has the ownership of the object.</span></span><br><span class=\"line\"><span class=\"comment\">    **/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * Leaving the scope of variable obj, its strong reference disappears.</span></span><br><span class=\"line\"><span class=\"comment\">    * The object is release automatically,</span></span><br><span class=\"line\"><span class=\"comment\">    * because no one has ownership, the objec is dispoed of.</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br></pre></td></tr></table></figure><p></p>","categories":[],"tags":[{"name":"iOS","slug":"iOS","count":9,"path":"api/tags/iOS.json"},{"name":"Programming","slug":"Programming","count":13,"path":"api/tags/Programming.json"},{"name":"ARC","slug":"ARC","count":1,"path":"api/tags/ARC.json"},{"name":"Rules","slug":"Rules","count":1,"path":"api/tags/Rules.json"},{"name":"Objective C","slug":"Objective-C","count":4,"path":"api/tags/Objective-C.json"},{"name":"Coming soon...","slug":"Coming-soon","count":3,"path":"api/tags/Coming-soon.json"}]}