{"title":"UITableView","slug":"learning_iOS/UITableView","date":"2017-01-03T17:07:32.000Z","updated":"2017-01-29T02:27:32.000Z","comments":true,"path":"api/articles/learning_iOS/UITableView.json","photos":[],"link":"","excerpt":"个人学习使用 UITableView 的时候的总结<br>","covers":null,"content":"<p>个人学习使用 UITableView 的时候的总结<br><a id=\"more\"></a></p><h2 id=\"设置数据源-（UITableViewDataSource）\"><a href=\"#设置数据源-（UITableViewDataSource）\" class=\"headerlink\" title=\"设置数据源 （UITableViewDataSource）\"></a>设置数据源 （UITableViewDataSource）</h2><p>需要<code>数据源</code>来展示数据，dataSource。会向数据源查询一共多少行数据以及每一行显示什么数据</p><p>不论什么对象，只要其遵循 <code>UITableViewDataSource</code> 协议即可。</p><p>UITableViewDataSource协议中有三个需要实现的函数</p><ol><li><p>tableview 有几组（section）？</p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"built_in\">NSInteger</span>) numberOfSectionInTableView: (<span class=\"built_in\">UITableView</span>*) tableView;</span><br></pre></td></tr></table></figure></li><li><p>每组（section）几行？</p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"built_in\">NSInteger</span>) tableView:(<span class=\"built_in\">UITableView</span>*)tableView numberOfRowsInSection:(<span class=\"built_in\">NSInteger</span>)section;</span><br></pre></td></tr></table></figure></li><li><p>每组每行分别显示什么内容（cell）？</p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"built_in\">UITableViewCell</span>*) tableView:(<span class=\"built_in\">UITableView</span>*)tableView cellForRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span>*)indexPath;</span><br></pre></td></tr></table></figure></li><li><p>每组的 titleForHeader 和 titleForFooter。这两个字体不可更改，如果有需要，使用自定义的 UILabel。</p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"built_in\">NSString</span>*)tableView:(<span class=\"built_in\">UITableView</span>*)tableView titleForHeaderInSection:(<span class=\"built_in\">NSInteger</span>)section;</span><br><span class=\"line\">- (<span class=\"built_in\">NSString</span>*)tableView:(<span class=\"built_in\">UITableView</span>*)tableView titleForFooterInSection:(<span class=\"built_in\">NSInteger</span>)section;</span><br></pre></td></tr></table></figure></li></ol><h3 id=\"怎么判断是哪一组哪一行呢？\"><a href=\"#怎么判断是哪一组哪一行呢？\" class=\"headerlink\" title=\"怎么判断是哪一组哪一行呢？\"></a>怎么判断是哪一组哪一行呢？</h3><p>看到上面的参数indexPath了吗？这样判断组：</p><ul><li><code>if(0 == indexPath.section){}</code></li></ul><p>这样判断行：</p><ul><li><code>if(0 == indexPath.row){}</code></li></ul><h3 id=\"关于UITableViewCell\"><a href=\"#关于UITableViewCell\" class=\"headerlink\" title=\"关于UITableViewCell\"></a>关于UITableViewCell</h3><p>初始化方法：<br><code>UITableViewCell* cell = [[UITableViewCell alloc]initWithStyle:UITableViewCellStyleDefault reuseIdentifier:nil];</code></p><h4 id=\"contentView是什么？\"><a href=\"#contentView是什么？\" class=\"headerlink\" title=\"contentView是什么？\"></a>contentView是什么？</h4><p><code>UITableViewCell</code>中有个默认的子视图<code>contentView</code>， <code>contentView</code>是所有其他内容的父视图。<br>可以通过其下的<code>accessoryType</code>来显示辅助指示视图。</p><h4 id=\"UITableViewCellStyle-类型\"><a href=\"#UITableViewCellStyle-类型\" class=\"headerlink\" title=\"UITableViewCellStyle 类型\"></a>UITableViewCellStyle 类型</h4><ul><li>UITableViewCellStyleDefault</li><li>UITableViewCellStyleSubtitle</li><li>UITableViewCellStyleValue1</li><li>UITableViewCellStyleValue2</li></ul><h3 id=\"UITableViewCell-的结构\"><a href=\"#UITableViewCell-的结构\" class=\"headerlink\" title=\"UITableViewCell 的结构\"></a>UITableViewCell 的结构</h3><ul><li><code>UITableViewCell</code></li><li>-&gt;<code>.imageView</code></li><li>-&gt;<code>.textLabel</code></li><li>-&gt;<code>.detailTextLabel</code></li><li>-&gt;<code>.contentView</code></li></ul><p>cell 里面包含默认一些子控件，不过也可以自己用 xib 定义。</p><h2 id=\"设置代理-delegate\"><a href=\"#设置代理-delegate\" class=\"headerlink\" title=\"设置代理(delegate)\"></a>设置代理(delegate)</h2><h3 id=\"为什么要设置代理？\"><a href=\"#为什么要设置代理？\" class=\"headerlink\" title=\"为什么要设置代理？\"></a>为什么要设置代理？</h3><ul><li><code>对象A</code>内部发生了一些事情，想要通知<code>对象B</code></li><li><code>对象B</code>想监听<code>对象A</code>内部发生的事情</li><li><code>对象A</code>想在自己内部调用<code>对象B</code>的一些方法，而又不想有互相的耦合依赖</li></ul><p>以上情况下，<code>对象B</code>都是<code>对象A</code>的代理。</p><h3 id=\"如何设置代理对象\"><a href=\"#如何设置代理对象\" class=\"headerlink\" title=\"如何设置代理对象\"></a>如何设置代理对象</h3><ol><li>在<code>Stroyboard</code>的<code>UIScrollView</code>上右键单击，拖<code>delegate</code>到<code>UIViewController</code>上。</li><li>在方法<code>viewDidLoad</code>中添加<code>self.tableView.delegate = self;</code><h3 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h3><code>类名+Delegate</code><br><em>例如<code>UITableViewDelegate</code>就是<code>UITableView</code>+<code>Delegate</code></em></li></ol><h3 id=\"协议\"><a href=\"#协议\" class=\"headerlink\" title=\"协议\"></a>协议</h3><p>如果是为一个类特别定义的协议，可以直接写在<code>.h</code>文件里，如果多个类使用同一个协议，建议建立一个<code>protocol</code>文件。</p><ul><li>关于定义格式，举个例子：</li></ul><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@protocol</span> <span class=\"title\">UITableView</span>&lt;<span class=\"title\">NSObject</span>, <span class=\"title\">UIScrollView</span>&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">@required</span></span><br><span class=\"line\">- (ReturnType) MethodName;</span><br><span class=\"line\"><span class=\"keyword\">@optional</span></span><br><span class=\"line\">- (ReturnType) MethodName;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure><p>默认是<code>@required</code>，但是这只能作为编译器检查的标准，使用时需要自己验证是否实现了具体的方法，验证方法如下：<br></p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>([<span class=\"keyword\">self</span>.delegate respondsToSelector:<span class=\"keyword\">@selector</span>(MethodName)])&#123;</span><br><span class=\"line\">    MethodName</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id=\"一个简单的例子\"><a href=\"#一个简单的例子\" class=\"headerlink\" title=\"一个简单的例子\"></a>一个简单的例子</h3><h4 id=\"首先定义一个-protocol\"><a href=\"#首先定义一个-protocol\" class=\"headerlink\" title=\"首先定义一个@protocol\"></a>首先定义一个<code>@protocol</code></h4><p>声明协议方法</p><h4 id=\"定义一个委托-interface\"><a href=\"#定义一个委托-interface\" class=\"headerlink\" title=\"定义一个委托@interface\"></a>定义一个委托<code>@interface</code></h4><p>引入<code>protocol.h</code></p><h4 id=\"定义一个代理-interface\"><a href=\"#定义一个代理-interface\" class=\"headerlink\" title=\"定义一个代理@interface\"></a>定义一个代理<code>@interface</code></h4><p>在<code>@interface</code>声明中声明遵守<code>@protocol</code>协议。例如：<br></p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">viewController</span> () &lt;<span class=\"title\">protocolName</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>然后在<code>@implementation</code>中实现具体的协议方法</p><h2 id=\"单组数据和多组数据\"><a href=\"#单组数据和多组数据\" class=\"headerlink\" title=\"单组数据和多组数据\"></a>单组数据和多组数据</h2><p>其本质都是 <code>UITableVIew</code> ，具体的差别其实就是UITableView的属性 <code>UITableViewStylePlain</code> 和 <code>UITableViewStyleGrouped</code>的设置。</p><h2 id=\"好，那么接下来梳理一下一个-UITableView-从初始化到展示的流程：\"><a href=\"#好，那么接下来梳理一下一个-UITableView-从初始化到展示的流程：\" class=\"headerlink\" title=\"好，那么接下来梳理一下一个 UITableView 从初始化到展示的流程：\"></a>好，那么接下来梳理一下一个 <code>UITableView</code> 从初始化到展示的流程：</h2><ol><li>初始化一个 <code>UITableView</code> 对象</li></ol><ul><li>设置数据源，数据源需要遵循协议至少实现如下三个方法 <code>numberOfSectionInTableView</code> <code>numberOfRowsInSection</code> <code>cellForRowAtIndexPath</code></li><li>如有需要自行构造一个 <code>UITableViewCell</code> 并使用上面的第三个方法（<code>cellForRowAtIndexPath</code>）返回。</li></ul><h2 id=\"自定义cell\"><a href=\"#自定义cell\" class=\"headerlink\" title=\"自定义cell\"></a>自定义cell</h2><p>Coming soon…</p>","categories":[],"tags":[{"name":"iOS","slug":"iOS","count":9,"path":"api/tags/iOS.json"},{"name":"Programming","slug":"Programming","count":13,"path":"api/tags/Programming.json"},{"name":"UITableView","slug":"UITableView","count":1,"path":"api/tags/UITableView.json"},{"name":"ObjC","slug":"ObjC","count":1,"path":"api/tags/ObjC.json"},{"name":"Delegate","slug":"Delegate","count":1,"path":"api/tags/Delegate.json"},{"name":"DataSource","slug":"DataSource","count":1,"path":"api/tags/DataSource.json"}]}