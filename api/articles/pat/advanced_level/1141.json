{"title":"PAT 1141 Python C++ 解题","slug":"pat/advanced_level/1141","date":"2018-03-20T15:02:54.036Z","updated":"2018-04-19T08:01:32.586Z","comments":true,"path":"api/articles/pat/advanced_level/1141.json","photos":[],"link":"","excerpt":"题源：https://www.patest.cn/contests/pat-a-practise/1141注意，对于最后两个测试点，使用 Python 语言会超时，从前三个测试点来看，同样的逻辑下 Python 的速度大概是 C++ 的 14%，嗯，太慢了……<br>","covers":null,"content":"<p>题源：<a href=\"https://www.patest.cn/contests/pat-a-practise/1141\" target=\"_blank\" rel=\"noopener\">https://www.patest.cn/contests/pat-a-practise/1141</a></p><p>注意，对于最后两个测试点，使用 Python 语言会超时，从前三个测试点来看，同样的逻辑下 Python 的速度大概是 C++ 的 14%，嗯，太慢了……<br><a id=\"more\"></a></p><p>OK，照例，</p><h2 id=\"先看题目：\"><a href=\"#先看题目：\" class=\"headerlink\" title=\"先看题目：\"></a>先看题目：</h2><blockquote><p>After each PAT, the PAT Center will announce the ranking of institutions based on their students’ performances. Now you are asked to generate the ranklist.<br><strong>Input Specification</strong>:<br>Each input file contains one test case. For each case, the first line gives a positive integer N (&lt;=10^5), which is the number of testees. Then N lines follow, each gives the information of a testee in the following format:<br><strong>ID Score School</strong><br>where “ID” is a string of 6 characters with the first one representing the test level: “B” stands for the basic level, “A” the advanced level and “T” the top level; “Score” is an integer in [0, 100]; and “School” is the institution code which is a string of no more than 6 English letters (case insensitive). Note: it is guaranteed that “ID” is unique for each testee.<br><strong>Output Specification</strong>:<br>For each case, first print in a line the total number of institutions. Then output the ranklist of institutions in nondecreasing order of their ranks in the following format:<br><strong>Rank School TWS Ns</strong><br>where “Rank” is the rank (start from 1) of the institution; “School” is the institution code (all in lower case); “TWS” is the total weighted score which is defined to be the integer part of <code>&quot;ScoreB/1.5 + ScoreA + ScoreT*1.5&quot;</code>, where “ScoreX” is the total score of the testees belong to this institution on level X; and “Ns” is the total number of testees who belong to this institution.<br>The institutions are ranked according to their TWS. If there is a tie, the institutions are supposed to have the same rank, and they shall be printed in ascending order of Ns. If there is still a tie, they shall be printed in alphabetical order of their codes.</p></blockquote><h3 id=\"限制\"><a href=\"#限制\" class=\"headerlink\" title=\"限制\"></a>限制</h3><ul><li>时间限制：500ms</li><li>内存限制：65537kB</li></ul><h3 id=\"输入输出要求\"><a href=\"#输入输出要求\" class=\"headerlink\" title=\"输入输出要求\"></a>输入输出要求</h3><p>题目大概意思就是说，对于每次 PAT 考试，我们会对每个学校进行排名。</p><ul><li>输入格式是<code>N</code>，<code>ID Score School</code></li><li>输出格式是<code>N</code>，<code>Rank School TWS Ns</code><br>其中：</li><li>N 是队伍总数（N&lt;=100000）</li><li>M 是学校总数</li><li>ID 是一个定长 6 个字符的字符串，第一位取值范围：’T’, ‘A’, ‘B’</li><li>Score 是该 ID 队伍的成绩</li><li>School 就是学校名称了是一个不定长的字符串</li><li>Rank 是排名，注意题目要求：非递减——就是可以连续相同的 rank，数学上可以叫驻点</li><li>TWS 是学校的总成绩，计算公式：<code>ScoreB/1.5 + ScoreA + ScoreT*1.5</code>，这里的 Score[TAB] 对应上面 ID 的第一位 [TAB]</li><li>Ns 是学校参赛队伍数量</li></ul><h3 id=\"排序规则：\"><a href=\"#排序规则：\" class=\"headerlink\" title=\"排序规则：\"></a>排序规则：</h3><p>首先按照 TWS 递减排序。<br>如果 TWS 相同，按照 Ns 递增排序。<br>如果 Ns 相同，按照学校名称的字母表顺序排序</p><p>啊哈，看到这道题有什么思路吗？</p><ul><li>看到这道题应该有的大致思路：<ol><li>使用字典（哈希表）来保存<code>学校名</code>和<code>学校</code></li><li>读取数据到字典(Complexity: O(N));</li><li>对字典，按照要求，进行排序(Complexity: O(2NlogN) or worst: O(2N^2));</li><li>输出，这里要注意排名（rank）的显示要求——非递减;</li></ol></li></ul><ol><li>想说其实这道题思路并不难，但是这道题的确花了我不少时间，因为最后两个测试点（5 points）总是超时。就算使用 Cpp unoredered_map 的处理时间也接近了 490ms，好悬。10^5 的数据量不敢小觑。</li><li>一开始选择数据结构的时候，我使用了标准库的 map 结构，大概可以当做一个红黑树。所以不管什么插入删除操作大概都是 O(logN) 的复杂度，这个复杂度太高了。后来改用 unorderd_map 结构，也即是哈希表，嗯，插入的时间复杂度接近 O(1) 了，很好。这里要感谢一下 Cpp 标准库，从 map 迁移到 unordered_map 只改了两处类型签名而已，非常方便。</li><li>为了让代码结构清晰，我设立了两个类，一个是 School 一个是 Result。</li><li>Result 中只有一个成员变量，其类型是： unordered_map&lt;string, School*&gt;</li><li>在 School 中，存放了学校的名称、总成绩、队伍数。值得提一下的是：为了避免冗余的强制类型转换 (double) -&gt; (long) 我使用一个惰性计算的技巧，即增加一个成员变量 long sc，在调用 get_score() 的时候才计算出 sc 的值，而如果 sc 已经被计算过了，那就直接返回 sc 的值。也算是一点点优化吧。</li><li>其他的比如说 cin 缓慢的问题（cin 会判断输入类型是否匹配，会比 scanf 慢），就没时间改了，如果有兴趣自己改改吧，也不难。</li></ol><p>照例（好吧，这是我第一次有机会写 PAT 的解题过程，没有前例^_^）<br>Cpp 代码如下：</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;unordered_map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//#define DEBUG</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> My &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> DEBUG</span></span><br><span class=\"line\">\t<span class=\"keyword\">long</span> cntlog = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tp</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">\t<span class=\"title\">inline</span> <span class=\"title\">void</span> <span class=\"title\">log</span>(<span class=\"title\">Tp</span> <span class=\"title\">x</span>, <span class=\"title\">string</span> <span class=\"title\">lv</span> = \"<span class=\"title\">INFO</span>\") &#123;</span></span><br><span class=\"line\">\t\tMy::cntlog++;</span><br><span class=\"line\">\t\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"--&gt; \"</span> &lt;&lt; lv &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; x &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">School</span> &#123;</span> <span class=\"comment\">// Class for saving status of each institution</span></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> name;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> counter;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> score;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> sc; <span class=\"comment\">// save time, for the convertion from double to long is somehow expensive</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tSchool(<span class=\"built_in\">string</span> &amp;name, <span class=\"keyword\">double</span> score, <span class=\"keyword\">char</span> level) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;name = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;counter = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;score = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;sc = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;append(score, level);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\">School* <span class=\"title\">append</span><span class=\"params\">(<span class=\"keyword\">double</span> score, <span class=\"keyword\">char</span> level)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;counter++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> lv = <span class=\"number\">1.0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (level == <span class=\"string\">'B'</span>)</span><br><span class=\"line\">\t\t\tlv = <span class=\"number\">2.0</span> / <span class=\"number\">3.0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (level == <span class=\"string\">'T'</span>)</span><br><span class=\"line\">\t\t\tlv = <span class=\"number\">1.5</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;score += score * lv;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get_counter</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>-&gt;counter;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">get_score</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>-&gt;sc == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>-&gt;sc = <span class=\"keyword\">long</span>(<span class=\"keyword\">this</span>-&gt;score);\t<span class=\"comment\">// In the test case as the `Sample Input`, this line will be hit 5 times</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>-&gt;sc;\t\t\t\t\t<span class=\"comment\">// and this line will be hit 49 times. So this `lazy initial tech` should save some time.</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">get_name</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>-&gt;name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Result</span> &#123;</span> <span class=\"comment\">// Class for saving the result, containing an unordered map of &lt;school name, School&gt;</span></span><br><span class=\"line\">\t<span class=\"built_in\">unordered_map</span> &lt;<span class=\"built_in\">string</span>, School*&gt; d;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">append</span><span class=\"params\">(<span class=\"built_in\">string</span> school_name, <span class=\"keyword\">int</span> score, <span class=\"keyword\">char</span> level)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (d.find(school_name) == d.end())</span><br><span class=\"line\">\t\t\td.insert(pair &lt;<span class=\"built_in\">string</span>, School*&gt; (school_name, <span class=\"keyword\">new</span> School(school_name, score, level)));</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\td[school_name]-&gt;append(score, level);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;pair&lt;<span class=\"built_in\">string</span>, School*&gt;&gt;&amp; sort() &#123; <span class=\"comment\">// sort function. use a lambda to costumize, and return a sorted vector</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">auto</span> cmp = [&amp;](<span class=\"keyword\">const</span> pair &lt;<span class=\"built_in\">string</span>, School*&gt; &amp;lhs, <span class=\"keyword\">const</span> pair &lt;<span class=\"built_in\">string</span>, School*&gt; &amp;rhs) -&gt; <span class=\"keyword\">bool</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (lhs.second-&gt;get_score() == rhs.second-&gt;get_score()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (lhs.second-&gt;get_counter() == rhs.second-&gt;get_counter())</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> lhs.second-&gt;get_name() &lt; rhs.second-&gt;get_name();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> lhs.second-&gt;get_counter() &lt; rhs.second-&gt;get_counter();</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> lhs.second-&gt;get_score() &gt; rhs.second-&gt;get_score();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\t<span class=\"built_in\">vector</span>&lt;pair&lt;<span class=\"built_in\">string</span>, School*&gt;&gt; *vec = <span class=\"keyword\">new</span> <span class=\"built_in\">vector</span>&lt;pair&lt;<span class=\"built_in\">string</span>, School*&gt;&gt;(<span class=\"keyword\">this</span>-&gt;d.begin(), <span class=\"keyword\">this</span>-&gt;d.end());</span><br><span class=\"line\">\t\t<span class=\"built_in\">std</span>::sort(vec-&gt;begin(), vec-&gt;end(), cmp);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> *vec;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> N;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; N;</span><br><span class=\"line\">\tResult* res = <span class=\"keyword\">new</span> Result();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (N--) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> level[<span class=\"number\">7</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> score;</span><br><span class=\"line\">\t\t<span class=\"built_in\">string</span> name;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span> &gt;&gt; level &gt;&gt; score &gt;&gt; name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> lv = level[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\ttransform(name.begin(), name.end(), name.begin(), ::<span class=\"built_in\">tolower</span>); \t<span class=\"comment\">// transform the school name to lower case</span></span><br><span class=\"line\">\t\tres-&gt;append(name, score, lv);\t\t\t\t\t\t\t\t\t<span class=\"comment\">// append to the result (as an unordered map)</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;pair&lt;<span class=\"built_in\">string</span>, School*&gt;&gt; r = res-&gt;sort();\t\t\t\t\t\t<span class=\"comment\">// sort the result and return a vector</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> n = r.size();</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; n &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> cnt = <span class=\"number\">1</span>, i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> iter = r.begin(); iter != r.end(); iter++) &#123;</span><br><span class=\"line\">\t\ti++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (iter != r.begin() <span class=\"keyword\">and</span> iter-&gt;second-&gt;get_score() != (iter - <span class=\"number\">1</span>)-&gt;second-&gt;get_score()) &#123; <span class=\"comment\">// calculate the rank of each institution (Complexity: O(1), so the outter for loop is O(N))</span></span><br><span class=\"line\">\t\t\tcnt = i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; cnt &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; iter-&gt;second-&gt;get_name() &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; iter-&gt;second-&gt;get_score() &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; iter-&gt;second-&gt;get_counter() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>Python 代码如下：(代码短，容易理解。逻辑和 C++ 代码一样，只是最后两个测试点超时)<br></p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">School</span>:</span></span><br><span class=\"line\">\tname = <span class=\"string\">''</span></span><br><span class=\"line\">\tscore = <span class=\"number\">0</span></span><br><span class=\"line\">\tcounter = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, school_name, score, level)</span>:</span></span><br><span class=\"line\">\t\tself.name = school_name</span><br><span class=\"line\">\t\tself.append(score, level)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">append</span><span class=\"params\">(self, score, level)</span>:</span></span><br><span class=\"line\">\t\tself.counter += <span class=\"number\">1</span></span><br><span class=\"line\">\t\tlv = <span class=\"number\">1</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> level == <span class=\"string\">'B'</span>:</span><br><span class=\"line\">\t\t\tlv = <span class=\"number\">2</span>/<span class=\"number\">3</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">elif</span> level == <span class=\"string\">'T'</span>:</span><br><span class=\"line\">\t\t\tlv = <span class=\"number\">1.5</span></span><br><span class=\"line\">\t\tself.score += score * lv</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> self</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_score_to_int</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">\t\tself.score = int(self.score)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> self</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">\ts = int(input())</span><br><span class=\"line\">\td = &#123;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(s):</span><br><span class=\"line\">\t\tt = input().split(<span class=\"string\">' '</span>)</span><br><span class=\"line\">\t\tlevel = t[<span class=\"number\">0</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">\t\tscore = int(t[<span class=\"number\">1</span>])</span><br><span class=\"line\">\t\tschool_name = t[<span class=\"number\">2</span>].lower()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> school_name <span class=\"keyword\">in</span> d.keys():</span><br><span class=\"line\">\t\t\td[school_name].append(score, level)</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\td[school_name] = School(school_name, score, level)</span><br><span class=\"line\">\td = sorted(d.items(), key=<span class=\"keyword\">lambda</span> x: [-x[<span class=\"number\">1</span>].score, x[<span class=\"number\">1</span>].counter, x[<span class=\"number\">0</span>]])\t<span class=\"comment\"># Could cost most of the time</span></span><br><span class=\"line\">\tprint(len(d))</span><br><span class=\"line\">\tcnt = <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(d)):</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> i &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> int(d[i][<span class=\"number\">1</span>].score) != int(d[i<span class=\"number\">-1</span>][<span class=\"number\">1</span>].score):</span><br><span class=\"line\">\t\t\tcnt = i+<span class=\"number\">1</span></span><br><span class=\"line\">\t\tprint(<span class=\"string\">\"&#123;0&#125; &#123;1&#125; &#123;2&#125; &#123;3&#125;\"</span>.format(cnt, d[i][<span class=\"number\">1</span>].name, int(d[i][<span class=\"number\">1</span>].score), d[i][<span class=\"number\">1</span>].counter))</span><br></pre></td></tr></table></figure><p></p>","categories":[],"tags":[{"name":"PAT","slug":"PAT","count":1,"path":"api/tags/PAT.json"}]}