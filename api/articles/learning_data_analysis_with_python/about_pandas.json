{"title":"Python 中的数据挖掘库 Pandas 的常用操作和容易出现误解的地方","slug":"learning_data_analysis_with_python/about_pandas","date":"2017-05-09T03:15:56.000Z","updated":"2018-04-19T08:03:09.433Z","comments":true,"path":"api/articles/learning_data_analysis_with_python/about_pandas.json","photos":[],"link":"","excerpt":"本文将主要总结 Python 库 Pandas 的一些常用操作和一些坑<br>","covers":null,"content":"<p>本文将主要总结 Python 库 Pandas 的一些常用操作和一些坑<br><a id=\"more\"></a></p><h2 id=\"Pandas-简介\"><a href=\"#Pandas-简介\" class=\"headerlink\" title=\"Pandas 简介\"></a>Pandas 简介</h2><p>Pandas 是一个开源的，基于 numpy 的数据挖掘库，因为基于 numpy ，一般来说其效率也不低。</p><blockquote><p><a href=\"http://pandas.pydata.org/\" target=\"_blank\" rel=\"noopener\">Pandas官网</a></p></blockquote><h2 id=\"Pandas-中主要数据结构\"><a href=\"#Pandas-中主要数据结构\" class=\"headerlink\" title=\"Pandas 中主要数据结构\"></a>Pandas 中主要数据结构</h2><p><code>DataFrame</code>：可以看做是一张表，有列名(<code>key</code>)，有行号(<code>index</code>)，每列有一个numpy的数据类型(<code>dtype</code>)。<br><code>Series</code>：可以看做是表的一列，有行号(<code>index</code>)和数据类型(<code>dtype</code>)。<br>可以把 <code>DataFrame</code> 看做是 <code>Series</code> 的集合，而 <code>Series</code> 是 numpy 中某类型的集合。</p><h2 id=\"Pandas-的一些常用操作\"><a href=\"#Pandas-的一些常用操作\" class=\"headerlink\" title=\"Pandas 的一些常用操作\"></a>Pandas 的一些常用操作</h2><ul><li><p>获取列名</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df.keys()</span><br></pre></td></tr></table></figure></li><li><p>删除列</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 其中参数 inplace 可以控制是否在原 DataFrame 中进行操作</span></span><br><span class=\"line\">new_df = df.drop(<span class=\"string\">\"time\"</span>, inplace=<span class=\"keyword\">False</span>)</span><br></pre></td></tr></table></figure></li><li><p>删除行</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 以下代码应该删除第 11 行和第 13 行</span></span><br><span class=\"line\">new_df = df.drop([<span class=\"number\">11</span>, <span class=\"number\">13</span>], inplace=<span class=\"keyword\">False</span>)</span><br><span class=\"line\"><span class=\"comment\"># 以下代码删除的是第 11 行到第 13 行</span></span><br><span class=\"line\">new_df = df.drop(range(<span class=\"number\">11</span>, <span class=\"number\">13</span>), inplace=<span class=\"keyword\">False</span>)</span><br></pre></td></tr></table></figure></li><li><p>行切片</p><ol><li><p>loc</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df.loc[df.index[[<span class=\"number\">0</span>, <span class=\"number\">2</span>]], <span class=\"string\">'A'</span>]</span><br></pre></td></tr></table></figure></li><li><p>iloc</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df.iloc[[<span class=\"number\">0</span>, <span class=\"number\">2</span>], df.columns.get_loc[<span class=\"string\">'A'</span>]]</span><br></pre></td></tr></table></figure></li><li><p>选择多列进行行切片</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df.iloc[[<span class=\"number\">0</span>, <span class=\"number\">2</span>], df.columns.get_indexer([<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>])]</span><br></pre></td></tr></table></figure></li><li><p>已废弃：<del>df.ix[[0,1,3,5]]</del></p></li></ol></li><li><p>将日期转换成时间</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#  使用 to_datetime 方法</span></span><br><span class=\"line\">pandas.to_datetime(df[<span class=\"string\">'datetimestring'</span>], format=<span class=\"keyword\">None</span>)</span><br><span class=\"line\"><span class=\"comment\"># 或者直接改变某列的 dtype</span></span><br><span class=\"line\">df[<span class=\"string\">'datetimestring'</span>].dtpye = datetime64</span><br><span class=\"line\"><span class=\"comment\"># 对 datetime64 类型的数据可以进行 .date() .time() .timestamp() 等操作</span></span><br><span class=\"line\">df[<span class=\"string\">'date'</span>] = df[<span class=\"string\">'datetimestring'</span>].date()</span><br><span class=\"line\">df[<span class=\"string\">'time'</span>] = df[<span class=\"string\">'datetimestring'</span>].time()</span><br><span class=\"line\">df[<span class=\"string\">'timestamp'</span>] = df[<span class=\"string\">'datetimestring'</span>].timestamp()</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"Pandas-使用上的一些坑\"><a href=\"#Pandas-使用上的一些坑\" class=\"headerlink\" title=\"Pandas 使用上的一些坑\"></a>Pandas 使用上的一些坑</h2><ol><li>关于 <code>index</code>，每次 drop 行以后最好都 df.reset_index()，不然下次按照 index 遍历的时候你就等着哭吧/微笑</li><li><code>dateutil.parser.parse(&#39;10/04/2016 10:20&#39;)</code> 可以直接将标格式的日期字符串转换成日期格式，而且 pandas 可以识别，不过因为必对每一个元素进行操作，效率可能会低，如果要转换一整列，使用上面提的 pd.to_datetime(df[‘key’])。</li><li>pandas 的列操作最好不要使用 map filter 等高阶函数，pandas 有提供 apply() 函数，参考<a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.apply.html\" target=\"_blank\" rel=\"noopener\">这里</a>。</li></ol>","categories":[],"tags":[{"name":"Python","slug":"Python","count":4,"path":"api/tags/Python.json"},{"name":"Pandas","slug":"Pandas","count":1,"path":"api/tags/Pandas.json"},{"name":"DataFrame","slug":"DataFrame","count":1,"path":"api/tags/DataFrame.json"},{"name":"Series","slug":"Series","count":1,"path":"api/tags/Series.json"}]}