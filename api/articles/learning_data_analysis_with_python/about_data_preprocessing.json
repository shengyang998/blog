{"title":"数据分析——数据预处理","slug":"learning_data_analysis_with_python/about_data_preprocessing","date":"2017-04-09T01:40:53.000Z","updated":"2018-09-02T13:21:57.484Z","comments":true,"path":"api/articles/learning_data_analysis_with_python/about_data_preprocessing.json","photos":[],"link":"","excerpt":"本文的主要内容是笔者在进行数学建模分析数据时遇到的预处理问题以及解决方案。本文预先假定读者熟悉 python 和其中的 pandas 框架，如果不熟悉看看官方文档就好。","covers":null,"content":"<p>本文的主要内容是笔者在进行数学建模分析数据时遇到的预处理问题以及解决方案。</p><p>本文预先假定读者熟悉 python 和其中的 pandas 框架，如果不熟悉看看官方文档就好。</p><a id=\"more\"></a><h1 id=\"0x00-总览\"><a href=\"#0x00-总览\" class=\"headerlink\" title=\"0x00 总览\"></a>0x00 总览</h1><p>拿到一堆数据，显而易见，首先\u000f要对数据进行一些观察，比如说查看分布情况、查看是否有缺失或异常值、是否有噪声等等；以及处理，比如说处理异常值和缺失值、对数据进行降噪等等……</p><p>观察到需要处理的值后，就要确定处理的方法</p><ul><li>缺失值的处理一般有拟合、回归算法（可以参考图像处理中的插值以及核回归算法）。</li><li>异常值的处理一般分成大类有：物理判别法和统计判别法，物理判别法就是指人为按照经验划定一条线，超过这条线的则认定为异常值，所以物理判别法这里不讲，主要讲讲统计判别法。</li><li>噪声的处理可以用：傅里叶变换（空间域-&gt;频率域）、小波\u000e变换（空间域-&gt;时频域）后滤波来实现，一般以小波滤波为优先。</li></ul><p>而笔者因为在写这篇文章的时候，面对的情况是不需要处理缺失值的，所以还没有具体尝试过处理缺失值的情况。因此这篇文章主要介绍的是：处理异常值和降噪。</p><h1 id=\"0x01-异常值的统计判别法\"><a href=\"#0x01-异常值的统计判别法\" class=\"headerlink\" title=\"0x01 异常值的统计判别法\"></a>0x01 异常值的统计判别法</h1><p>使用统计判别法的时候有两个要注意的点：</p><ol><li>去真：将本来属于该总体的、出现的概率小的、第二种情况的异常值判断出来舍去，就会犯错误。</li><li>存伪：不属于该总体但数值又和该总体平均值接近的数据被抽样抽出来，统计检验方法判断不出它是异常值，就会犯另一种错误。</li></ol><p>常用的统计判别法：</p><ul><li>拉依达准则</li><li>肖维勒准则</li><li>狄克逊准则</li><li>t检验(罗马诺夫斯基准则)</li><li>格拉布斯准则</li></ul><p>接下来分别进行详细介绍：</p><h3 id=\"拉依达准则\"><a href=\"#拉依达准则\" class=\"headerlink\" title=\"拉依达准则\"></a>拉依达准则</h3><p>其依据是，总体分布为正态分布的数据，其数据 <code>P( |x-u| &gt; 3𝝈 ) &lt; 0.003</code><br>u 为期望，𝝈 为标准差</p><p>所以，拉依达准则只需要计算当前值和期望的差是否大于3倍的标准差即可，非常简单。但是这个方法对数据为正态分布的要求比较高，而且不能检验样本量较小的情 况。所以后来使用较少。</p><ul><li>肖维勒准则 <code>|vi| = |x - u| &gt; Zc 𝝈</code><br>Zc是一个与测量次数相关的系数，可以查表获取。<br>改善了拉依达准则，但是因为没有固定的概率意义，后来使用得也比较少。</li></ul><p>对了这里介绍一下，关于异常值和是否需要剔除的常用标准（具体标准 的还是要按照数据来）</p><blockquote><p>与平均值的偏差超过三倍标准差的测定值，称为高度异常的异常值。在处理数据时，应剔除高度异常的异常值。异常值是否剔除，视具体情况而定。在统计检验时，指定为检出异常值的显著性水平α=0.05，称为检出水平；指定为检出高度异常的异常值的显著性水平α=0.01，称为舍弃水平，又称剔除水平(reject level)。</p></blockquote><h3 id=\"狄克逊准则\"><a href=\"#狄克逊准则\" class=\"headerlink\" title=\"狄克逊准则\"></a>狄克逊准则</h3><p>狄克逊准则是通过极差比判定和剔除异常数据。又称为 Q 检验法。<br>该准则认为异常数据应该是最大数据和最小数据，因此该其基本方法是将数据排序，检验最大数据和最小数据是否异常数据。</p><ul><li>其操作步骤是：<ol><li>排序</li><li>计算 f = (x(n)-x(n-1)) / (x(n)-x(1)) 或者 (x(2)-x(1)) / (x(n)-x(1))</li><li>根据狄克逊系数表，将 f 和 f(n, α)比较，若 f &gt; f(n, α) 则判定为异常数据<br>思路可以，但是如果离群值点有多个并且相近的话，比较难用这个方法处理。</li></ol></li></ul><h1 id=\"t-检验\"><a href=\"#t-检验\" class=\"headerlink\" title=\"t 检验\"></a>t 检验</h1><p>t检验准则与狄克逊准则相似，也是检验最大数据和最小数据。</p><ul><li>步骤：<ol><li>排序</li><li>对最大数据和最小数据分别计算 |x-u| ，如果 &gt; K(n, α)𝝈 则。判定为异常数据</li><li>注意其中的 u 和 𝝈 是不包括最大和最小值的均值和标准差，K(n, α) 也通过查表得到。</li></ol></li></ul><h3 id=\"格拉布斯准则\"><a href=\"#格拉布斯准则\" class=\"headerlink\" title=\"格拉布斯准则\"></a>格拉布斯准则</h3><p>格拉布斯准则是在未知总体标准差情况下，对正态样本或接近正态样本异常值的一种判别方法。<br>格拉布斯准则理论较严密，概率意义明确，可用于严格要求的场合，特别的，当n=20-100时，判别效果较好。</p><ul><li>其原理是：<br>某个测量值的残余误差 <code>|vi|= | x - u | &gt; T 𝝈</code> ，则判断此值中含有较大误差, 应予剔除。<br>T 值与重复测量次数 n 和置信概率 α 均有关，因此格拉布斯准则是比较好的判定准则。T 值可通过查表得到</li><li>采用格拉布斯方法判定异常数据的过程如下:<ol><li>选定危险率α<br>α是一个较小的百分数，例如1%，2.5%，5%，它 是采用格拉布斯方法判定异常数据出现误判的几率。</li><li>计算T值<br>如果x是可疑数据，则令 T = (x-u)/𝝈<br>格拉布斯准则有开源的 python 库，已经实现了其算法，我们可以直接用<br>首先安装该库：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pip install outliers_util</span><br></pre></td></tr></table></figure></li></ol></li></ul><p>然后在 Python 代码中做如下操作<br></p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> outliers <span class=\"keyword\">import</span> smirnov_grubbs <span class=\"keyword\">as</span> grubbs</span><br><span class=\"line\"><span class=\"comment\"># 1. 处理并且返回剔除后的结果集合</span></span><br><span class=\"line\">result = grubbs.test(data_list, alpha=<span class=\"number\">0.998</span>)</span><br><span class=\"line\"><span class=\"comment\"># 2. 处理并且返回异常值的 index 集合</span></span><br><span class=\"line\">result_index = []</span><br><span class=\"line\">result_index.append(grubbs.two_sided_test_indices(data_list, alpha=<span class=\"number\">0.998</span>))</span><br><span class=\"line\"><span class=\"comment\">#    使用 append() 的时候，返回值将是一个嵌套列表，故将其压平</span></span><br><span class=\"line\">result_index = sum(result_index, [])</span><br></pre></td></tr></table></figure><p></p><h1 id=\"0x02-噪声的处理\"><a href=\"#0x02-噪声的处理\" class=\"headerlink\" title=\"0x02 噪声的处理\"></a>0x02 噪声的处理</h1><p>一般情况小波降噪即可达到需要的程度，而且可以通过参数进行细致的调节。python 小波变换一般使用 pywt 库：</p><ul><li><p>安装：</p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install PyWavelets</span><br></pre></td></tr></table></figure></li><li><p>import</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pywt</span><br><span class=\"line\"><span class=\"comment\"># 单层分解的话，可以使用官方文档 tutorial 中提到的函数：</span></span><br><span class=\"line\">pywt.dwt()</span><br><span class=\"line\"><span class=\"comment\"># 而进行多层分解的话，使用下面的函数</span></span><br><span class=\"line\">coeff = pywt.wavedec()</span><br><span class=\"line\"><span class=\"comment\"># 重构使用waverec()</span></span><br><span class=\"line\">result = pywt.waverec()</span><br></pre></td></tr></table></figure></li></ul><p>以上函数具体的自己上官方手册查咯，这里不赘述了。</p><h3 id=\"小波降噪的步骤：\"><a href=\"#小波降噪的步骤：\" class=\"headerlink\" title=\"小波降噪的步骤：\"></a>小波降噪的步骤：</h3><ol><li><p>小波函数的选择</p><ol><li><p>正交性：</p><p>保持小波系数间的不相关性，提高除噪性能</p></li><li><p>紧支撑性：</p><p>紧支撑宽度越小，小波的局部分辨能力越好，除噪越精细</p></li><li><p>消失矩：</p><p>消失矩的特性使小波展开时消去信号的高阶平滑部分，因而小波变换只反映函数的高阶变换部分，从而反映信号奇异性的能力强。</p></li><li><p>对称性：</p><p>越对称的小波，在经过小波变换后，其偏差可能越小，因而有利于除噪后信号的恢复和重建。</p><p>因此，dbN(即Daubechies系列小波)、symN(Symlets系列小波)、coifN(Coiflet系列小波)这些系列的小波都可多做考量。</p></li></ol></li><li><p>阈值的确定</p><p>阈值的确定主要有以下几条准则：</p><ol><li><p>无偏风险估计准则(rigrsure)</p><p>基于Stein的无偏似然估计原理的自适应阈值选择方法。对每个阈值求出对应的风险值，选取风险最小的阈值。</p></li><li><p>固定阈值准则(sqtwolog)</p><p>设n为小波系数向量长度，则对应的阈值为：<code>Tr = sqrt(2*log(n))</code></p></li><li><p>混合准则(heursure)</p><p>它是rigrsure和sqtwolog准则的混合，当信噪比很低时，rigrsure准则估计有很大噪声，这时采用固定阈值。其阈值计算方法为：首先判断两个变量 Eta 和 Crit 的大小</p></li><li><p>极大极小准则(minimaxi)</p></li></ol></li><li><p>分解层次的确定</p><ul><li>根据多分辨率分析理论，高层分解的小波系数对应的是低频部分，而低频部分主要由信号构成。因此分解层次越高，去掉的低频成分越多，去噪效果越明显，但失真度也增大。为保守起见，分解层次不宜太高，最大不超过5层。对波动性更强的序列如收益序列，一般不超过3层。</li></ul></li></ol><h3 id=\"小波降噪实例（Python-实现）\"><a href=\"#小波降噪实例（Python-实现）\" class=\"headerlink\" title=\"小波降噪实例（Python 实现）\"></a>小波降噪实例（Python 实现）</h3><pre><code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wt</span><span class=\"params\">(data, keyname, wavefunc, level, m, n)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    小波降噪函数</span></span><br><span class=\"line\"><span class=\"string\">    - level: 分解层数；</span></span><br><span class=\"line\"><span class=\"string\">    - data: 保存列表类型的字典；</span></span><br><span class=\"line\"><span class=\"string\">    - keyname: 键名；</span></span><br><span class=\"line\"><span class=\"string\">    - index_list: 待处理序列；</span></span><br><span class=\"line\"><span class=\"string\">    - wavefunc: 选取的小波函数；</span></span><br><span class=\"line\"><span class=\"string\">    - m,n 选择进行阈值处理的小波系数层数</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 分解</span></span><br><span class=\"line\">    coeff = pywt.wavedec(data[keyname], wavefunc, mode=<span class=\"string\">'sym'</span>, level=level)</span><br><span class=\"line\">    <span class=\"comment\"># 设置 sgn 函数</span></span><br><span class=\"line\">    sgn = <span class=\"keyword\">lambda</span> x: <span class=\"number\">1</span> <span class=\"keyword\">if</span> x &gt; <span class=\"number\">0</span> <span class=\"keyword\">else</span> <span class=\"number\">-1</span> <span class=\"keyword\">if</span> x &lt; <span class=\"number\">0</span> <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># 降噪过程</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m, n + <span class=\"number\">1</span>):  <span class=\"comment\"># 选取小波系数层数为 m~n 层</span></span><br><span class=\"line\">        cD = coeff[i]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(len(cD)):</span><br><span class=\"line\">            Tr = np.sqrt(<span class=\"number\">2</span> * np.log(len(cD)))  <span class=\"comment\"># 计算阈值</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> cD[j] &gt;= Tr:</span><br><span class=\"line\">                coeff[i][j] = sgn(cD[j]) - Tr  <span class=\"comment\"># 使用 sgn 函数向零收缩</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                coeff[i][j] = <span class=\"number\">0</span>  <span class=\"comment\"># 低于阈值置零</span></span><br><span class=\"line\">    <span class=\"comment\"># 重新构建</span></span><br><span class=\"line\">    denoised_data_list = my_wave_rec(coeff, wavefunc, data[keyname])</span><br><span class=\"line\">    <span class=\"comment\"># 为了避免出现负值的情况，取绝对值</span></span><br><span class=\"line\">    abs_denoised_list = list(map(<span class=\"keyword\">lambda</span> x: abs(x), denoised_data_list))</span><br><span class=\"line\">    <span class=\"comment\"># 返回降噪结果</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> abs_denoised_list</span><br></pre></td></tr></table></figure>\n</code></pre><h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ol><li>中国科学技术大学统计与金融系 - 金百锁副教授的课件： <a href=\"http://staff.ustc.edu.cn/~jbs/chapt3.pdf\" target=\"_blank\" rel=\"noopener\">第三章统计数据的预处理</a></li><li>优矿 - fyiqi： <a href=\"https://uqer.io/community/share/57175736228e5b82757f53e2\" target=\"_blank\" rel=\"noopener\">时间序列的小波去噪</a></li></ol>","categories":[],"tags":[{"name":"Python","slug":"Python","count":4,"path":"api/tags/Python.json"},{"name":"异常值","slug":"异常值","count":1,"path":"api/tags/异常值.json"},{"name":"缺失值","slug":"缺失值","count":1,"path":"api/tags/缺失值.json"},{"name":"噪声","slug":"噪声","count":1,"path":"api/tags/噪声.json"},{"name":"小波","slug":"小波","count":1,"path":"api/tags/小波.json"},{"name":"降噪","slug":"降噪","count":1,"path":"api/tags/降噪.json"}]}