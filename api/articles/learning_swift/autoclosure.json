{"title":"Autoclosure and Lazy Evaluation","slug":"learning_swift/autoclosure","date":"2017-01-29T12:18:31.000Z","updated":"2017-02-04T08:07:12.000Z","comments":true,"path":"api/articles/learning_swift/autoclosure.json","photos":[],"link":"","excerpt":"A note about how to use @autoclosure in Swift programming language","covers":null,"content":"<p>A note about how to use <code>@autoclosure</code> in Swift programming language</p><a id=\"more\"></a><h2 id=\"A-short-explain-to-autoclosure\"><a href=\"#A-short-explain-to-autoclosure\" class=\"headerlink\" title=\"A short explain to @autoclosure\"></a>A short explain to <code>@autoclosure</code></h2><p>What <code>@autoclosure</code> have done is to wrap a expressionn to a closure.</p><h2 id=\"for-example\"><a href=\"#for-example\" class=\"headerlink\" title=\"for example\"></a>for example</h2><p>We define a function as below:<br></p><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printIfTrue</span><span class=\"params\">(<span class=\"number\">_</span> clo: <span class=\"params\">()</span></span></span>-&gt;<span class=\"type\">Bool</span> )&#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(clo())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>We can call the function like this:<br></p><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printIfTrue( &#123; <span class=\"keyword\">return</span> <span class=\"number\">2</span>&gt;<span class=\"number\">1</span> &#125; )</span><br></pre></td></tr></table></figure><p></p><p>OR like this:<br></p><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printIfTrue&#123; <span class=\"keyword\">return</span> <span class=\"number\">2</span>&gt;<span class=\"number\">1</span> &#125;</span><br></pre></td></tr></table></figure><p></p><p>OR even ignore the key word <code>return</code>:<br></p><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printIfTrue&#123; <span class=\"number\">2</span>&gt;<span class=\"number\">1</span> &#125;</span><br></pre></td></tr></table></figure><p></p><p>But if you want a clearer syntax like:<br></p><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printIfTrue( <span class=\"number\">2</span>&gt;<span class=\"number\">1</span> )</span><br></pre></td></tr></table></figure><p></p><p>Then you must use <code>@autoclosure</code>, like:<br></p><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printIfTrue</span><span class=\"params\">(<span class=\"number\">_</span> clo: @autoclosure <span class=\"params\">()</span></span></span>-&gt;<span class=\"type\">Bool</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(clo())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>Is these all it can do? Well, Yes, and No. What it can do depends on you, just go on and have a look:</p><h2 id=\"Lazy-evaluation\"><a href=\"#Lazy-evaluation\" class=\"headerlink\" title=\"Lazy evaluation\"></a>Lazy evaluation</h2><p>Let’s define two similar function and try to compare their speed:<br>The first function:<br></p><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">logicalAnd</span><span class=\"params\">(<span class=\"number\">_</span> <span class=\"keyword\">left</span>: @autoclosure <span class=\"params\">()</span></span></span> -&gt; <span class=\"type\">Bool</span>, <span class=\"number\">_</span> <span class=\"keyword\">right</span>: <span class=\"meta\">@autoclosure</span> () -&gt; <span class=\"type\">Bool</span>) -&gt; <span class=\"type\">Bool</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">left</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">right</span>()&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>The second function:<br></p><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">logicalAnd</span><span class=\"params\">(<span class=\"number\">_</span> <span class=\"keyword\">left</span>: Bool, <span class=\"number\">_</span> <span class=\"keyword\">right</span>: Bool)</span></span> -&gt; <span class=\"type\">Bool</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">left</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">right</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p></p><p>It’s same to call these two functions:<br></p><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logicalAnd(<span class=\"literal\">true</span>, <span class=\"literal\">true</span>)      <span class=\"comment\">//return true</span></span><br><span class=\"line\">logicalAnd(<span class=\"number\">2</span>&gt;<span class=\"number\">1</span>, <span class=\"number\">2</span>&gt;<span class=\"number\">1</span>)        <span class=\"comment\">//return true</span></span><br></pre></td></tr></table></figure><p></p><p>You might have noticed that the difference between them is only the type of parameter.</p><p>And because of that, the first function is faster than the second one.</p><p>The first function can do <code>lazy evaluation</code> to the right parameter, and if the parameter needs long time calculation, its advantage will show.</p><p>While the second one? It must determine the parameter before the function is called, in other way, it cannot do <code>lazy evaluation</code> and will cost longer time.</p><p>So that is what most interesting thing of <code>@autoclosure</code>.</p><p>And the operator <code>??</code>, <code>&amp;&amp;</code>, <code>||</code> in standard lib of Swift is also do the same.</p>","categories":[],"tags":[{"name":"iOS","slug":"iOS","count":9,"path":"api/tags/iOS.json"},{"name":"Programming","slug":"Programming","count":13,"path":"api/tags/Programming.json"},{"name":"Swift","slug":"Swift","count":4,"path":"api/tags/Swift.json"},{"name":"autoclosure","slug":"autoclosure","count":1,"path":"api/tags/autoclosure.json"},{"name":"lazy evaluation","slug":"lazy-evaluation","count":1,"path":"api/tags/lazy-evaluation.json"}]}