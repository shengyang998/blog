{"title":"LLDB Tutorial","slug":"learning_swift/LLDB_Usage","date":"2017-01-31T12:02:09.000Z","updated":"2017-01-31T14:07:07.000Z","comments":true,"path":"api/articles/learning_swift/LLDB_Usage.json","photos":[],"link":"","excerpt":"According to The LLDB Debuger:LLDB is a next generation, high-performance debugger. It is built as a set of reusable components which highly leverage existing libraries in the larger LLVM Project, such as the Clang expression parser and LLVM disassembler.<br>LLDB is the default debugger in Xcode on Mac OS X and supports debugging C, Objective-C and C++ on the desktop and iOS devices and simulator.So, we can assume LLDB a the advanced version of the gdb debuger. And it’s almost backword compatible.<br>","covers":null,"content":"<p>According to <a href=\"https://lldb.llvm.org\" target=\"_blank\" rel=\"noopener\">The LLDB Debuger</a>:</p><blockquote><p>LLDB is a next generation, high-performance debugger. It is built as a set of reusable components which highly leverage existing libraries in the larger LLVM Project, such as the Clang expression parser and LLVM disassembler.<br>LLDB is the default debugger in Xcode on Mac OS X and supports debugging C, Objective-C and C++ on the desktop and iOS devices and simulator.</p></blockquote><p>So, we can assume LLDB a the advanced version of the gdb debuger. And it’s almost backword compatible.<br><a id=\"more\"></a></p><h2 id=\"Installation\"><a href=\"#Installation\" class=\"headerlink\" title=\"Installation\"></a>Installation</h2><p>First of all, you will need a compiler, such as <code>gnu g++</code> <code>visual c++</code> <code>clang</code> and so forth.</p><p>Particularly, if you are a macOS user, just download Xcode from App Store and install <code>Xcode command line tools</code> from Xcode’s menu and everything will be ok.</p><p>If you are using Linux, please download <a href=\"http://apt.llvm.org\" target=\"_blank\" rel=\"noopener\">LLVM Debian/Ubuntu nightly packages</a></p><blockquote><p>The packages provide <code>LLVM</code> + <code>Clang</code> + <code>compiler-rt</code> + <code>polly</code> + <code>LLDB</code> + <code>LLD</code></p></blockquote><h2 id=\"Basic-usage\"><a href=\"#Basic-usage\" class=\"headerlink\" title=\"Basic usage\"></a>Basic usage</h2><p>After you installed, you can use lldb to debug a binary file that compiled with <code>g++ -g</code> or <code>clang -g</code> like this:<br></p><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># compile with:</span></span></span><br><span class=\"line\">    g++ a.cpp -o a -g --std=c++11;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># debug with:</span></span></span><br><span class=\"line\">    lldb a</span><br></pre></td></tr></table></figure><p></p><p>After start debugging, you can do:</p><ul><li>Set breakpoint with <code>b (line number)</code></li><li>Run program with command <code>r</code></li><li>Source level single step in the currently selected thread <code>step</code> or <code>s</code></li><li>Source level single step over in the currently selected thread <code>next</code> or <code>n</code></li><li>Set a breakpoint at all functions named main <code>breakpoint set --name main</code> or <code>b main</code></li><li>Set a breakpoint in file test.c at line 12 <code>break test.c:12</code> or <code>b test.c:12</code></li><li>List all breakpoints <code>breakpoint list</code> or <code>br l</code></li><li>Delete a breakpoint <code>breakpoint delete 1</code> or <code>br del 1</code></li><li>Print expr <code>p (obj name)</code></li><li>Print the ObjC “description” of an object <code>po (obj name)</code></li><li>Print local variable and its address <code>fr v -R (obj name)</code></li><li>Quit <code>quit</code> or <code>q</code></li></ul><blockquote><p>The difference (as I understand it) is that frame variable is only for printing the contents of variables, whereas print is a shortcut for expression – and can evaluate arbitrary C and Objective-C expressions.<br>To summarize: <code>frame variable</code> is for variables and <code>print</code> (or expr) is for expressions. In the case of one variable they both work equally well. via <a href=\"http://stackoverflow.com/questions/17656071/lldb-command-fr-v-var-vs-p-var\" target=\"_blank\" rel=\"noopener\">Martin R stackOverFlow</a></p></blockquote>","categories":[],"tags":[{"name":"LLDB","slug":"LLDB","count":1,"path":"api/tags/LLDB.json"},{"name":"GDB","slug":"GDB","count":1,"path":"api/tags/GDB.json"},{"name":"Debug","slug":"Debug","count":1,"path":"api/tags/Debug.json"}]}