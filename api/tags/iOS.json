{"name":"iOS","slug":"iOS","count":9,"postlist":[{"title":"ARC Rules","slug":"learning_iOS/ARC_Rules","date":"2017-01-29T02:19:41.000Z","updated":"2017-01-29T03:30:19.000Z","comments":true,"path":"api/articles/learning_iOS/ARC_Rules.json","excerpt":"<p>A note for book <a href=\"http://www.apress.com/us/book/9781430241164\" target=\"_blank\" rel=\"noopener\">Pro Multithreading and Memory Management for iOS and OS X</a><br>ARC is summarized in Apple’s own words:</p><blockquote><p>ARC in Objective-C makes memory management the job of the compiler. By enabling ARC with the new Apple LLVM compiler, you will never need to type retain or release again, dramatically simplifying the development process, while reducing craches and memory leaks. The compiler has a complete understanding of your objects, and releases each object the instant it is no longer used, so apps run as fast as ever, with predictable, smooth performance.</p></blockquote>","keywords":null,"cover":null,"content":null,"text":"A note for book Pro Multithreading and Memory Management for iOS and OS X<br>ARC is summarized in Apple’s own words:ARC in Objective-C makes","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"iOS","slug":"iOS","count":9,"path":"api/tags/iOS.json"},{"name":"Programming","slug":"Programming","count":13,"path":"api/tags/Programming.json"},{"name":"ARC","slug":"ARC","count":1,"path":"api/tags/ARC.json"},{"name":"Rules","slug":"Rules","count":1,"path":"api/tags/Rules.json"},{"name":"Objective C","slug":"Objective-C","count":4,"path":"api/tags/Objective-C.json"},{"name":"Coming soon...","slug":"Coming-soon","count":3,"path":"api/tags/Coming-soon.json"}]},{"title":"Block 简介","slug":"learning_iOS/Block-in-Objc","date":"2017-01-03T17:13:54.000Z","updated":"2017-01-29T02:27:27.000Z","comments":true,"path":"api/articles/learning_iOS/Block-in-Objc.json","excerpt":"<p>什么是 Block？Block 可以实现闭包。Block 与函数类似，只不过是直接定义在另一个函数里。Block 也可以访问、捕获它被声明的区域内的所有变量。而且 Block 因为有返回类型，它其实也可以作为个值来对待。<br>","keywords":null,"cover":null,"content":null,"text":"什么是 Block？Block 可以实现闭包。Block 与函数类似，只不过是直接定义在另一个函数里。Block 也可以访问、捕获它被声明的区域内的所有变量。而且 Block 因为有返回类型，它其实也可以作为个值来对待。<br>定义 Block 的语法结构如下1<br>retur","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"iOS","slug":"iOS","count":9,"path":"api/tags/iOS.json"},{"name":"Programming","slug":"Programming","count":13,"path":"api/tags/Programming.json"},{"name":"Objective C","slug":"Objective-C","count":4,"path":"api/tags/Objective-C.json"},{"name":"Block","slug":"Block","count":1,"path":"api/tags/Block.json"}]},{"title":"关于 SequenceType","slug":"learning_iOS/SequenceType","date":"2017-01-25T07:47:23.000Z","updated":"2017-01-29T02:27:33.000Z","comments":true,"path":"api/articles/learning_iOS/SequenceType.json","excerpt":"<p>Coming soon…<br>","keywords":null,"cover":null,"content":null,"text":"Coming soon…<br>从 Array 开始","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"iOS","slug":"iOS","count":9,"path":"api/tags/iOS.json"},{"name":"Programming","slug":"Programming","count":13,"path":"api/tags/Programming.json"},{"name":"Coming soon...","slug":"Coming-soon","count":3,"path":"api/tags/Coming-soon.json"},{"name":"Sequence","slug":"Sequence","count":1,"path":"api/tags/Sequence.json"},{"name":"type","slug":"type","count":2,"path":"api/tags/type.json"}]},{"title":"关于UIAlertController","slug":"learning_iOS/UIAlertController","date":"2017-01-03T17:09:49.000Z","updated":"2017-01-29T02:27:28.000Z","comments":true,"path":"api/articles/learning_iOS/UIAlertController.json","excerpt":"<p>个人学习使用 UIAlertController 的时候的总结<br>","keywords":null,"cover":null,"content":null,"text":"个人学习使用 UIAlertController 的时候的总结<br><br>在 iOS8 以后，苹果推出了一个新的 Alert 类：UIAlertController。原有的UIAlertView已经不推荐使用。故本文主要介绍UIAlertController如何使用UIAle","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"iOS","slug":"iOS","count":9,"path":"api/tags/iOS.json"},{"name":"Programming","slug":"Programming","count":13,"path":"api/tags/Programming.json"},{"name":"Objective C","slug":"Objective-C","count":4,"path":"api/tags/Objective-C.json"},{"name":"UIAlertController","slug":"UIAlertController","count":1,"path":"api/tags/UIAlertController.json"}]},{"title":"UITableView","slug":"learning_iOS/UITableView","date":"2017-01-03T17:07:32.000Z","updated":"2017-01-29T02:27:32.000Z","comments":true,"path":"api/articles/learning_iOS/UITableView.json","excerpt":"<p>个人学习使用 UITableView 的时候的总结<br>","keywords":null,"cover":null,"content":null,"text":"个人学习使用 UITableView 的时候的总结<br>设置数据源 （UITableViewDataSource）需要数据源来展示数据，dataSource。会向数据源查询一共多少行数据以及每一行显示什么数据不论什么对象，只要其遵循 UITableViewDataSource ","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"iOS","slug":"iOS","count":9,"path":"api/tags/iOS.json"},{"name":"Programming","slug":"Programming","count":13,"path":"api/tags/Programming.json"},{"name":"UITableView","slug":"UITableView","count":1,"path":"api/tags/UITableView.json"},{"name":"ObjC","slug":"ObjC","count":1,"path":"api/tags/ObjC.json"},{"name":"Delegate","slug":"Delegate","count":1,"path":"api/tags/Delegate.json"},{"name":"DataSource","slug":"DataSource","count":1,"path":"api/tags/DataSource.json"}]},{"title":"Coordinate System","slug":"learning_iOS/coordinate-system","date":"2017-01-03T17:12:31.000Z","updated":"2017-01-29T02:27:33.000Z","comments":true,"path":"api/articles/learning_iOS/coordinate-system.json","excerpt":"<p>iOS 的坐标系统<br>","keywords":null,"cover":null,"content":null,"text":"iOS 的坐标系统<br><br>每一个 view 都有它的 coordinate system。 原点在（0，0）， 拥有宽度和高度属性。<br>在 iOS 中使用 bounds 来描述 coordinate system。<br>iOS 中的 frame 的 origin 属","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"iOS","slug":"iOS","count":9,"path":"api/tags/iOS.json"},{"name":"Programming","slug":"Programming","count":13,"path":"api/tags/Programming.json"},{"name":"Coordinate","slug":"Coordinate","count":1,"path":"api/tags/Coordinate.json"},{"name":"System","slug":"System","count":1,"path":"api/tags/System.json"},{"name":"坐标系统","slug":"坐标系统","count":1,"path":"api/tags/坐标系统.json"}]},{"title":"Swift 中如何获取实例类型","slug":"learning_iOS/get-type-of-instance","date":"2017-01-15T02:17:03.000Z","updated":"2017-01-29T02:27:30.000Z","comments":true,"path":"api/articles/learning_iOS/get-type-of-instance.json","excerpt":"<p>一门编程语言的动态特性，最基础的就是获取一个实例的类型。<br>","keywords":null,"cover":null,"content":null,"text":"一门编程语言的动态特性，最基础的就是获取一个实例的类型。<br>在 ObjC 中我们怎么做？在 ObjC 中我们可以通过一个实例的 class 方法来获取其类型名<br>1<br>2<br>NSDate *date = [NSDate date];<br>NSLog(@\"%@\",","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"iOS","slug":"iOS","count":9,"path":"api/tags/iOS.json"},{"name":"Programming","slug":"Programming","count":13,"path":"api/tags/Programming.json"},{"name":"Swift","slug":"Swift","count":4,"path":"api/tags/Swift.json"},{"name":"type","slug":"type","count":2,"path":"api/tags/type.json"},{"name":"language","slug":"language","count":1,"path":"api/tags/language.json"},{"name":"instance","slug":"instance","count":1,"path":"api/tags/instance.json"}]},{"title":"iOS 关闭键盘方式的小结","slug":"learning_iOS/keyboard-dissmissing","date":"2017-01-03T17:04:40.000Z","updated":"2017-01-29T02:27:31.000Z","comments":true,"path":"api/articles/learning_iOS/keyboard-dissmissing.json","excerpt":"<p>如何优雅的关闭 iOS 键盘，Objective C 语言。<br>","keywords":null,"cover":null,"content":null,"text":"如何优雅的关闭 iOS 键盘，Objective C 语言。<br>收起键盘方法点击return键收起，使用UITextFieldDelegate中的方法<br>- (BOOL)textFieldShouldReturn:(UITextField *)textField{retu","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"iOS","slug":"iOS","count":9,"path":"api/tags/iOS.json"},{"name":"Programming","slug":"Programming","count":13,"path":"api/tags/Programming.json"},{"name":"Objective C","slug":"Objective-C","count":4,"path":"api/tags/Objective-C.json"},{"name":"keyboard","slug":"keyboard","count":1,"path":"api/tags/keyboard.json"}]},{"title":"Autoclosure and Lazy Evaluation","slug":"learning_swift/autoclosure","date":"2017-01-29T12:18:31.000Z","updated":"2017-02-04T08:07:12.000Z","comments":true,"path":"api/articles/learning_swift/autoclosure.json","excerpt":"<p>A note about how to use <code>@autoclosure</code> in Swift programming language</p>","keywords":null,"cover":null,"content":null,"text":"A note about how to use @autoclosure in Swift programming languageA short explain to @autoclosureWhat @autoclosure have done is to wrap a ex","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"iOS","slug":"iOS","count":9,"path":"api/tags/iOS.json"},{"name":"Programming","slug":"Programming","count":13,"path":"api/tags/Programming.json"},{"name":"Swift","slug":"Swift","count":4,"path":"api/tags/Swift.json"},{"name":"autoclosure","slug":"autoclosure","count":1,"path":"api/tags/autoclosure.json"},{"name":"lazy evaluation","slug":"lazy-evaluation","count":1,"path":"api/tags/lazy-evaluation.json"}]}]}