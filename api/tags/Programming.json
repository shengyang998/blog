{"name":"Programming","slug":"Programming","count":13,"postlist":[{"title":"《代码整洁之道》笔记","slug":"learning_clean_code/clean_code","date":"2018-07-29T15:32:15.663Z","updated":"2019-01-08T10:07:29.909Z","comments":true,"path":"api/articles/learning_clean_code/clean_code.json","excerpt":"<blockquote><p>这座楼，除了我的房间以外，已经彻底基皮化了。”<br>“基皮化？”她莫名其妙。<br>“基皮就是没用的东西，垃圾邮件啊，空火柴盒啊，口香糖包装纸啊，昨天的报纸啊。周围没人的时候，基皮就会自我繁殖。比如，如果你睡前在房间里留了些基皮，第二天醒来就会发现基皮增加了一倍。基皮总是会越变越多。”<br>“我明白了。”女孩迟疑地盯着他，不知该不该相信他，一时无法确定他是不是在开玩笑。<br>“这就是基皮第一定律，”他说，“‘基皮驱逐非基皮’。就像格拉舍姆的劣币驱逐良币定律。那些空房间里头，没有活人在抵抗基皮。”</p></blockquote><p>—— P.K.Dick, Do Androids Dream of Electric Sheep?</p><p>就如房间一样，代码也要时常打理才能保持清洁，否则会被“基皮”占领，最终因‘基皮驱逐非基皮’而崩溃。基皮是小说里的概念，如果借助热力学定律里的“熵”的概念，对于代码这种既抽象又精确的事物来说，熵越低自然就越好。<br>那么如何能写出低熵的代码呢？很遗憾，这需要经验，非常考验程序员之功力。而《代码整洁之道》就是这样一本“低熵代码编写指南”，借助它可以<strong>快速入门</strong>编写低熵的代码。但是这也只是一本快速入门书而已，尽信书不如无书，具体还是要在遵循规则中突破规则。<br>这本书的核心观点就是要【清晰】，而要做到这一点的方法论就是【分层、短小】……</p>","keywords":null,"cover":null,"content":null,"text":"这座楼，除了我的房间以外，已经彻底基皮化了。”<br>“基皮化？”她莫名其妙。<br>“基皮就是没用的东西，垃圾邮件啊，空火柴盒啊，口香糖包装纸啊，昨天的报纸啊。周围没人的时候，基皮就会自我繁殖。比如，如果你睡前在房间里留了些基皮，第二天醒来就会发现基皮增加了一倍。基皮总是会越变","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"Programming","slug":"Programming","count":13,"path":"api/tags/Programming.json"},{"name":"Clean Code","slug":"Clean-Code","count":1,"path":"api/tags/Clean-Code.json"}]},{"title":"ARC Rules","slug":"learning_iOS/ARC_Rules","date":"2017-01-29T02:19:41.000Z","updated":"2017-01-29T03:30:19.000Z","comments":true,"path":"api/articles/learning_iOS/ARC_Rules.json","excerpt":"<p>A note for book <a href=\"http://www.apress.com/us/book/9781430241164\" target=\"_blank\" rel=\"noopener\">Pro Multithreading and Memory Management for iOS and OS X</a><br>ARC is summarized in Apple’s own words:</p><blockquote><p>ARC in Objective-C makes memory management the job of the compiler. By enabling ARC with the new Apple LLVM compiler, you will never need to type retain or release again, dramatically simplifying the development process, while reducing craches and memory leaks. The compiler has a complete understanding of your objects, and releases each object the instant it is no longer used, so apps run as fast as ever, with predictable, smooth performance.</p></blockquote>","keywords":null,"cover":null,"content":null,"text":"A note for book Pro Multithreading and Memory Management for iOS and OS X<br>ARC is summarized in Apple’s own words:ARC in Objective-C makes","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"iOS","slug":"iOS","count":9,"path":"api/tags/iOS.json"},{"name":"Programming","slug":"Programming","count":13,"path":"api/tags/Programming.json"},{"name":"ARC","slug":"ARC","count":1,"path":"api/tags/ARC.json"},{"name":"Rules","slug":"Rules","count":1,"path":"api/tags/Rules.json"},{"name":"Objective C","slug":"Objective-C","count":4,"path":"api/tags/Objective-C.json"},{"name":"Coming soon...","slug":"Coming-soon","count":3,"path":"api/tags/Coming-soon.json"}]},{"title":"Block 简介","slug":"learning_iOS/Block-in-Objc","date":"2017-01-03T17:13:54.000Z","updated":"2017-01-29T02:27:27.000Z","comments":true,"path":"api/articles/learning_iOS/Block-in-Objc.json","excerpt":"<p>什么是 Block？Block 可以实现闭包。Block 与函数类似，只不过是直接定义在另一个函数里。Block 也可以访问、捕获它被声明的区域内的所有变量。而且 Block 因为有返回类型，它其实也可以作为个值来对待。<br>","keywords":null,"cover":null,"content":null,"text":"什么是 Block？Block 可以实现闭包。Block 与函数类似，只不过是直接定义在另一个函数里。Block 也可以访问、捕获它被声明的区域内的所有变量。而且 Block 因为有返回类型，它其实也可以作为个值来对待。<br>定义 Block 的语法结构如下1<br>retur","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"iOS","slug":"iOS","count":9,"path":"api/tags/iOS.json"},{"name":"Programming","slug":"Programming","count":13,"path":"api/tags/Programming.json"},{"name":"Objective C","slug":"Objective-C","count":4,"path":"api/tags/Objective-C.json"},{"name":"Block","slug":"Block","count":1,"path":"api/tags/Block.json"}]},{"title":"关于 SequenceType","slug":"learning_iOS/SequenceType","date":"2017-01-25T07:47:23.000Z","updated":"2017-01-29T02:27:33.000Z","comments":true,"path":"api/articles/learning_iOS/SequenceType.json","excerpt":"<p>Coming soon…<br>","keywords":null,"cover":null,"content":null,"text":"Coming soon…<br>从 Array 开始","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"iOS","slug":"iOS","count":9,"path":"api/tags/iOS.json"},{"name":"Programming","slug":"Programming","count":13,"path":"api/tags/Programming.json"},{"name":"Coming soon...","slug":"Coming-soon","count":3,"path":"api/tags/Coming-soon.json"},{"name":"Sequence","slug":"Sequence","count":1,"path":"api/tags/Sequence.json"},{"name":"type","slug":"type","count":2,"path":"api/tags/type.json"}]},{"title":"关于UIAlertController","slug":"learning_iOS/UIAlertController","date":"2017-01-03T17:09:49.000Z","updated":"2017-01-29T02:27:28.000Z","comments":true,"path":"api/articles/learning_iOS/UIAlertController.json","excerpt":"<p>个人学习使用 UIAlertController 的时候的总结<br>","keywords":null,"cover":null,"content":null,"text":"个人学习使用 UIAlertController 的时候的总结<br><br>在 iOS8 以后，苹果推出了一个新的 Alert 类：UIAlertController。原有的UIAlertView已经不推荐使用。故本文主要介绍UIAlertController如何使用UIAle","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"iOS","slug":"iOS","count":9,"path":"api/tags/iOS.json"},{"name":"Programming","slug":"Programming","count":13,"path":"api/tags/Programming.json"},{"name":"Objective C","slug":"Objective-C","count":4,"path":"api/tags/Objective-C.json"},{"name":"UIAlertController","slug":"UIAlertController","count":1,"path":"api/tags/UIAlertController.json"}]},{"title":"UITableView","slug":"learning_iOS/UITableView","date":"2017-01-03T17:07:32.000Z","updated":"2017-01-29T02:27:32.000Z","comments":true,"path":"api/articles/learning_iOS/UITableView.json","excerpt":"<p>个人学习使用 UITableView 的时候的总结<br>","keywords":null,"cover":null,"content":null,"text":"个人学习使用 UITableView 的时候的总结<br>设置数据源 （UITableViewDataSource）需要数据源来展示数据，dataSource。会向数据源查询一共多少行数据以及每一行显示什么数据不论什么对象，只要其遵循 UITableViewDataSource ","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"iOS","slug":"iOS","count":9,"path":"api/tags/iOS.json"},{"name":"Programming","slug":"Programming","count":13,"path":"api/tags/Programming.json"},{"name":"UITableView","slug":"UITableView","count":1,"path":"api/tags/UITableView.json"},{"name":"ObjC","slug":"ObjC","count":1,"path":"api/tags/ObjC.json"},{"name":"Delegate","slug":"Delegate","count":1,"path":"api/tags/Delegate.json"},{"name":"DataSource","slug":"DataSource","count":1,"path":"api/tags/DataSource.json"}]},{"title":"Coordinate System","slug":"learning_iOS/coordinate-system","date":"2017-01-03T17:12:31.000Z","updated":"2017-01-29T02:27:33.000Z","comments":true,"path":"api/articles/learning_iOS/coordinate-system.json","excerpt":"<p>iOS 的坐标系统<br>","keywords":null,"cover":null,"content":null,"text":"iOS 的坐标系统<br><br>每一个 view 都有它的 coordinate system。 原点在（0，0）， 拥有宽度和高度属性。<br>在 iOS 中使用 bounds 来描述 coordinate system。<br>iOS 中的 frame 的 origin 属","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"iOS","slug":"iOS","count":9,"path":"api/tags/iOS.json"},{"name":"Programming","slug":"Programming","count":13,"path":"api/tags/Programming.json"},{"name":"Coordinate","slug":"Coordinate","count":1,"path":"api/tags/Coordinate.json"},{"name":"System","slug":"System","count":1,"path":"api/tags/System.json"},{"name":"坐标系统","slug":"坐标系统","count":1,"path":"api/tags/坐标系统.json"}]},{"title":"Swift 中如何获取实例类型","slug":"learning_iOS/get-type-of-instance","date":"2017-01-15T02:17:03.000Z","updated":"2017-01-29T02:27:30.000Z","comments":true,"path":"api/articles/learning_iOS/get-type-of-instance.json","excerpt":"<p>一门编程语言的动态特性，最基础的就是获取一个实例的类型。<br>","keywords":null,"cover":null,"content":null,"text":"一门编程语言的动态特性，最基础的就是获取一个实例的类型。<br>在 ObjC 中我们怎么做？在 ObjC 中我们可以通过一个实例的 class 方法来获取其类型名<br>1<br>2<br>NSDate *date = [NSDate date];<br>NSLog(@\"%@\",","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"iOS","slug":"iOS","count":9,"path":"api/tags/iOS.json"},{"name":"Programming","slug":"Programming","count":13,"path":"api/tags/Programming.json"},{"name":"Swift","slug":"Swift","count":4,"path":"api/tags/Swift.json"},{"name":"type","slug":"type","count":2,"path":"api/tags/type.json"},{"name":"language","slug":"language","count":1,"path":"api/tags/language.json"},{"name":"instance","slug":"instance","count":1,"path":"api/tags/instance.json"}]},{"title":"iOS 关闭键盘方式的小结","slug":"learning_iOS/keyboard-dissmissing","date":"2017-01-03T17:04:40.000Z","updated":"2017-01-29T02:27:31.000Z","comments":true,"path":"api/articles/learning_iOS/keyboard-dissmissing.json","excerpt":"<p>如何优雅的关闭 iOS 键盘，Objective C 语言。<br>","keywords":null,"cover":null,"content":null,"text":"如何优雅的关闭 iOS 键盘，Objective C 语言。<br>收起键盘方法点击return键收起，使用UITextFieldDelegate中的方法<br>- (BOOL)textFieldShouldReturn:(UITextField *)textField{retu","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"iOS","slug":"iOS","count":9,"path":"api/tags/iOS.json"},{"name":"Programming","slug":"Programming","count":13,"path":"api/tags/Programming.json"},{"name":"Objective C","slug":"Objective-C","count":4,"path":"api/tags/Objective-C.json"},{"name":"keyboard","slug":"keyboard","count":1,"path":"api/tags/keyboard.json"}]},{"title":"Autoclosure and Lazy Evaluation","slug":"learning_swift/autoclosure","date":"2017-01-29T12:18:31.000Z","updated":"2017-02-04T08:07:12.000Z","comments":true,"path":"api/articles/learning_swift/autoclosure.json","excerpt":"<p>A note about how to use <code>@autoclosure</code> in Swift programming language</p>","keywords":null,"cover":null,"content":null,"text":"A note about how to use @autoclosure in Swift programming languageA short explain to @autoclosureWhat @autoclosure have done is to wrap a ex","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"iOS","slug":"iOS","count":9,"path":"api/tags/iOS.json"},{"name":"Programming","slug":"Programming","count":13,"path":"api/tags/Programming.json"},{"name":"Swift","slug":"Swift","count":4,"path":"api/tags/Swift.json"},{"name":"autoclosure","slug":"autoclosure","count":1,"path":"api/tags/autoclosure.json"},{"name":"lazy evaluation","slug":"lazy-evaluation","count":1,"path":"api/tags/lazy-evaluation.json"}]},{"title":"Learning Enum, Structure and Class in Swift Programming Language","slug":"learning_swift/enum_struct_class_in_swift","date":"2017-02-12T09:50:36.000Z","updated":"2017-02-12T09:54:50.000Z","comments":true,"path":"api/articles/learning_swift/enum_struct_class_in_swift.json","excerpt":"<p>这篇文章简要介绍了 Swift 语言中 <code>enum</code>，<code>struct</code>，<code>class</code> 之间的区别</p><p><em><a href=\"https://www.raywenderlich.com/119881/enums-structs-and-classes-in-swift\" target=\"_blank\" rel=\"noopener\">原文链接：</a></em></p>","keywords":null,"cover":null,"content":null,"text":"这篇文章简要介绍了 Swift 语言中 enum，struct，class 之间的区别原文链接：","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"Programming","slug":"Programming","count":13,"path":"api/tags/Programming.json"},{"name":"Swift","slug":"Swift","count":4,"path":"api/tags/Swift.json"},{"name":"Difference","slug":"Difference","count":2,"path":"api/tags/Difference.json"},{"name":"Language","slug":"Language","count":2,"path":"api/tags/Language.json"},{"name":"Enum","slug":"Enum","count":1,"path":"api/tags/Enum.json"},{"name":"Struct","slug":"Struct","count":1,"path":"api/tags/Struct.json"},{"name":"Class","slug":"Class","count":1,"path":"api/tags/Class.json"}]},{"title":"为什么 Python 的 Range 要设计成左开右闭区间？为什么数组下标要从零开始？","slug":"notes/why_number_should_start_at_zero","date":"2018-04-03T15:24:16.124Z","updated":"2018-04-04T11:23:28.126Z","comments":true,"path":"api/articles/notes/why_number_should_start_at_zero.json","excerpt":"<p>除了 Python 的 Range，还有 Swift 语言的 <code>..&lt;</code> 运算符之类的也有这样的设计。而 Edsger W. Dijkstra 在1982年写过一篇短文章，分析了一下其中的原因，这里做摘录与翻译如下。</p>","keywords":null,"cover":null,"content":null,"text":"除了 Python 的 Range，还有 Swift 语言的 ..&lt; 运算符之类的也有这样的设计。而 Edsger W. Dijkstra 在1982年写过一篇短文章，分析了一下其中的原因，这里做摘录与翻译如下。原文：Why numbering should start a","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"Programming","slug":"Programming","count":13,"path":"api/tags/Programming.json"}]},{"title":"An Introduction to Map(), flatMap(), Reduce() and Filter() in Swift","slug":"learning_swift/map_reduce_filter","date":"2017-02-02T06:26:48.000Z","updated":"2017-02-03T05:56:18.000Z","comments":true,"path":"api/articles/learning_swift/map_reduce_filter.json","excerpt":"<p>我曾经很好奇 map(), flatMap(), reduce() 和 filter() 函数是用来做什么的，是怎么实现的。在我阅读了 Swift 源码还有一些文章以后，我觉得是时候分享一下了。</p><p>I have been wondering a long time about what the map() function, reduce() function and filter() function have done. After reading many passages and <a href=\"https://github.com/apple/swift/blob/master/stdlib/public/core/\" target=\"_blank\" rel=\"noopener\">the source code of swift</a>, I think it is time to summerize what I have got. Besides, I hope this post can help someone who want to but not yet understand these function to understand them.</p>","keywords":null,"cover":null,"content":null,"text":"我曾经很好奇 map(), flatMap(), reduce() 和 filter() 函数是用来做什么的，是怎么实现的。在我阅读了 Swift 源码还有一些文章以后，我觉得是时候分享一下了。I have been wondering a long time about wha","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"Programming","slug":"Programming","count":13,"path":"api/tags/Programming.json"},{"name":"Swift","slug":"Swift","count":4,"path":"api/tags/Swift.json"},{"name":"Language","slug":"Language","count":2,"path":"api/tags/Language.json"},{"name":"map","slug":"map","count":1,"path":"api/tags/map.json"},{"name":"reduce","slug":"reduce","count":1,"path":"api/tags/reduce.json"},{"name":"filter","slug":"filter","count":1,"path":"api/tags/filter.json"}]}]}