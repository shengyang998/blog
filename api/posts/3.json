{"total":35,"pageSize":10,"pageCount":4,"data":[{"title":"Learning Enum, Structure and Class in Swift Programming Language","slug":"learning_swift/enum_struct_class_in_swift","date":"2017-02-12T09:50:36.000Z","updated":"2017-02-12T09:54:50.000Z","comments":true,"path":"api/articles/learning_swift/enum_struct_class_in_swift.json","excerpt":"<p>这篇文章简要介绍了 Swift 语言中 <code>enum</code>，<code>struct</code>，<code>class</code> 之间的区别</p><p><em><a href=\"https://www.raywenderlich.com/119881/enums-structs-and-classes-in-swift\" target=\"_blank\" rel=\"noopener\">原文链接：</a></em></p>","keywords":null,"cover":null,"content":null,"text":"这篇文章简要介绍了 Swift 语言中 enum，struct，class 之间的区别原文链接：","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"Programming","slug":"Programming","count":13,"path":"api/tags/Programming.json"},{"name":"Swift","slug":"Swift","count":4,"path":"api/tags/Swift.json"},{"name":"Difference","slug":"Difference","count":2,"path":"api/tags/Difference.json"},{"name":"Language","slug":"Language","count":2,"path":"api/tags/Language.json"},{"name":"Enum","slug":"Enum","count":1,"path":"api/tags/Enum.json"},{"name":"Struct","slug":"Struct","count":1,"path":"api/tags/Struct.json"},{"name":"Class","slug":"Class","count":1,"path":"api/tags/Class.json"}]},{"title":"An Introduction to Map(), flatMap(), Reduce() and Filter() in Swift","slug":"learning_swift/map_reduce_filter","date":"2017-02-02T06:26:48.000Z","updated":"2017-02-03T05:56:18.000Z","comments":true,"path":"api/articles/learning_swift/map_reduce_filter.json","excerpt":"<p>我曾经很好奇 map(), flatMap(), reduce() 和 filter() 函数是用来做什么的，是怎么实现的。在我阅读了 Swift 源码还有一些文章以后，我觉得是时候分享一下了。</p><p>I have been wondering a long time about what the map() function, reduce() function and filter() function have done. After reading many passages and <a href=\"https://github.com/apple/swift/blob/master/stdlib/public/core/\" target=\"_blank\" rel=\"noopener\">the source code of swift</a>, I think it is time to summerize what I have got. Besides, I hope this post can help someone who want to but not yet understand these function to understand them.</p>","keywords":null,"cover":null,"content":null,"text":"我曾经很好奇 map(), flatMap(), reduce() 和 filter() 函数是用来做什么的，是怎么实现的。在我阅读了 Swift 源码还有一些文章以后，我觉得是时候分享一下了。I have been wondering a long time about wha","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"Programming","slug":"Programming","count":13,"path":"api/tags/Programming.json"},{"name":"Swift","slug":"Swift","count":4,"path":"api/tags/Swift.json"},{"name":"Language","slug":"Language","count":2,"path":"api/tags/Language.json"},{"name":"map","slug":"map","count":1,"path":"api/tags/map.json"},{"name":"reduce","slug":"reduce","count":1,"path":"api/tags/reduce.json"},{"name":"filter","slug":"filter","count":1,"path":"api/tags/filter.json"}]},{"title":"LLDB Tutorial","slug":"learning_swift/LLDB_Usage","date":"2017-01-31T12:02:09.000Z","updated":"2017-01-31T14:07:07.000Z","comments":true,"path":"api/articles/learning_swift/LLDB_Usage.json","excerpt":"<p>According to <a href=\"https://lldb.llvm.org\" target=\"_blank\" rel=\"noopener\">The LLDB Debuger</a>:</p><blockquote><p>LLDB is a next generation, high-performance debugger. It is built as a set of reusable components which highly leverage existing libraries in the larger LLVM Project, such as the Clang expression parser and LLVM disassembler.<br>LLDB is the default debugger in Xcode on Mac OS X and supports debugging C, Objective-C and C++ on the desktop and iOS devices and simulator.</p></blockquote><p>So, we can assume LLDB a the advanced version of the gdb debuger. And it’s almost backword compatible.<br>","keywords":null,"cover":null,"content":null,"text":"According to The LLDB Debuger:LLDB is a next generation, high-performance debugger. It is built as a set of reusable components which highly","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"LLDB","slug":"LLDB","count":1,"path":"api/tags/LLDB.json"},{"name":"GDB","slug":"GDB","count":1,"path":"api/tags/GDB.json"},{"name":"Debug","slug":"Debug","count":1,"path":"api/tags/Debug.json"}]},{"title":"Autoclosure and Lazy Evaluation","slug":"learning_swift/autoclosure","date":"2017-01-29T12:18:31.000Z","updated":"2017-02-04T08:07:12.000Z","comments":true,"path":"api/articles/learning_swift/autoclosure.json","excerpt":"<p>A note about how to use <code>@autoclosure</code> in Swift programming language</p>","keywords":null,"cover":null,"content":null,"text":"A note about how to use @autoclosure in Swift programming languageA short explain to @autoclosureWhat @autoclosure have done is to wrap a ex","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"iOS","slug":"iOS","count":9,"path":"api/tags/iOS.json"},{"name":"Programming","slug":"Programming","count":13,"path":"api/tags/Programming.json"},{"name":"Swift","slug":"Swift","count":4,"path":"api/tags/Swift.json"},{"name":"autoclosure","slug":"autoclosure","count":1,"path":"api/tags/autoclosure.json"},{"name":"lazy evaluation","slug":"lazy-evaluation","count":1,"path":"api/tags/lazy-evaluation.json"}]},{"title":"ARC Rules","slug":"learning_iOS/ARC_Rules","date":"2017-01-29T02:19:41.000Z","updated":"2017-01-29T03:30:19.000Z","comments":true,"path":"api/articles/learning_iOS/ARC_Rules.json","excerpt":"<p>A note for book <a href=\"http://www.apress.com/us/book/9781430241164\" target=\"_blank\" rel=\"noopener\">Pro Multithreading and Memory Management for iOS and OS X</a><br>ARC is summarized in Apple’s own words:</p><blockquote><p>ARC in Objective-C makes memory management the job of the compiler. By enabling ARC with the new Apple LLVM compiler, you will never need to type retain or release again, dramatically simplifying the development process, while reducing craches and memory leaks. The compiler has a complete understanding of your objects, and releases each object the instant it is no longer used, so apps run as fast as ever, with predictable, smooth performance.</p></blockquote>","keywords":null,"cover":null,"content":null,"text":"A note for book Pro Multithreading and Memory Management for iOS and OS X<br>ARC is summarized in Apple’s own words:ARC in Objective-C makes","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"iOS","slug":"iOS","count":9,"path":"api/tags/iOS.json"},{"name":"Programming","slug":"Programming","count":13,"path":"api/tags/Programming.json"},{"name":"ARC","slug":"ARC","count":1,"path":"api/tags/ARC.json"},{"name":"Rules","slug":"Rules","count":1,"path":"api/tags/Rules.json"},{"name":"Objective C","slug":"Objective-C","count":4,"path":"api/tags/Objective-C.json"},{"name":"Coming soon...","slug":"Coming-soon","count":3,"path":"api/tags/Coming-soon.json"}]},{"title":"使用 GitHub Pages 搭建博客指南","slug":"how_to_build_a_blog/blog_with_github_pages","date":"2017-01-28T05:18:35.000Z","updated":"2018-04-19T08:43:27.291Z","comments":true,"path":"api/articles/how_to_build_a_blog/blog_with_github_pages.json","excerpt":"<p>个人使用 GitHub Pages 结合 Hexo 搭建静态网页博客的一点总结<br>","keywords":null,"cover":null,"content":null,"text":"个人使用 GitHub Pages 结合 Hexo 搭建静态网页博客的一点总结<br>为什么用 GitHub Pages 和 Hexo 等工具来搭建博客呢？为什么不用 WordPress？首先，仅仅为了一个博客，很多人可能并不想花资金到服务器上。一台服务器应该用来做些更有趣的事情","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"GitHub","slug":"GitHub","count":1,"path":"api/tags/GitHub.json"},{"name":"Pages","slug":"Pages","count":1,"path":"api/tags/Pages.json"},{"name":"blog","slug":"blog","count":1,"path":"api/tags/blog.json"},{"name":"hexo","slug":"hexo","count":1,"path":"api/tags/hexo.json"}]},{"title":"中性灰磨皮以及细节增强","slug":"PictureProcessing/50gray_buffing","date":"2017-01-27T14:32:36.000Z","updated":"2017-01-28T16:22:39.000Z","comments":true,"path":"api/articles/PictureProcessing/50gray_buffing.json","excerpt":"<p>中性灰磨皮的基本步骤，其思路，还是 <code>D&amp;B</code><br>","keywords":null,"cover":null,"content":null,"text":"中性灰磨皮的基本步骤，其思路，还是 D&amp;B<br>使用图章等工具进行斑点的消除新建一个颜色填充图层，填充50%灰色，设置图层混合模式为柔光新建一个颜色填充图层，填充黑色，设置图层混合模式为颜色新建一个颜色填充图层，填充黑色，设置图层混合模式为柔光使用笔刷在中性灰图层更改高","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"Photoshop","slug":"Photoshop","count":1,"path":"api/tags/Photoshop.json"},{"name":"修图","slug":"修图","count":1,"path":"api/tags/修图.json"}]},{"title":"关于 SequenceType","slug":"learning_iOS/SequenceType","date":"2017-01-25T07:47:23.000Z","updated":"2017-01-29T02:27:33.000Z","comments":true,"path":"api/articles/learning_iOS/SequenceType.json","excerpt":"<p>Coming soon…<br>","keywords":null,"cover":null,"content":null,"text":"Coming soon…<br>从 Array 开始","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"iOS","slug":"iOS","count":9,"path":"api/tags/iOS.json"},{"name":"Programming","slug":"Programming","count":13,"path":"api/tags/Programming.json"},{"name":"Coming soon...","slug":"Coming-soon","count":3,"path":"api/tags/Coming-soon.json"},{"name":"Sequence","slug":"Sequence","count":1,"path":"api/tags/Sequence.json"},{"name":"type","slug":"type","count":2,"path":"api/tags/type.json"}]},{"title":"Debug Print in iOS Programming","slug":"learning_iOS/debugPrint","date":"2017-01-15T02:29:44.000Z","updated":"2017-01-29T02:27:34.000Z","comments":true,"path":"api/articles/learning_iOS/debugPrint.json","excerpt":"<p>自定义 print 输出<br>","keywords":null,"cover":null,"content":null,"text":"自定义 print 输出<br>请先参考王魏的博客 Swifter","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"Coming soon...","slug":"Coming-soon","count":3,"path":"api/tags/Coming-soon.json"}]},{"title":"Swift 中如何获取实例类型","slug":"learning_iOS/get-type-of-instance","date":"2017-01-15T02:17:03.000Z","updated":"2017-01-29T02:27:30.000Z","comments":true,"path":"api/articles/learning_iOS/get-type-of-instance.json","excerpt":"<p>一门编程语言的动态特性，最基础的就是获取一个实例的类型。<br>","keywords":null,"cover":null,"content":null,"text":"一门编程语言的动态特性，最基础的就是获取一个实例的类型。<br>在 ObjC 中我们怎么做？在 ObjC 中我们可以通过一个实例的 class 方法来获取其类型名<br>1<br>2<br>NSDate *date = [NSDate date];<br>NSLog(@\"%@\",","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"iOS","slug":"iOS","count":9,"path":"api/tags/iOS.json"},{"name":"Programming","slug":"Programming","count":13,"path":"api/tags/Programming.json"},{"name":"Swift","slug":"Swift","count":4,"path":"api/tags/Swift.json"},{"name":"type","slug":"type","count":2,"path":"api/tags/type.json"},{"name":"language","slug":"language","count":1,"path":"api/tags/language.json"},{"name":"instance","slug":"instance","count":1,"path":"api/tags/instance.json"}]}]}